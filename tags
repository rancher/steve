!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
--net	Makefile	/^	docker run $(DOCKER_ARGS) --net=host --uts=host --rm -it -v ${HOME}\/.kube:\/root\/.kube steve --kubeconfig \/root\/.kube\/config --http-listen-port 8989 --https-listen-port 0$/;"	m
APIFunc	pkg/server/handler/apiserver.go	/^type APIFunc func(schema.Factory, *types.APIRequest)$/;"	t
ASC	pkg/sqlcache/sqltypes/types.go	/^	ASC SortOrder = iota$/;"	c
ASC	pkg/stores/partition/listprocessor/processor.go	/^	ASC SortOrder = iota$/;"	c
Accept	pkg/aggregation/listener.go	/^func (l *Listener) Accept() (net.Conn, error) {$/;"	f
Accept	pkg/schema/definitions/converter.go	/^func (r *openAPIV2Reference) Accept(v proto.SchemaVisitor) {$/;"	f
Access	pkg/accesscontrol/access_set.go	/^type Access struct {$/;"	t
Access	pkg/attributes/attributes.go	/^func Access(s *types.APISchema) interface{} {$/;"	f
AccessControl	pkg/accesscontrol/access_control.go	/^type AccessControl struct {$/;"	t
AccessFor	pkg/accesscontrol/access_store.go	/^func (l *AccessStore) AccessFor(user user.Info) *AccessSet {$/;"	f
AccessFor	pkg/accesscontrol/fake/AccessSetLookup.go	/^func (m *MockAccessSetLookup) AccessFor(arg0 user.Info) *accesscontrol.AccessSet {$/;"	f
AccessFor	pkg/accesscontrol/fake/AccessSetLookup.go	/^func (mr *MockAccessSetLookupMockRecorder) AccessFor(arg0 any) *gomock.Call {$/;"	f
AccessFor	pkg/schema/mock_test.go	/^func (m *mockAccessSetLookup) AccessFor(user user.Info) *accesscontrol.AccessSet {$/;"	f
AccessFor	pkg/stores/partition/store_test.go	/^func (m *mockAccessSetLookup) AccessFor(user user.Info) *accesscontrol.AccessSet {$/;"	f
AccessFor	pkg/stores/sqlpartition/store_test.go	/^func (m *mockAccessSetLookup) AccessFor(user user.Info) *accesscontrol.AccessSet {$/;"	f
AccessList	pkg/accesscontrol/access_set.go	/^type AccessList []Access$/;"	t
AccessListByVerb	pkg/accesscontrol/access_set.go	/^type AccessListByVerb map[string]AccessList$/;"	t
AccessListFor	pkg/accesscontrol/access_set.go	/^func (a AccessSet) AccessListFor(verb string, gr schema.GroupResource) (result AccessList) {$/;"	f
AccessSet	pkg/accesscontrol/access_set.go	/^type AccessSet struct {$/;"	t
AccessSetAuthorizer	pkg/ext/apiserver_authorization.go	/^type AccessSetAuthorizer struct {$/;"	t
AccessSetLookup	pkg/accesscontrol/access_store.go	/^type AccessSetLookup interface {$/;"	t
AccessStore	pkg/accesscontrol/access_store.go	/^type AccessStore struct {$/;"	t
Add	pkg/accesscontrol/access_set.go	/^func (a *AccessSet) Add(verb string, gr schema.GroupResource, access Access) {$/;"	f
Add	pkg/accesscontrol/access_store_test.go	/^func (c *spyCache) Add(k interface{}, v interface{}, ttl time.Duration) {$/;"	f
Add	pkg/clustercache/cancel_collection.go	/^func (c *cancelCollection) Add(ctx context.Context, obj interface{}) {$/;"	f
Add	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Add(arg0 any) error {$/;"	f
Add	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Add(arg0 any) *gomock.Call {$/;"	f
Add	pkg/sqlcache/store/store.go	/^func (s *Store) Add(obj any) error {$/;"	f
Add	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) Add(reqs ...Requirement) Selector {$/;"	f
Add	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) Add(obj runtime.Object) {$/;"	f
AddAccessForUser	pkg/schema/mock_test.go	/^func (m *mockAccessSetLookup) AddAccessForUser(user user.Info, verb string, gr schema.GroupResource, namespace string, name string) {$/;"	f
AddApply	pkg/resources/cluster/cluster.go	/^func AddApply(apiSchemas *types.APISchemas, schema *types.APISchema) {$/;"	f
AddDisallowMethods	pkg/attributes/attributes.go	/^func AddDisallowMethods(s *types.APISchema, methods ...string) {$/;"	f
AddEventHandler	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) AddEventHandler(arg0 cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {$/;"	f
AddEventHandler	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) AddEventHandler(arg0 any) *gomock.Call {$/;"	f
AddEventHandler	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) AddEventHandler(handler cache.ResourceEventHandler) (cache.ResourceEventHandlerRegistration, error) {$/;"	f
AddEventHandlerWithResyncPeriod	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) AddEventHandlerWithResyncPeriod(arg0 cache.ResourceEventHandler, arg1 time.Duration) (cache.ResourceEventHandlerRegistration, error) {$/;"	f
AddEventHandlerWithResyncPeriod	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) AddEventHandlerWithResyncPeriod(arg0, arg1 any) *gomock.Call {$/;"	f
AddEventHandlerWithResyncPeriod	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) AddEventHandlerWithResyncPeriod(handler cache.ResourceEventHandler, resyncPeriod time.Duration) (cache.ResourceEventHandlerRegistration, error) {$/;"	f
AddGroup	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) AddGroup(groupName string, preferredVersion string, includeOverrideVersion bool) {$/;"	f
AddIndexer	pkg/stores/partition/listprocessor/processor_test.go	/^func (m mockNamespaceCache) AddIndexer(indexName string, indexer generic.Indexer[*corev1.Namespace]) {$/;"	f
AddIndexer	pkg/stores/partition/store_test.go	/^func (m mockNamespaceCache) AddIndexer(indexName string, indexer generic.Indexer[*corev1.Namespace]) {$/;"	f
AddIndexer	pkg/stores/sqlpartition/store_test.go	/^func (m mockNamespaceCache) AddIndexer(indexName string, indexer generic.Indexer[*corev1.Namespace]) {$/;"	f
AddIndexers	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) AddIndexers(arg0 cache.Indexers) error {$/;"	f
AddIndexers	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) AddIndexers(arg0 any) *gomock.Call {$/;"	f
AddIndexers	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) AddIndexers(newIndexers cache.Indexers) error {$/;"	f
AddIndexers	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) AddIndexers(indexers cache.Indexers) error                  { return nil }$/;"	f
AddListener	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) AddListener(listener dynamiccertificates.Listener) {$/;"	f
AddListener	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) AddListener(listener dynamiccertificates.Listener) {$/;"	f
AddNonResourceURLs	pkg/accesscontrol/access_set.go	/^func (a *AccessSet) AddNonResourceURLs(verbs, urls []string) {$/;"	f
AddResource	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) AddResource(group, version string, resource metav1.APIResource) {$/;"	f
AddSummaryObj	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) AddSummaryObj(summaryObj *summary.SummarizedObject) {$/;"	f
AddTemplate	pkg/schema/collection.go	/^func (c *Collection) AddTemplate(templates ...Template) {$/;"	f
AddTemplate	pkg/schema/fake/factory.go	/^func (m *MockFactory) AddTemplate(arg0 ...schema.Template) {$/;"	f
AddTemplate	pkg/schema/fake/factory.go	/^func (mr *MockFactoryMockRecorder) AddTemplate(arg0 ...any) *gomock.Call {$/;"	f
AddToScheme	pkg/ext/apiserver.go	/^	AddToScheme   = schemeBuilder.AddToScheme$/;"	v
Addr	pkg/aggregation/listener.go	/^func (l *Listener) Addr() net.Addr {$/;"	f
AdminClient	pkg/client/factory.go	/^func (p *Factory) AdminClient(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
AdminClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) AdminClient(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
AdminClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) AdminClient(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
AdminClientForWatch	pkg/client/factory.go	/^func (p *Factory) AdminClientForWatch(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
AdminDynamicClient	pkg/client/factory.go	/^func (p *Factory) AdminDynamicClient() dynamic.Interface {$/;"	f
AdminK8sInterface	pkg/client/factory.go	/^func (p *Factory) AdminK8sInterface() (kubernetes.Interface, error) {$/;"	f
AdminK8sInterface	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) AdminK8sInterface() (kubernetes.Interface, error) {$/;"	f
AdminK8sInterface	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) AdminK8sInterface() *gomock.Call {$/;"	f
AfterUpsert	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) AfterUpsert(key string, obj any, tx transaction.Client) error {$/;"	f
All	pkg/accesscontrol/access_set.go	/^func (a AccessListByVerb) All(verb string) bool {$/;"	f
All	pkg/accesscontrol/policy_rule_index.go	/^	All       = "*"$/;"	c
All	pkg/stores/partition/store_test.go	/^func (m mockPartitioner) All(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) ([]Partition, error) {$/;"	f
All	pkg/stores/proxy/rbac_store.go	/^func (p *rbacPartitioner) All(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) ([]partition.Partition, error) {$/;"	f
All	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockPartitioner) All(arg0 *types.APIRequest, arg1 *types.APISchema, arg2, arg3 string) ([]partition.Partition, error) {$/;"	f
All	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockPartitionerMockRecorder) All(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
All	pkg/stores/sqlpartition/partitioner.go	/^func (p *rbacPartitioner) All(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) ([]partition.Partition, error) {$/;"	f
All	pkg/stores/sqlpartition/store_test.go	/^func (m mockPartitioner) All(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) ([]partition.Partition, error) {$/;"	f
AlwaysAdmin	pkg/auth/filter.go	/^func AlwaysAdmin(req *http.Request) (user.Info, bool, error) {$/;"	f
AnyVerb	pkg/accesscontrol/access_set.go	/^func (a AccessListByVerb) AnyVerb(verb ...string) bool {$/;"	f
Apply	pkg/resources/cluster/apply.go	/^type Apply struct {$/;"	t
Apply	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {$/;"	f
Apply	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {$/;"	f
Apply	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {$/;"	f
Apply	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {$/;"	f
Apply	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {$/;"	f
Apply	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {$/;"	f
Apply	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Apply(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions, arg4 ...string) (*unstructured.Unstructured, error) {$/;"	f
Apply	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Apply(arg0, arg1, arg2, arg3 any, arg4 ...any) *gomock.Call {$/;"	f
ApplyInput	pkg/resources/cluster/rest.go	/^type ApplyInput struct {$/;"	t
ApplyOutput	pkg/resources/cluster/rest.go	/^type ApplyOutput struct {$/;"	t
ApplyStatus	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {$/;"	f
ApplyStatus	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ApplyStatus	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {$/;"	f
ApplyStatus	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ApplyStatus	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {$/;"	f
ApplyStatus	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ApplyStatus	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) ApplyStatus(arg0 context.Context, arg1 string, arg2 *unstructured.Unstructured, arg3 v1.ApplyOptions) (*unstructured.Unstructured, error) {$/;"	f
ApplyStatus	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) ApplyStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
AsBytes	pkg/ext/apiserver_suite_test.go	/^func (k CertPair) AsBytes() (cert []byte, key []byte, err error) {$/;"	f
AsSelector	pkg/stores/sqlpartition/queryparser/labels.go	/^func (ls Set) AsSelector() Selector {$/;"	f
AsSelectorPreValidated	pkg/stores/sqlpartition/queryparser/labels.go	/^func (ls Set) AsSelectorPreValidated() Selector {$/;"	f
AsValidatedSelector	pkg/stores/sqlpartition/queryparser/labels.go	/^func (ls Set) AsValidatedSelector() (Selector, error) {$/;"	f
Authenticate	pkg/auth/filter.go	/^func (a AuthenticatorFunc) Authenticate(req *http.Request) (user.Info, bool, error) {$/;"	f
Authenticate	pkg/auth/filter.go	/^func (w *webhookAuth) Authenticate(req *http.Request) (user.Info, bool, error) {$/;"	f
AuthenticateRequest	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) AuthenticateRequest(req *http.Request) (*authenticator.Response, bool, error) {$/;"	f
AuthenticateRequest	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) AuthenticateRequest(req *http.Request) (*authenticator.Response, bool, error) {$/;"	f
Authenticator	pkg/auth/filter.go	/^type Authenticator interface {$/;"	t
AuthenticatorFunc	pkg/auth/filter.go	/^type AuthenticatorFunc func(req *http.Request) (user.Info, bool, error)$/;"	t
Authorize	pkg/ext/apiserver_authorization.go	/^func (a *AccessSetAuthorizer) Authorize(ctx context.Context, attrs authorizer.Attributes) (authorized authorizer.Decision, reason string, err error) {$/;"	f
BaseSchema	pkg/resources/apigroups/apigroup.go	/^var BaseSchema = types.APISchema{$/;"	v
BeginTx	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockConnection) BeginTx(arg0 context.Context, arg1 *sql.TxOptions) (*sql.Tx, error) {$/;"	f
BeginTx	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockConnectionMockRecorder) BeginTx(arg0, arg1 any) *gomock.Call {$/;"	f
BenchmarkDecryption	pkg/sqlcache/encryption/encrypt_test.go	/^func BenchmarkDecryption(b *testing.B) {$/;"	f
BenchmarkEncryption	pkg/sqlcache/encryption/encrypt_test.go	/^func BenchmarkEncryption(b *testing.B) {$/;"	f
BoolSetting	pkg/ui/handler.go	/^type BoolSetting func() bool$/;"	t
ByGVK	pkg/schema/collection.go	/^func (c *Collection) ByGVK(gvk schema.GroupVersionKind) string {$/;"	f
ByGVK	pkg/schema/fake/factory.go	/^func (m *MockFactory) ByGVK(arg0 schema0.GroupVersionKind) string {$/;"	f
ByGVK	pkg/schema/fake/factory.go	/^func (mr *MockFactoryMockRecorder) ByGVK(arg0 any) *gomock.Call {$/;"	f
ByGVR	pkg/schema/collection.go	/^func (c *Collection) ByGVR(gvr schema.GroupVersionResource) string {$/;"	f
ByGVR	pkg/schema/fake/factory.go	/^func (m *MockFactory) ByGVR(arg0 schema0.GroupVersionResource) string {$/;"	f
ByGVR	pkg/schema/fake/factory.go	/^func (mr *MockFactoryMockRecorder) ByGVR(arg0 any) *gomock.Call {$/;"	f
ByID	pkg/resources/apigroups/apigroup.go	/^func (e *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/resources/cluster/cluster.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/resources/counts/counts.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/resources/userpreferences/localpref.go	/^func (l *localStore) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/stores/metrics/metrics_store.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/stores/partition/store.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/stores/partition/store_test.go	/^func (m *mockStore) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
ByID	pkg/stores/proxy/error_wrapper.go	/^func (e *ErrorStore) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/stores/proxy/proxy_store.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
ByID	pkg/stores/proxy/unformatter.go	/^func (u *unformatterStore) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) ByID(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
ByID	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockUnstructuredStoreMockRecorder) ByID(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
ByID	pkg/stores/sqlpartition/store.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByID	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
ByID	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) ByID(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
ByID	pkg/stores/switchschema/store.go	/^func (e *Store) ByID(apiOp *types.APIRequest, oldSchema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
ByIndex	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) ByIndex(indexName, indexedValue string) ([]any, error) {$/;"	f
ByNames	pkg/stores/proxy/proxy_store.go	/^func (s *Store) ByNames(apiOp *types.APIRequest, schema *types.APISchema, names sets.String) (*unstructured.UnstructuredList, []types.Warning, error) {$/;"	f
ByOptionsLister	pkg/sqlcache/informer/informer.go	/^type ByOptionsLister interface {$/;"	t
Cache	pkg/sqlcache/informer/factory/informer_factory.go	/^type Cache struct {$/;"	t
Cache	pkg/stores/sqlpartition/listprocessor/processor.go	/^type Cache interface {$/;"	t
Cache	pkg/stores/sqlproxy/proxy_store.go	/^type Cache interface {$/;"	t
CacheFactory	pkg/sqlcache/informer/factory/informer_factory.go	/^type CacheFactory struct {$/;"	t
CacheFactory	pkg/stores/sqlproxy/proxy_store.go	/^type CacheFactory interface {$/;"	t
CacheFactoryInitializer	pkg/stores/sqlproxy/proxy_store.go	/^type CacheFactoryInitializer func() (CacheFactory, error)$/;"	t
CacheFor	pkg/sqlcache/informer/factory/informer_factory.go	/^func (f *CacheFactory) CacheFor(ctx context.Context, fields [][]string, transform cache.TransformFunc, client dynamic.ResourceInterface, gvk schema.GroupVersionKind, namespaced bool, watchable bool) (Cache, error) {$/;"	f
CacheFor	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockCacheFactory) CacheFor(arg0 context.Context, arg1 [][]string, arg2 cache.TransformFunc, arg3 dynamic.ResourceInterface, arg4 schema.GroupVersionKind, arg5, arg6 bool) (factory.Cache, error) {$/;"	f
CacheFor	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockCacheFactoryMockRecorder) CacheFor(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *gomock.Call {$/;"	f
CanDo	pkg/accesscontrol/access_control.go	/^func (a *AccessControl) CanDo(apiOp *types.APIRequest, resource, verb, namespace, name string) error {$/;"	f
CanWatch	pkg/accesscontrol/access_control.go	/^func (a *AccessControl) CanWatch(apiOp *types.APIRequest, schema *types.APISchema) error {$/;"	f
CattleAuthFailed	pkg/auth/filter.go	/^const CattleAuthFailed = "X-API-Cattle-Auth-Failed"$/;"	c
CertBytes	pkg/ext/apiserver_suite_test.go	/^func (c *TinyCA) CertBytes() []byte {$/;"	f
CertBytes	pkg/ext/apiserver_suite_test.go	/^func (k CertPair) CertBytes() []byte {$/;"	f
CertPair	pkg/ext/apiserver_suite_test.go	/^type CertPair struct {$/;"	t
Chain	pkg/auth/filter.go	/^func (m Middleware) Chain(middleware Middleware) Middleware {$/;"	f
Change	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) Change(newObj, oldObj runtime.Object) {$/;"	f
ChangeHandler	pkg/clustercache/controller.go	/^type ChangeHandler func(gvr schema2.GroupVersionKind, key string, obj, oldObj runtime.Object) error$/;"	t
Chart	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^type Chart struct {$/;"	t
Clear	pkg/schema/mock_test.go	/^func (m *mockAccessSetLookup) Clear() {$/;"	f
Client	pkg/client/factory.go	/^func (p *Factory) Client(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
Client	pkg/sqlcache/db/client.go	/^type Client interface {$/;"	t
Client	pkg/sqlcache/db/transaction/transaction.go	/^type Client interface {$/;"	t
Client	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) Client(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
Client	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) Client(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
Client	pkg/stores/sqlproxy/tablelistconvert/client.go	/^type Client struct {$/;"	t
ClientForWatch	pkg/client/factory.go	/^func (p *Factory) ClientForWatch(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
ClientGetter	pkg/stores/proxy/proxy_store.go	/^type ClientGetter interface {$/;"	t
ClientGetter	pkg/stores/sqlproxy/proxy_store.go	/^type ClientGetter interface {$/;"	t
Closable	pkg/sqlcache/db/client.go	/^type Closable interface {$/;"	t
Close	pkg/aggregation/listener.go	/^func (l *Listener) Close() error {$/;"	f
Close	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockConnection) Close() error {$/;"	f
Close	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockRows) Close() error {$/;"	f
Close	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockConnectionMockRecorder) Close() *gomock.Call {$/;"	f
Close	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Close() *gomock.Call {$/;"	f
Close	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockRows) Close() error {$/;"	f
Close	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Close() *gomock.Call {$/;"	f
Close	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockRows) Close() error {$/;"	f
Close	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Close() *gomock.Call {$/;"	f
CloseStmt	pkg/sqlcache/db/client.go	/^func (c *client) CloseStmt(closable Closable) error {$/;"	f
CloseStmt	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) CloseStmt(arg0 db.Closable) error {$/;"	f
CloseStmt	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) CloseStmt(arg0 any) *gomock.Call {$/;"	f
CloseStmt	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) CloseStmt(arg0 db.Closable) error {$/;"	f
CloseStmt	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) CloseStmt(arg0 any) *gomock.Call {$/;"	f
CloseStmt	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) CloseStmt(arg0 db.Closable) error {$/;"	f
CloseStmt	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) CloseStmt(arg0 any) *gomock.Call {$/;"	f
CloseStmt	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) CloseStmt(arg0 db.Closable) error {$/;"	f
CloseStmt	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) CloseStmt(arg0 any) *gomock.Call {$/;"	f
ClosedParToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	ClosedParToken$/;"	c
Cluster	pkg/resources/cluster/cluster_type.go	/^type Cluster struct {$/;"	t
ClusterCache	pkg/clustercache/controller.go	/^type ClusterCache interface {$/;"	t
Collection	pkg/schema/collection.go	/^type Collection struct {$/;"	t
Column	pkg/schema/table/mapper.go	/^type Column struct {$/;"	t
ColumnDefinition	pkg/resources/common/dynamiccolumns.go	/^type ColumnDefinition struct {$/;"	t
ColumnMapper	pkg/schema/table/mapper.go	/^type ColumnMapper struct {$/;"	t
Columns	pkg/attributes/attributes.go	/^func Columns(s *types.APISchema) interface{} {$/;"	f
CommaToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	CommaToken$/;"	c
Config	pkg/debug/cli.go	/^type Config struct {$/;"	t
Config	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^type Config struct {$/;"	t
Config	pkg/server/cli/clicontext.go	/^type Config struct {$/;"	t
Conflicts	pkg/stores/sqlpartition/queryparser/labels.go	/^func Conflicts(labels1, labels2 Set) bool {$/;"	f
Connection	pkg/sqlcache/db/client.go	/^type Connection interface {$/;"	t
Continue	pkg/stores/partition/parallel.go	/^func (p *ParallelPartitionLister) Continue() string {$/;"	f
Controllers	pkg/server/config.go	/^type Controllers struct {$/;"	t
ConvertFunc	pkg/ext/utils.go	/^type ConvertFunc[T runtime.Object] func(obj T) []string$/;"	t
ConvertListOptions	pkg/ext/utils.go	/^func ConvertListOptions(options *metainternalversion.ListOptions) (*metav1.ListOptions, error) {$/;"	f
ConvertSelectorToLabelsMap	pkg/stores/sqlpartition/queryparser/labels.go	/^func ConvertSelectorToLabelsMap(selector string, opts ...field.PathOption) (Set, error) {$/;"	f
ConvertToTable	pkg/ext/apiserver_test.go	/^func (s *customColumnsStore) ConvertToTable(ctx context.Context, object runtime.Object, tableOptions runtime.Object) (*metav1.Table, error) {$/;"	f
ConvertToTable	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) ConvertToTable(ctx context.Context, object runtime.Object, tableOptions runtime.Object) (*metav1.Table, error) {$/;"	f
ConvertToTable	pkg/ext/utils.go	/^func ConvertToTable[T runtime.Object](ctx context.Context, object runtime.Object, tableOptions runtime.Object, groupResource schema.GroupResource, columnDefs []metav1.TableColumnDefinition, convertFn ConvertFunc[T]) (*metav1.Table, error) {$/;"	f
ConvertToTableDefault	pkg/ext/utils.go	/^func ConvertToTableDefault[T runtime.Object](ctx context.Context, object runtime.Object, tableOptions runtime.Object, groupResource schema.GroupResource) (*metav1.Table, error) {$/;"	f
Count	pkg/resources/counts/counts.go	/^type Count struct {$/;"	t
Create	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) Create(ctx context.Context, obj runtime.Object, createValidation rest.ValidateObjectFunc, options *metav1.CreateOptions) (runtime.Object, error) {$/;"	f
Create	pkg/ext/apiserver_test.go	/^func (s *partialStorage) Create(ctx context.Context, obj runtime.Object, createValidation regrest.ValidateObjectFunc, options *metav1.CreateOptions) (runtime.Object, error) {$/;"	f
Create	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) Create(ctx context.Context, obj runtime.Object, createValidation rest.ValidateObjectFunc, options *metav1.CreateOptions) (runtime.Object, error) {$/;"	f
Create	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Create	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Create	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Create	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Create	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) Create(apiOp *types.APIRequest, obj *unstructured.Unstructured, options metav1.CreateOptions, subresources ...string) (*unstructured.Unstructured, error) {$/;"	f
Create	pkg/stores/metrics/metrics_store.go	/^func (s *Store) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (types.APIObject, error) {$/;"	f
Create	pkg/stores/partition/store.go	/^func (s *Store) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (types.APIObject, error) {$/;"	f
Create	pkg/stores/partition/store_test.go	/^func (m *mockStore) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Create	pkg/stores/proxy/error_wrapper.go	/^func (e *ErrorStore) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (types.APIObject, error) {$/;"	f
Create	pkg/stores/proxy/proxy_store.go	/^func (s *Store) Create(apiOp *types.APIRequest, schema *types.APISchema, params types.APIObject) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Create	pkg/stores/proxy/unformatter.go	/^func (u *unformatterStore) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (types.APIObject, error) {$/;"	f
Create	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) Create(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 types.APIObject) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Create	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockUnstructuredStoreMockRecorder) Create(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
Create	pkg/stores/sqlpartition/store.go	/^func (s *Store) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (types.APIObject, error) {$/;"	f
Create	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) Create(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Create	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Create	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Create	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) Create(apiOp *types.APIRequest, schema *types.APISchema, params types.APIObject) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Create	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Create(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.CreateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Create	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Create(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Create	pkg/stores/switchschema/store.go	/^func (e *Store) Create(apiOp *types.APIRequest, oldSchema *types.APISchema, data types.APIObject) (types.APIObject, error) {$/;"	f
CreateOrUpdate	pkg/ext/utils.go	/^func CreateOrUpdate[T runtime.Object]($/;"	f
CreatePod	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) CreatePod(ctx context.Context, user user.Info, pod *v1.Pod, podOptions *PodOptions) (*v1.Pod, error) {$/;"	f
CurrentCABundleContent	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) CurrentCABundleContent() []byte {$/;"	f
CurrentCABundleContent	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) CurrentCABundleContent() []byte {$/;"	f
DESC	pkg/sqlcache/sqltypes/types.go	/^	DESC$/;"	c
DESC	pkg/stores/partition/listprocessor/processor.go	/^	DESC$/;"	c
DebounceableRefresher	pkg/debounce/refresher.go	/^type DebounceableRefresher struct {$/;"	t
Decrypt	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockDecryptor) Decrypt(arg0, arg1 []byte, arg2 uint32) ([]byte, error) {$/;"	f
Decrypt	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockDecryptorMockRecorder) Decrypt(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
Decrypt	pkg/sqlcache/encryption/encrypt.go	/^func (m *Manager) Decrypt(edata, nonce []byte, keyID uint32) ([]byte, error) {$/;"	f
Decryptor	pkg/sqlcache/db/client.go	/^type Decryptor interface {$/;"	t
DeepCopy	pkg/ext/fixtures_test.go	/^func (in *TestType) DeepCopy() *TestType {$/;"	f
DeepCopy	pkg/ext/fixtures_test.go	/^func (in *TestTypeList) DeepCopy() *TestTypeList {$/;"	f
DeepCopy	pkg/resources/counts/counts.go	/^func (i *ItemCount) DeepCopy() *ItemCount {$/;"	f
DeepCopy	pkg/resources/counts/counts.go	/^func (s *Summary) DeepCopy() *Summary {$/;"	f
DeepCopy	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) DeepCopy() internalSelector {$/;"	f
DeepCopy	pkg/stores/sqlpartition/queryparser/zz_generated.deepcopy.go	/^func (in *Requirement) DeepCopy() *Requirement {$/;"	f
DeepCopyInto	pkg/ext/fixtures_test.go	/^func (in *TestType) DeepCopyInto(out *TestType) {$/;"	f
DeepCopyInto	pkg/ext/fixtures_test.go	/^func (in *TestTypeList) DeepCopyInto(out *TestTypeList) {$/;"	f
DeepCopyInto	pkg/stores/sqlpartition/queryparser/zz_generated.deepcopy.go	/^func (in *Requirement) DeepCopyInto(out *Requirement) {$/;"	f
DeepCopyObject	pkg/ext/fixtures_test.go	/^func (in *TestType) DeepCopyObject() runtime.Object {$/;"	f
DeepCopyObject	pkg/ext/fixtures_test.go	/^func (in *TestTypeList) DeepCopyObject() runtime.Object {$/;"	f
DeepCopyObject	pkg/ext/fixtures_test.go	/^func (t *TestTypeOther) DeepCopyObject() runtime.Object {$/;"	f
DeepCopyObject	pkg/ext/fixtures_test.go	/^func (t *TestTypeOtherList) DeepCopyObject() runtime.Object {$/;"	f
DeepCopySelector	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) DeepCopySelector() Selector {$/;"	f
DeepCopySelector	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) DeepCopySelector() Selector {$/;"	f
DefaultAuthenticator	pkg/ext/apiserver_authentication.go	/^type DefaultAuthenticator struct {$/;"	t
DefaultFields	pkg/resources/virtual/common/common.go	/^type DefaultFields struct {$/;"	t
DefaultSchemaTemplates	pkg/resources/schema.go	/^func DefaultSchemaTemplates(cf *client.Factory,$/;"	f
DefaultSchemaTemplatesForStore	pkg/resources/schema.go	/^func DefaultSchemaTemplatesForStore(store types.Store,$/;"	f
DefaultSchemas	pkg/resources/schema.go	/^func DefaultSchemas(ctx context.Context, baseSchema *types.APISchemas, ccache clustercache.ClusterCache,$/;"	f
DefaultTemplate	pkg/resources/common/formatter.go	/^func DefaultTemplate(clientGetter proxy.ClientGetter,$/;"	f
DefaultTemplateForStore	pkg/resources/common/formatter.go	/^func DefaultTemplateForStore(store types.Store,$/;"	f
Delete	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) Delete(_ context.Context, _ string, _ rest.ValidateObjectFunc, _ *metav1.DeleteOptions) (runtime.Object, bool, error) {$/;"	f
Delete	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) Delete(ctx context.Context, name string, deleteValidation rest.ValidateObjectFunc, options *metav1.DeleteOptions) (runtime.Object, bool, error) {$/;"	f
Delete	pkg/resources/userpreferences/localpref.go	/^func (l *localStore) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
Delete	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {$/;"	f
Delete	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Delete	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {$/;"	f
Delete	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Delete	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Delete(arg0 any) error {$/;"	f
Delete	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Delete(arg0 any) *gomock.Call {$/;"	f
Delete	pkg/sqlcache/store/store.go	/^func (s *Store) Delete(obj any) error {$/;"	f
Delete	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) Delete(apiOp *types.APIRequest, name string, options metav1.DeleteOptions, subresources ...string) error {$/;"	f
Delete	pkg/stores/metrics/metrics_store.go	/^func (s *Store) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
Delete	pkg/stores/partition/store.go	/^func (s *Store) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
Delete	pkg/stores/partition/store_test.go	/^func (m *mockStore) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Delete	pkg/stores/proxy/error_wrapper.go	/^func (e *ErrorStore) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
Delete	pkg/stores/proxy/proxy_store.go	/^func (s *Store) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Delete	pkg/stores/proxy/unformatter.go	/^func (u *unformatterStore) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
Delete	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) Delete(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Delete	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockUnstructuredStoreMockRecorder) Delete(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
Delete	pkg/stores/sqlpartition/store.go	/^func (s *Store) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
Delete	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Delete	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {$/;"	f
Delete	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Delete	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) Delete(apiOp *types.APIRequest, schema *types.APISchema, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Delete	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Delete(arg0 context.Context, arg1 string, arg2 v1.DeleteOptions, arg3 ...string) error {$/;"	f
Delete	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Delete(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Delete	pkg/stores/switchschema/store.go	/^func (e *Store) Delete(apiOp *types.APIRequest, oldSchema *types.APISchema, id string) (types.APIObject, error) {$/;"	f
DeleteCollection	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {$/;"	f
DeleteCollection	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
DeleteCollection	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {$/;"	f
DeleteCollection	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
DeleteCollection	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {$/;"	f
DeleteCollection	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
DeleteCollection	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) DeleteCollection(arg0 context.Context, arg1 v1.DeleteOptions, arg2 v1.ListOptions) error {$/;"	f
DeleteCollection	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) DeleteCollection(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
DeleteRole	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) DeleteRole(ctx context.Context, pod v1.Pod) error {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (*Chart) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (*Config) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (*Value) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (*Hook) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (Hook_DeletePolicy) Descriptor() protoreflect.EnumDescriptor {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (Hook_Event) Descriptor() protoreflect.EnumDescriptor {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (*Info) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (*Maintainer) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (*Metadata) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (Metadata_Engine) Descriptor() protoreflect.EnumDescriptor {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (*Release) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (*Status) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (Status_Code) Descriptor() protoreflect.EnumDescriptor {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (*Template) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (*TestRun) Descriptor() ([]byte, []int) {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (TestRun_Status) Descriptor() protoreflect.EnumDescriptor {$/;"	f
Descriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (*TestSuite) Descriptor() ([]byte, []int) {$/;"	f
Destroy	pkg/ext/apiserver_test.go	/^func (t *partialStorage) Destroy() {$/;"	f
Destroy	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) Destroy() {$/;"	f
Dial	pkg/aggregation/listener.go	/^func (l *Listener) Dial(ctx context.Context, network, address string) (net.Conn, error) {$/;"	f
DisallowMethods	pkg/attributes/attributes.go	/^func DisallowMethods(s *types.APISchema) map[string]bool {$/;"	f
DoesNotExist	pkg/stores/sqlpartition/selection/operator.go	/^	DoesNotExist     Operator = "!"$/;"	c
DoesNotExistToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	DoesNotExistToken$/;"	c
Done	pkg/sqlcache/informer/synthetic_watcher.go	/^func (rw *SyntheticWatcher) Done() <-chan struct{} {$/;"	f
DoubleEquals	pkg/stores/sqlpartition/selection/operator.go	/^	DoubleEquals     Operator = "=="$/;"	c
DoubleEqualsToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	DoubleEqualsToken$/;"	c
DropHelmData	pkg/resources/formatters/formatter.go	/^func DropHelmData(data data.Object) {$/;"	f
DynamicClient	pkg/client/factory.go	/^func (p *Factory) DynamicClient(ctx *types.APIRequest, warningHandler rest.WarningHandler) (dynamic.Interface, error) {$/;"	f
DynamicClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) DynamicClient(arg0 *types.APIRequest, arg1 rest.WarningHandler) (dynamic.Interface, error) {$/;"	f
DynamicClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) DynamicClient(arg0, arg1 any) *gomock.Call {$/;"	f
DynamicColumns	pkg/resources/common/dynamiccolumns.go	/^type DynamicColumns struct {$/;"	t
EXPECT	pkg/accesscontrol/fake/AccessSetLookup.go	/^func (m *MockAccessSetLookup) EXPECT() *MockAccessSetLookupMockRecorder {$/;"	f
EXPECT	pkg/schema/fake/factory.go	/^func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockDecryptor) EXPECT() *MockDecryptorMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockEncryptor) EXPECT() *MockEncryptorMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockRows) EXPECT() *MockRowsMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockClient) EXPECT() *MockClientMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockStmt) EXPECT() *MockStmtMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) EXPECT() *MockClientMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockRows) EXPECT() *MockRowsMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) EXPECT() *MockClientMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) EXPECT() *MockSharedIndexInformerMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^func (m *MockTXClient) EXPECT() *MockTXClientMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/informer_mocks_test.go	/^func (m *MockByOptionsLister) EXPECT() *MockByOptionsListerMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) EXPECT() *MockStoreMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockStmt) EXPECT() *MockStmtMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockTXClient) EXPECT() *MockTXClientMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) EXPECT() *MockClientMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockRows) EXPECT() *MockRowsMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockStmt) EXPECT() *MockStmtMockRecorder {$/;"	f
EXPECT	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockTXClient) EXPECT() *MockTXClientMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^func (m *MockCache) EXPECT() *MockCacheMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockPartitioner) EXPECT() *MockPartitionerMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) EXPECT() *MockUnstructuredStoreMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockCache) EXPECT() *MockCacheMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockCacheFactory) EXPECT() *MockCacheFactoryMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) EXPECT() *MockClientGetterMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockRelationshipNotifier) EXPECT() *MockRelationshipNotifierMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockSchemaColumnSetter) EXPECT() *MockSchemaColumnSetterMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockTransformBuilder) EXPECT() *MockTransformBuilderMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^func (m *MockByOptionsLister) EXPECT() *MockByOptionsListerMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) EXPECT() *MockResourceInterfaceMockRecorder {$/;"	f
EXPECT	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {$/;"	f
Empty	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) Empty() bool {$/;"	f
Empty	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) Empty() bool {$/;"	f
Encrypt	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockEncryptor) Encrypt(arg0 []byte) ([]byte, []byte, uint32, error) {$/;"	f
Encrypt	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockEncryptorMockRecorder) Encrypt(arg0 any) *gomock.Call {$/;"	f
Encrypt	pkg/sqlcache/encryption/encrypt.go	/^func (m *Manager) Encrypt(data []byte) ([]byte, []byte, uint32, error) {$/;"	f
EncryptAllEnvVar	pkg/sqlcache/informer/factory/informer_factory.go	/^const EncryptAllEnvVar = "CATTLE_ENCRYPT_CACHE_ALL"$/;"	c
Encryptor	pkg/sqlcache/db/client.go	/^type Encryptor interface {$/;"	t
EndOfStringToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	EndOfStringToken$/;"	c
Enum	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x Hook_DeletePolicy) Enum() *Hook_DeletePolicy {$/;"	f
Enum	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x Hook_Event) Enum() *Hook_Event {$/;"	f
Enum	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x Metadata_Engine) Enum() *Metadata_Engine {$/;"	f
Enum	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x Status_Code) Enum() *Status_Code {$/;"	f
Enum	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x TestRun_Status) Enum() *TestRun_Status {$/;"	f
EnumDescriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (Hook_DeletePolicy) EnumDescriptor() ([]byte, []int) {$/;"	f
EnumDescriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (Hook_Event) EnumDescriptor() ([]byte, []int) {$/;"	f
EnumDescriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (Metadata_Engine) EnumDescriptor() ([]byte, []int) {$/;"	f
EnumDescriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (Status_Code) EnumDescriptor() ([]byte, []int) {$/;"	f
EnumDescriptor	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (TestRun_Status) EnumDescriptor() ([]byte, []int) {$/;"	f
Eq	pkg/sqlcache/sqltypes/types.go	/^	Eq        Op = "="$/;"	c
Equal	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r Requirement) Equal(x Requirement) bool {$/;"	f
Equals	pkg/stores/sqlpartition/queryparser/labels.go	/^func Equals(labels1, labels2 Set) bool {$/;"	f
Equals	pkg/stores/sqlpartition/selection/operator.go	/^	Equals           Operator = "="$/;"	c
EqualsToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	EqualsToken$/;"	c
Err	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockRows) Err() error {$/;"	f
Err	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Err() *gomock.Call {$/;"	f
Err	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockRows) Err() error {$/;"	f
Err	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Err() *gomock.Call {$/;"	f
Err	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockRows) Err() error {$/;"	f
Err	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Err() *gomock.Call {$/;"	f
Err	pkg/stores/partition/parallel.go	/^func (p *ParallelPartitionLister) Err() error {$/;"	f
ErrConfigRequired	pkg/server/server.go	/^var ErrConfigRequired = errors.New("rest config is required")$/;"	v
ErrInvalidColumn	pkg/sqlcache/informer/listoption_indexer.go	/^	ErrInvalidColumn = errors.New("supplied column is invalid")$/;"	v
ErrKeyNotFound	pkg/sqlcache/encryption/encrypt.go	/^	ErrKeyNotFound = errors.New("data key not found")$/;"	v
ErrNotHelmRelease	pkg/resources/formatters/formatter.go	/^	ErrNotHelmRelease = errors.New("not helm release") \/\/ error for when it's not a helm release$/;"	v
Error	pkg/proxy/error.go	/^func (e *errorResponder) Error(w http.ResponseWriter, req *http.Request, err error) {$/;"	f
Error	pkg/sqlcache/db/client.go	/^func (e *QueryError) Error() string {$/;"	f
ErrorStore	pkg/stores/proxy/error_wrapper.go	/^type ErrorStore struct {$/;"	t
ErrorToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	ErrorToken Token = iota$/;"	c
Exec	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockConnection) Exec(arg0 string, arg1 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockConnectionMockRecorder) Exec(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/db/transaction/transaction.go	/^func (c client) Exec(query string, args ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockClient) Exec(arg0 string, arg1 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockStmt) Exec(arg0 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/db/transaction_mocks_test.go	/^func (mr *MockClientMockRecorder) Exec(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/db/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) Exec(arg0 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^func (m *MockTXClient) Exec(arg0 string, arg1 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^func (mr *MockTXClientMockRecorder) Exec(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockStmt) Exec(arg0 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockTXClient) Exec(arg0 string, arg1 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) Exec(arg0 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (mr *MockTXClientMockRecorder) Exec(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockStmt) Exec(arg0 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockTXClient) Exec(arg0 string, arg1 ...any) (sql.Result, error) {$/;"	f
Exec	pkg/sqlcache/store/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) Exec(arg0 ...any) *gomock.Call {$/;"	f
Exec	pkg/sqlcache/store/transaction_mocks_test.go	/^func (mr *MockTXClientMockRecorder) Exec(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
ExistingContext	pkg/auth/filter.go	/^var ExistingContext = ToMiddleware(AuthenticatorFunc(func(req *http.Request) (user.Info, bool, error) {$/;"	v
Exists	pkg/sqlcache/sqltypes/types.go	/^	Exists    Op = "Exists"$/;"	c
Exists	pkg/stores/sqlpartition/selection/operator.go	/^	Exists           Operator = "exists"$/;"	c
ExtensionAPIServer	pkg/ext/apiserver.go	/^type ExtensionAPIServer struct {$/;"	t
ExtensionAPIServer	pkg/server/server.go	/^type ExtensionAPIServer interface {$/;"	t
ExtensionAPIServerOptions	pkg/ext/apiserver.go	/^type ExtensionAPIServerOptions struct {$/;"	t
ExtensionAPIServerSuite	pkg/ext/apiserver_suite_test.go	/^type ExtensionAPIServerSuite struct {$/;"	t
Factory	pkg/client/factory.go	/^type Factory struct {$/;"	t
Factory	pkg/schema/factory.go	/^type Factory interface {$/;"	t
FactoryOption	pkg/client/factory.go	/^type FactoryOption func(*factoryOptions)$/;"	t
FakeSummaryCache	pkg/resources/virtual/common/testutil.go	/^type FakeSummaryCache struct {$/;"	t
File_chart_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^var File_chart_proto protoreflect.FileDescriptor$/;"	v
File_config_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^var File_config_proto protoreflect.FileDescriptor$/;"	v
File_hook_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^var File_hook_proto protoreflect.FileDescriptor$/;"	v
File_info_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^var File_info_proto protoreflect.FileDescriptor$/;"	v
File_metadata_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^var File_metadata_proto protoreflect.FileDescriptor$/;"	v
File_release_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^var File_release_proto protoreflect.FileDescriptor$/;"	v
File_status_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^var File_status_proto protoreflect.FileDescriptor$/;"	v
File_template_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^var File_template_proto protoreflect.FileDescriptor$/;"	v
File_test_run_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^var File_test_run_proto protoreflect.FileDescriptor$/;"	v
File_test_suite_proto	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^var File_test_suite_proto protoreflect.FileDescriptor$/;"	v
Filter	pkg/sqlcache/sqltypes/types.go	/^type Filter struct {$/;"	t
Filter	pkg/stores/partition/listprocessor/processor.go	/^type Filter struct {$/;"	t
FilterByProjectsAndNamespaces	pkg/stores/partition/listprocessor/processor.go	/^func FilterByProjectsAndNamespaces(list []unstructured.Unstructured, projectsOrNamespaces ProjectsOrNamespacesFilter, namespaceCache corecontrollers.NamespaceCache) []unstructured.Unstructured {$/;"	f
FilterList	pkg/stores/partition/listprocessor/processor.go	/^func FilterList(list <-chan []unstructured.Unstructured, filters []OrFilter) []unstructured.Unstructured {$/;"	f
Flags	pkg/auth/cli/webhookcli.go	/^func Flags(config *WebhookConfig) []cli.Flag {$/;"	f
Flags	pkg/debug/cli.go	/^func Flags(config *Config) []cli.Flag {$/;"	f
Flags	pkg/server/cli/clicontext.go	/^func Flags(config *Config) []cli.Flag {$/;"	f
FriendlyVersion	pkg/version/version.go	/^func FriendlyVersion() string {$/;"	f
FromInternal	pkg/schema/table/mapper.go	/^func (t *ColumnMapper) FromInternal(d data.Object) {$/;"	f
GR	pkg/attributes/attributes.go	/^func GR(s *types.APISchema) schema.GroupResource {$/;"	f
GVK	pkg/attributes/attributes.go	/^func GVK(s *types.APISchema) schema.GroupVersionKind {$/;"	f
GVKToSchemaID	pkg/schema/converter/k8stonorman.go	/^func GVKToSchemaID(gvk schema.GroupVersionKind) string {$/;"	f
GVKToVersionedSchemaID	pkg/schema/converter/k8stonorman.go	/^func GVKToVersionedSchemaID(gvk schema.GroupVersionKind) string {$/;"	f
GVR	pkg/attributes/attributes.go	/^func GVR(s *types.APISchema) schema.GroupVersionResource {$/;"	f
GVRToPluralName	pkg/schema/converter/k8stonorman.go	/^func GVRToPluralName(gvr schema.GroupVersionResource) string {$/;"	f
Get	pkg/clustercache/controller.go	/^func (h *clusterCache) Get(gvk schema2.GroupVersionKind, namespace, name string) (interface{}, bool, error) {$/;"	f
Get	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) Get(ctx context.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {$/;"	f
Get	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) Get(ctx context.Context, name string, options *metav1.GetOptions) (runtime.Object, error) {$/;"	f
Get	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) Get(gvk schema2.GroupVersionKind, namespace, name string) (interface{}, bool, error) {$/;"	f
Get	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Get	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Get	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Get	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Get	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Get(arg0 any) (any, bool, error) {$/;"	f
Get	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Get(arg0 any) *gomock.Call {$/;"	f
Get	pkg/sqlcache/store/store.go	/^func (s *Store) Get(obj any) (item any, exists bool, err error) {$/;"	f
Get	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) Get(apiOp *types.APIRequest, name string, options metav1.GetOptions, subresources ...string) (*unstructured.Unstructured, error) {$/;"	f
Get	pkg/stores/partition/listprocessor/processor_test.go	/^func (m mockNamespaceCache) Get(name string) (*corev1.Namespace, error) {$/;"	f
Get	pkg/stores/partition/store_test.go	/^func (m mockNamespaceCache) Get(name string) (*corev1.Namespace, error) {$/;"	f
Get	pkg/stores/sqlpartition/queryparser/labels.go	/^func (ls Set) Get(label string) string {$/;"	f
Get	pkg/stores/sqlpartition/store_test.go	/^func (m mockNamespaceCache) Get(name string) (*corev1.Namespace, error) {$/;"	f
Get	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Get	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Get	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Get(arg0 context.Context, arg1 string, arg2 v1.GetOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Get	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Get(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
GetAccessListMap	pkg/accesscontrol/access_set.go	/^func GetAccessListMap(s *types.APISchema) AccessListByVerb {$/;"	f
GetAnnotations	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetAnnotations() map[string]string {$/;"	f
GetApiVersion	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetApiVersion() string {$/;"	f
GetAppVersion	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetAppVersion() string {$/;"	f
GetAuthorizer	pkg/ext/apiserver.go	/^func (s *ExtensionAPIServer) GetAuthorizer() authorizer.Authorizer {$/;"	f
GetByIndex	pkg/stores/partition/listprocessor/processor_test.go	/^func (m mockNamespaceCache) GetByIndex(indexName, key string) ([]*corev1.Namespace, error) {$/;"	f
GetByIndex	pkg/stores/partition/store_test.go	/^func (m mockNamespaceCache) GetByIndex(indexName, key string) ([]*corev1.Namespace, error) {$/;"	f
GetByIndex	pkg/stores/sqlpartition/store_test.go	/^func (m mockNamespaceCache) GetByIndex(indexName, key string) ([]*corev1.Namespace, error) {$/;"	f
GetByKey	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) GetByKey(arg0 string) (any, bool, error) {$/;"	f
GetByKey	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) GetByKey(arg0 any) *gomock.Call {$/;"	f
GetByKey	pkg/sqlcache/store/store.go	/^func (s *Store) GetByKey(key string) (item any, exists bool, err error) {$/;"	f
GetChart	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetChart() *Chart {$/;"	f
GetCode	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) GetCode() Status_Code {$/;"	f
GetColumnDefinitions	pkg/resources/virtual/common/util.go	/^func GetColumnDefinitions(schema *types.APISchema) []rescommon.ColumnDefinition {$/;"	f
GetCompletedAt	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) GetCompletedAt() *timestamppb.Timestamp {$/;"	f
GetCompletedAt	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (x *TestSuite) GetCompletedAt() *timestamppb.Timestamp {$/;"	f
GetCondition	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetCondition() string {$/;"	f
GetConfig	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetConfig() *Config {$/;"	f
GetController	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) GetController() cache.Controller {$/;"	f
GetController	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) GetController() *gomock.Call {$/;"	f
GetController	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) GetController() cache.Controller                            { return nil }$/;"	f
GetData	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (x *Template) GetData() []byte {$/;"	f
GetDeletePolicies	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetDeletePolicies() []Hook_DeletePolicy {$/;"	f
GetDeleteTimeout	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetDeleteTimeout() int64 {$/;"	f
GetDeleted	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) GetDeleted() *timestamppb.Timestamp {$/;"	f
GetDependencies	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) GetDependencies() []*Chart {$/;"	f
GetDeprecated	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetDeprecated() bool {$/;"	f
GetDescription	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) GetDescription() string {$/;"	f
GetDescription	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetDescription() string {$/;"	f
GetEmail	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Maintainer) GetEmail() string {$/;"	f
GetEngine	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetEngine() string {$/;"	f
GetEvents	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetEvents() []Hook_Event {$/;"	f
GetFiles	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) GetFiles() []*anypb.Any {$/;"	f
GetFirstDeployed	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) GetFirstDeployed() *timestamppb.Timestamp {$/;"	f
GetGVKForKind	pkg/schema/converter/k8stonorman.go	/^func GetGVKForKind(kind *proto.Kind) *schema.GroupVersionKind {$/;"	f
GetGVKForProtoSchema	pkg/schema/converter/k8stonorman.go	/^func GetGVKForProtoSchema(protoSchema proto.Schema) *schema.GroupVersionKind {$/;"	f
GetHome	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetHome() string {$/;"	f
GetHooks	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetHooks() []*Hook {$/;"	f
GetIcon	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetIcon() string {$/;"	f
GetIndexValueFromString	pkg/resources/virtual/common/util.go	/^func GetIndexValueFromString(pathString string) int {$/;"	f
GetIndexer	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) GetIndexer() cache.Indexer {$/;"	f
GetIndexer	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) GetIndexer() *gomock.Call {$/;"	f
GetIndexer	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) GetIndexer() cache.Indexer                                  { return nil }$/;"	f
GetIndexers	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) GetIndexers() cache.Indexers {$/;"	f
GetInfo	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetInfo() *Info {$/;"	f
GetInfo	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) GetInfo() string {$/;"	f
GetKeywords	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetKeywords() []string {$/;"	f
GetKind	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetKind() string {$/;"	f
GetKubeVersion	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetKubeVersion() string {$/;"	f
GetLastDeployed	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) GetLastDeployed() *timestamppb.Timestamp {$/;"	f
GetLastRun	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetLastRun() *timestamppb.Timestamp {$/;"	f
GetLastTestSuiteRun	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) GetLastTestSuiteRun() *TestSuite {$/;"	f
GetMaintainers	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetMaintainers() []*Maintainer {$/;"	f
GetManifest	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetManifest() string {$/;"	f
GetManifest	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetManifest() string {$/;"	f
GetMetadata	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) GetMetadata() *Metadata {$/;"	f
GetName	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetName() string {$/;"	f
GetName	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Maintainer) GetName() string {$/;"	f
GetName	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetName() string {$/;"	f
GetName	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetName() string {$/;"	f
GetName	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (x *Template) GetName() string {$/;"	f
GetName	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) GetName() string {$/;"	f
GetName	pkg/schema/definitions/converter.go	/^func (r *openAPIV2Reference) GetName() string {$/;"	f
GetName	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) GetName() string {$/;"	f
GetName	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) GetName() *gomock.Call {$/;"	f
GetName	pkg/sqlcache/store/store.go	/^func (s *Store) GetName() string {$/;"	f
GetNamespace	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetNamespace() string {$/;"	f
GetNotes	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) GetNotes() string {$/;"	f
GetPath	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetPath() string {$/;"	f
GetRaw	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Config) GetRaw() string {$/;"	f
GetResources	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) GetResources() string {$/;"	f
GetResults	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (x *TestSuite) GetResults() []*TestRun {$/;"	f
GetShouldEncrypt	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) GetShouldEncrypt() bool {$/;"	f
GetShouldEncrypt	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) GetShouldEncrypt() *gomock.Call {$/;"	f
GetShouldEncrypt	pkg/sqlcache/store/store.go	/^func (s *Store) GetShouldEncrypt() bool {$/;"	f
GetSingularName	pkg/ext/apiserver_test.go	/^func (t *partialStorage) GetSingularName() string {$/;"	f
GetSingularName	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) GetSingularName() string {$/;"	f
GetSources	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetSources() []string {$/;"	f
GetStartedAt	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) GetStartedAt() *timestamppb.Timestamp {$/;"	f
GetStartedAt	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (x *TestSuite) GetStartedAt() *timestamppb.Timestamp {$/;"	f
GetStatus	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) GetStatus() *Status {$/;"	f
GetStatus	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) GetStatus() TestRun_Status {$/;"	f
GetStore	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) GetStore() cache.Store {$/;"	f
GetStore	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) GetStore() *gomock.Call {$/;"	f
GetStore	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) GetStore() cache.Store                                      { return nil }$/;"	f
GetTags	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetTags() string {$/;"	f
GetTemplates	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) GetTemplates() []*Template {$/;"	f
GetTillerVersion	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetTillerVersion() string {$/;"	f
GetTransformFunc	pkg/resources/virtual/virtual.go	/^func (t *TransformBuilder) GetTransformFunc(gvk schema.GroupVersionKind, columns []rescommon.ColumnDefinition) cache.TransformFunc {$/;"	f
GetTransformFunc	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockTransformBuilder) GetTransformFunc(arg0 schema.GroupVersionKind) cache.TransformFunc {$/;"	f
GetTransformFunc	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockTransformBuilderMockRecorder) GetTransformFunc(arg0 any) *gomock.Call {$/;"	f
GetType	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) GetType() reflect.Type {$/;"	f
GetType	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) GetType() *gomock.Call {$/;"	f
GetType	pkg/sqlcache/store/store.go	/^func (s *Store) GetType() reflect.Type {$/;"	f
GetUnstructured	pkg/resources/virtual/common/util.go	/^func GetUnstructured(obj any) (*unstructured.Unstructured, bool, error) {$/;"	f
GetUrl	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Maintainer) GetUrl() string {$/;"	f
GetValue	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Value) GetValue() string {$/;"	f
GetValues	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) GetValues() *Config {$/;"	f
GetValues	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Config) GetValues() map[string]*Value {$/;"	f
GetVersion	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) GetVersion() string {$/;"	f
GetVersion	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) GetVersion() int32 {$/;"	f
GetWeight	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) GetWeight() int32 {$/;"	f
GitCommit	pkg/version/version.go	/^	GitCommit = "HEAD"$/;"	v
Granted	pkg/accesscontrol/access_set.go	/^func (a AccessListByVerb) Granted(verb string) (result map[string]Resources) {$/;"	f
Grants	pkg/accesscontrol/access_set.go	/^func (a Access) Grants(namespace, name string) bool {$/;"	f
Grants	pkg/accesscontrol/access_set.go	/^func (a AccessList) Grants(namespace, name string) bool {$/;"	f
Grants	pkg/accesscontrol/access_set.go	/^func (a AccessListByVerb) Grants(verb, namespace, name string) bool {$/;"	f
Grants	pkg/accesscontrol/access_set.go	/^func (a AccessSet) Grants(verb string, gr schema.GroupResource, namespace, name string) bool {$/;"	f
GrantsNonResource	pkg/accesscontrol/access_set.go	/^func (a *AccessSet) GrantsNonResource(verb, url string) bool {$/;"	f
GreaterThan	pkg/stores/sqlpartition/selection/operator.go	/^	GreaterThan      Operator = "gt"$/;"	c
GreaterThanToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	GreaterThanToken$/;"	c
Group	pkg/attributes/attributes.go	/^func Group(s *types.APISchema) string {$/;"	f
GroupVersionKind	pkg/ext/apiserver_test.go	/^func (t *partialStorage) GroupVersionKind(_ schema.GroupVersion) schema.GroupVersionKind {$/;"	f
GroupVersionKind	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) GroupVersionKind(_ schema.GroupVersion) schema.GroupVersionKind {$/;"	f
Gt	pkg/sqlcache/sqltypes/types.go	/^	Gt        Op = "Gt"$/;"	c
HandleHelmData	pkg/resources/formatters/formatter.go	/^func HandleHelmData(request *types.APIRequest, resource *types.RawResource) {$/;"	f
HandleWarningHeader	pkg/stores/proxy/proxy_store.go	/^func (w *WarningBuffer) HandleWarningHeader(code int, agent string, text string) {$/;"	f
HandleWarningHeader	pkg/stores/sqlproxy/proxy_store.go	/^func (w *WarningBuffer) HandleWarningHeader(code int, agent string, text string) {$/;"	f
Handler	pkg/clustercache/controller.go	/^type Handler func(gvr schema2.GroupVersionKind, key string, obj runtime.Object) error$/;"	t
Handler	pkg/proxy/proxy.go	/^func Handler(prefix string, cfg *rest.Config) (http.Handler, error) {$/;"	f
Handler	pkg/ui/handler.go	/^type Handler struct {$/;"	t
Handlers	pkg/server/router/router.go	/^type Handlers struct {$/;"	t
HandshakeTimeOut	pkg/aggregation/server.go	/^	HandshakeTimeOut = 10 * time.Second$/;"	c
Has	pkg/stores/sqlpartition/queryparser/labels.go	/^func (ls Set) Has(label string) bool {$/;"	f
HasSynced	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) HasSynced() bool {$/;"	f
HasSynced	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) HasSynced() *gomock.Call {$/;"	f
HasSynced	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) HasSynced() bool                                            { return false }$/;"	f
Hook	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^type Hook struct {$/;"	t
Hook_BEFORE_HOOK_CREATION	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_BEFORE_HOOK_CREATION Hook_DeletePolicy = 2$/;"	c
Hook_CRD_INSTALL	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_CRD_INSTALL          Hook_Event = 11$/;"	c
Hook_DeletePolicy	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^type Hook_DeletePolicy int32$/;"	t
Hook_DeletePolicy_name	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_DeletePolicy_name = map[int32]string{$/;"	v
Hook_DeletePolicy_value	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_DeletePolicy_value = map[string]int32{$/;"	v
Hook_Event	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^type Hook_Event int32$/;"	t
Hook_Event_name	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_Event_name = map[int32]string{$/;"	v
Hook_Event_value	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_Event_value = map[string]int32{$/;"	v
Hook_FAILED	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_FAILED               Hook_DeletePolicy = 1$/;"	c
Hook_POST_DELETE	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_POST_DELETE          Hook_Event = 4$/;"	c
Hook_POST_INSTALL	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_POST_INSTALL         Hook_Event = 2$/;"	c
Hook_POST_ROLLBACK	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_POST_ROLLBACK        Hook_Event = 8$/;"	c
Hook_POST_UPGRADE	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_POST_UPGRADE         Hook_Event = 6$/;"	c
Hook_PRE_DELETE	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_PRE_DELETE           Hook_Event = 3$/;"	c
Hook_PRE_INSTALL	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_PRE_INSTALL          Hook_Event = 1$/;"	c
Hook_PRE_ROLLBACK	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_PRE_ROLLBACK         Hook_Event = 7$/;"	c
Hook_PRE_UPGRADE	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_PRE_UPGRADE          Hook_Event = 5$/;"	c
Hook_RELEASE_TEST_FAILURE	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_RELEASE_TEST_FAILURE Hook_Event = 10$/;"	c
Hook_RELEASE_TEST_SUCCESS	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_RELEASE_TEST_SUCCESS Hook_Event = 9$/;"	c
Hook_SUCCEEDED	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_SUCCEEDED            Hook_DeletePolicy = 0$/;"	c
Hook_UNKNOWN	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	Hook_UNKNOWN              Hook_Event = 0$/;"	c
IDs	pkg/schema/collection.go	/^func (c *Collection) IDs() (result []string) {$/;"	f
IdentifierToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	IdentifierToken$/;"	c
ImpersonatingHandler	pkg/proxy/proxy.go	/^func ImpersonatingHandler(prefix string, cfg *rest.Config) http.Handler {$/;"	f
Impersonation	pkg/auth/filter.go	/^func Impersonation(req *http.Request) (user.Info, bool, error) {$/;"	f
In	pkg/sqlcache/sqltypes/types.go	/^	In        Op = "In"$/;"	c
In	pkg/stores/sqlpartition/selection/operator.go	/^	In               Operator = "in"$/;"	c
InToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	InToken$/;"	c
IncTotalResponses	pkg/metrics/metrics.go	/^func (m MetricLogger) IncTotalResponses(err error) {$/;"	f
Index	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) Index(indexName string, obj any) (result []any, err error) {$/;"	f
IndexFile	pkg/ui/handler.go	/^func (u *Handler) IndexFile() http.Handler {$/;"	f
IndexFileOnNotFound	pkg/ui/handler.go	/^func (u *Handler) IndexFileOnNotFound() http.Handler {$/;"	f
IndexKeys	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) IndexKeys(indexName, indexedValue string) ([]string, error) {$/;"	f
Indexer	pkg/sqlcache/informer/indexer.go	/^type Indexer struct {$/;"	t
Info	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^type Info struct {$/;"	t
Informer	pkg/sqlcache/informer/informer.go	/^type Informer struct {$/;"	t
InformerObjectCacheDBPath	pkg/sqlcache/db/client.go	/^	InformerObjectCacheDBPath = "informer_object_cache.db"$/;"	c
Install	pkg/ext/apiserver.go	/^func (s *ExtensionAPIServer) Install(resourceName string, gvk schema.GroupVersionKind, storage rest.Storage) error {$/;"	f
IntegrationSuite	pkg/sqlcache/integration_test.go	/^type IntegrationSuite struct {$/;"	t
IsImpersonating	pkg/client/factory.go	/^func (p *Factory) IsImpersonating() bool {$/;"	f
IsImpersonating	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) IsImpersonating() bool {$/;"	f
IsImpersonating	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) IsImpersonating() *gomock.Call {$/;"	f
IsListWatchable	pkg/controllers/schema/schemas.go	/^func IsListWatchable(schema *types.APISchema) bool {$/;"	f
IsStopped	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) IsStopped() bool {$/;"	f
IsStopped	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) IsStopped() *gomock.Call {$/;"	f
IsStopped	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) IsStopped() bool                                            { return false }$/;"	f
ItemCount	pkg/resources/counts/counts.go	/^type ItemCount struct {$/;"	t
K8sClientResponseTime	pkg/metrics/metrics.go	/^	K8sClientResponseTime = prometheus.NewHistogramVec($/;"	v
K8sInterface	pkg/client/factory.go	/^func (p *Factory) K8sInterface(ctx *types.APIRequest) (kubernetes.Interface, error) {$/;"	f
K8sInterface	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) K8sInterface(arg0 *types.APIRequest) (kubernetes.Interface, error) {$/;"	f
K8sInterface	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) K8sInterface(arg0 any) *gomock.Call {$/;"	f
Key	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r *Requirement) Key() string {$/;"	f
KeyAndOperator	pkg/stores/sqlpartition/queryparser/selector.go	/^	KeyAndOperator ParserContext = iota$/;"	c
Kind	pkg/attributes/attributes.go	/^func Kind(s *types.APISchema) string {$/;"	f
Labels	pkg/stores/sqlpartition/queryparser/labels.go	/^type Labels interface {$/;"	t
LastSyncResourceVersion	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) LastSyncResourceVersion() string {$/;"	f
LastSyncResourceVersion	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) LastSyncResourceVersion() *gomock.Call {$/;"	f
LastSyncResourceVersion	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) LastSyncResourceVersion() string                            { return "" }$/;"	f
LessThan	pkg/stores/sqlpartition/selection/operator.go	/^	LessThan         Operator = "lt"$/;"	c
LessThanToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	LessThanToken$/;"	c
Lex	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) Lex() (Token, string) {$/;"	f
Lexer	pkg/stores/sqlpartition/queryparser/selector.go	/^type Lexer struct {$/;"	t
List	pkg/clustercache/cancel_collection.go	/^func (c *cancelCollection) List() (result []interface{}) {$/;"	f
List	pkg/clustercache/controller.go	/^func (h *clusterCache) List(gvk schema2.GroupVersionKind) []interface{} {$/;"	f
List	pkg/ext/apiserver_authentication_test.go	/^func (t *authnTestStore) List(ctx context.Context, _ *metainternalversion.ListOptions) (runtime.Object, error) {$/;"	f
List	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) List(ctx context.Context, _ *metainternalversion.ListOptions) (runtime.Object, error) {$/;"	f
List	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) List(ctx context.Context, options *metainternalversion.ListOptions) (runtime.Object, error) {$/;"	f
List	pkg/resources/apigroups/apigroup.go	/^func (e *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/resources/cluster/cluster.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/resources/counts/counts.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) List(gvk schema2.GroupVersionKind) []interface{} {$/;"	f
List	pkg/resources/userpreferences/localpref.go	/^func (l *localStore) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {$/;"	f
List	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) List(arg0, arg1 any) *gomock.Call {$/;"	f
List	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {$/;"	f
List	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) List(arg0, arg1 any) *gomock.Call {$/;"	f
List	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) List() []any {$/;"	f
List	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) List() *gomock.Call {$/;"	f
List	pkg/sqlcache/store/store.go	/^func (s *Store) List() []any {$/;"	f
List	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) List(apiOp *types.APIRequest, opts metav1.ListOptions) (*unstructured.UnstructuredList, error) {$/;"	f
List	pkg/stores/metrics/metrics_store.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/stores/partition/listprocessor/processor_test.go	/^func (m mockNamespaceCache) List(selector labels.Selector) ([]*corev1.Namespace, error) {$/;"	f
List	pkg/stores/partition/parallel.go	/^func (p *ParallelPartitionLister) List(ctx context.Context, limit int, resume, revision string) (<-chan []unstructured.Unstructured, error) {$/;"	f
List	pkg/stores/partition/store.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/stores/partition/store_test.go	/^func (m *mockStore) List(apiOp *types.APIRequest, schema *types.APISchema) (*unstructured.UnstructuredList, []types.Warning, error) {$/;"	f
List	pkg/stores/partition/store_test.go	/^func (m *mockVersionedStore) List(apiOp *types.APIRequest, schema *types.APISchema) (*unstructured.UnstructuredList, []types.Warning, error) {$/;"	f
List	pkg/stores/partition/store_test.go	/^func (m mockNamespaceCache) List(selector labels.Selector) ([]*corev1.Namespace, error) {$/;"	f
List	pkg/stores/proxy/error_wrapper.go	/^func (e *ErrorStore) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/stores/proxy/proxy_store.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (*unstructured.UnstructuredList, []types.Warning, error) {$/;"	f
List	pkg/stores/proxy/rbac_store.go	/^func (b *byNameOrNamespaceStore) List(apiOp *types.APIRequest, schema *types.APISchema) (*unstructured.UnstructuredList, []types.Warning, error) {$/;"	f
List	pkg/stores/proxy/unformatter.go	/^func (u *unformatterStore) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/stores/selector/selector.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/stores/sqlpartition/store.go	/^func (s *Store) List(apiOp *types.APIRequest, schema *types.APISchema) (types.APIObjectList, error) {$/;"	f
List	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) List(apiOp *types.APIRequest, schema *types.APISchema) (*unstructured.UnstructuredList, []types.Warning, error) {$/;"	f
List	pkg/stores/sqlpartition/store_test.go	/^func (m mockNamespaceCache) List(selector labels.Selector) ([]*corev1.Namespace, error) {$/;"	f
List	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {$/;"	f
List	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) List(arg0, arg1 any) *gomock.Call {$/;"	f
List	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func (c *Client) List(ctx context.Context, opts metav1.ListOptions) (*unstructured.UnstructuredList, error) {$/;"	f
List	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) List(arg0 context.Context, arg1 v1.ListOptions) (*unstructured.UnstructuredList, error) {$/;"	f
List	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) List(arg0, arg1 any) *gomock.Call {$/;"	f
List	pkg/stores/switchschema/store.go	/^func (e *Store) List(apiOp *types.APIRequest, oldSchema *types.APISchema) (types.APIObjectList, error) {$/;"	f
ListByOptions	pkg/sqlcache/informer/informer.go	/^func (i *Informer) ListByOptions(ctx context.Context, lo *sqltypes.ListOptions, partitions []partition.Partition, namespace string) (*unstructured.UnstructuredList, int, string, error) {$/;"	f
ListByOptions	pkg/sqlcache/informer/informer_mocks_test.go	/^func (m *MockByOptionsLister) ListByOptions(arg0 context.Context, arg1 *sqltypes.ListOptions, arg2 []partition.Partition, arg3 string) (*unstructured.UnstructuredList, int, string, error) {$/;"	f
ListByOptions	pkg/sqlcache/informer/informer_mocks_test.go	/^func (mr *MockByOptionsListerMockRecorder) ListByOptions(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ListByOptions	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) ListByOptions(ctx context.Context, lo *sqltypes.ListOptions, partitions []partition.Partition, namespace string) (*unstructured.UnstructuredList, int, string, error) {$/;"	f
ListByOptions	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^func (m *MockCache) ListByOptions(arg0 context.Context, arg1 *sqltypes.ListOptions, arg2 []partition.Partition, arg3 string) (*unstructured.UnstructuredList, int, string, error) {$/;"	f
ListByOptions	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^func (mr *MockCacheMockRecorder) ListByOptions(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ListByOptions	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockCache) ListByOptions(arg0 context.Context, arg1 *sqltypes.ListOptions, arg2 []partition.Partition, arg3 string) (*unstructured.UnstructuredList, int, string, error) {$/;"	f
ListByOptions	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockCacheMockRecorder) ListByOptions(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ListByOptions	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^func (m *MockByOptionsLister) ListByOptions(arg0 context.Context, arg1 *sqltypes.ListOptions, arg2 []partition.Partition, arg3 string) (*unstructured.UnstructuredList, int, string, error) {$/;"	f
ListByOptions	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^func (mr *MockByOptionsListerMockRecorder) ListByOptions(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
ListByPartitions	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) ListByPartitions(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 []partition.Partition) ([]unstructured.Unstructured, int, string, error) {$/;"	f
ListByPartitions	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockUnstructuredStoreMockRecorder) ListByPartitions(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
ListByPartitions	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) ListByPartitions(apiOp *types.APIRequest, schema *types.APISchema, partitions []partition.Partition) ([]unstructured.Unstructured, string, string, error) {$/;"	f
ListByPartitions	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) ListByPartitions(apiOp *types.APIRequest, schema *types.APISchema, partitions []partition.Partition) ([]unstructured.Unstructured, int, string, error) {$/;"	f
ListIndexFuncValues	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) ListIndexFuncValues(name string) []string {$/;"	f
ListKeys	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) ListKeys() []string {$/;"	f
ListKeys	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) ListKeys() *gomock.Call {$/;"	f
ListKeys	pkg/sqlcache/store/store.go	/^func (s *Store) ListKeys() []string {$/;"	f
ListOptionIndexer	pkg/sqlcache/informer/listoption_indexer.go	/^type ListOptionIndexer struct {$/;"	t
ListOptions	pkg/sqlcache/sqltypes/types.go	/^type ListOptions struct {$/;"	t
ListOptions	pkg/stores/partition/listprocessor/processor.go	/^type ListOptions struct {$/;"	t
ListenAndServe	pkg/aggregation/server.go	/^func ListenAndServe(ctx context.Context, url string, caCert []byte, token string, handler http.Handler) {$/;"	f
ListenAndServe	pkg/server/server.go	/^func (c *Server) ListenAndServe(ctx context.Context, httpsPort, httpPort int, opts *server.ListenOpts) error {$/;"	f
Listener	pkg/aggregation/listener.go	/^type Listener struct {$/;"	t
Lookup	pkg/stores/partition/store_test.go	/^func (m mockPartitioner) Lookup(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) (Partition, error) {$/;"	f
Lookup	pkg/stores/proxy/rbac_store.go	/^func (p *rbacPartitioner) Lookup(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) (partition.Partition, error) {$/;"	f
Lookup	pkg/stores/sqlpartition/store_test.go	/^func (m mockPartitioner) Lookup(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) (partition.Partition, error) {$/;"	f
Lt	pkg/sqlcache/sqltypes/types.go	/^	Lt        Op = "Lt"$/;"	c
Maintainer	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^type Maintainer struct {$/;"	t
Manager	pkg/sqlcache/encryption/encrypt.go	/^type Manager struct {$/;"	t
Matches	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) Matches(labels Labels) bool {$/;"	f
Merge	pkg/accesscontrol/access_set.go	/^func (a *AccessSet) Merge(right *AccessSet) {$/;"	f
Merge	pkg/schema/definitions/schema.go	/^func (s *schemaDefinition) Merge(schema schemaDefinition) error {$/;"	f
Merge	pkg/stores/sqlpartition/queryparser/labels.go	/^func Merge(labels1, labels2 Set) Set {$/;"	f
Metadata	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^type Metadata struct {$/;"	t
MetadataClient	pkg/client/factory.go	/^func (p *Factory) MetadataClient() metadata.Interface {$/;"	f
Metadata_Engine	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^type Metadata_Engine int32$/;"	t
Metadata_Engine_name	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	Metadata_Engine_name = map[int32]string{$/;"	v
Metadata_Engine_value	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	Metadata_Engine_value = map[string]int32{$/;"	v
Metadata_GOTPL	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	Metadata_GOTPL   Metadata_Engine = 1$/;"	c
Metadata_UNKNOWN	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	Metadata_UNKNOWN Metadata_Engine = 0$/;"	c
MetricLogger	pkg/metrics/metrics.go	/^type MetricLogger struct {$/;"	t
Middleware	pkg/auth/filter.go	/^type Middleware func(next http.Handler) http.Handler$/;"	t
MockAccessSetLookup	pkg/accesscontrol/fake/AccessSetLookup.go	/^type MockAccessSetLookup struct {$/;"	t
MockAccessSetLookupMockRecorder	pkg/accesscontrol/fake/AccessSetLookup.go	/^type MockAccessSetLookupMockRecorder struct {$/;"	t
MockByOptionsLister	pkg/sqlcache/informer/informer_mocks_test.go	/^type MockByOptionsLister struct {$/;"	t
MockByOptionsLister	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^type MockByOptionsLister struct {$/;"	t
MockByOptionsListerMockRecorder	pkg/sqlcache/informer/informer_mocks_test.go	/^type MockByOptionsListerMockRecorder struct {$/;"	t
MockByOptionsListerMockRecorder	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^type MockByOptionsListerMockRecorder struct {$/;"	t
MockCache	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^type MockCache struct {$/;"	t
MockCache	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockCache struct {$/;"	t
MockCacheFactory	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockCacheFactory struct {$/;"	t
MockCacheFactoryMockRecorder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockCacheFactoryMockRecorder struct {$/;"	t
MockCacheMockRecorder	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^type MockCacheMockRecorder struct {$/;"	t
MockCacheMockRecorder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockCacheMockRecorder struct {$/;"	t
MockClient	pkg/sqlcache/db/transaction_mocks_test.go	/^type MockClient struct {$/;"	t
MockClient	pkg/sqlcache/informer/db_mocks_test.go	/^type MockClient struct {$/;"	t
MockClient	pkg/sqlcache/informer/factory/db_mocks_test.go	/^type MockClient struct {$/;"	t
MockClient	pkg/sqlcache/store/db_mocks_test.go	/^type MockClient struct {$/;"	t
MockClientGetter	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockClientGetter struct {$/;"	t
MockClientGetterMockRecorder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockClientGetterMockRecorder struct {$/;"	t
MockClientMockRecorder	pkg/sqlcache/db/transaction_mocks_test.go	/^type MockClientMockRecorder struct {$/;"	t
MockClientMockRecorder	pkg/sqlcache/informer/db_mocks_test.go	/^type MockClientMockRecorder struct {$/;"	t
MockClientMockRecorder	pkg/sqlcache/informer/factory/db_mocks_test.go	/^type MockClientMockRecorder struct {$/;"	t
MockClientMockRecorder	pkg/sqlcache/store/db_mocks_test.go	/^type MockClientMockRecorder struct {$/;"	t
MockConnection	pkg/sqlcache/db/db_mocks_test.go	/^type MockConnection struct {$/;"	t
MockConnectionMockRecorder	pkg/sqlcache/db/db_mocks_test.go	/^type MockConnectionMockRecorder struct {$/;"	t
MockDecryptor	pkg/sqlcache/db/db_mocks_test.go	/^type MockDecryptor struct {$/;"	t
MockDecryptorMockRecorder	pkg/sqlcache/db/db_mocks_test.go	/^type MockDecryptorMockRecorder struct {$/;"	t
MockEncryptor	pkg/sqlcache/db/db_mocks_test.go	/^type MockEncryptor struct {$/;"	t
MockEncryptorMockRecorder	pkg/sqlcache/db/db_mocks_test.go	/^type MockEncryptorMockRecorder struct {$/;"	t
MockFactory	pkg/schema/fake/factory.go	/^type MockFactory struct {$/;"	t
MockFactoryMockRecorder	pkg/schema/fake/factory.go	/^type MockFactoryMockRecorder struct {$/;"	t
MockInterface	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^type MockInterface struct {$/;"	t
MockInterfaceMockRecorder	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^type MockInterfaceMockRecorder struct {$/;"	t
MockPartitioner	pkg/stores/sqlpartition/partition_mocks_test.go	/^type MockPartitioner struct {$/;"	t
MockPartitionerMockRecorder	pkg/stores/sqlpartition/partition_mocks_test.go	/^type MockPartitionerMockRecorder struct {$/;"	t
MockRelationshipNotifier	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockRelationshipNotifier struct {$/;"	t
MockRelationshipNotifierMockRecorder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockRelationshipNotifierMockRecorder struct {$/;"	t
MockResourceInterface	pkg/sqlcache/informer/dynamic_mocks_test.go	/^type MockResourceInterface struct {$/;"	t
MockResourceInterface	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^type MockResourceInterface struct {$/;"	t
MockResourceInterface	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^type MockResourceInterface struct {$/;"	t
MockResourceInterface	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^type MockResourceInterface struct {$/;"	t
MockResourceInterfaceMockRecorder	pkg/sqlcache/informer/dynamic_mocks_test.go	/^type MockResourceInterfaceMockRecorder struct {$/;"	t
MockResourceInterfaceMockRecorder	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^type MockResourceInterfaceMockRecorder struct {$/;"	t
MockResourceInterfaceMockRecorder	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^type MockResourceInterfaceMockRecorder struct {$/;"	t
MockResourceInterfaceMockRecorder	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^type MockResourceInterfaceMockRecorder struct {$/;"	t
MockRows	pkg/sqlcache/db/db_mocks_test.go	/^type MockRows struct {$/;"	t
MockRows	pkg/sqlcache/informer/db_mocks_test.go	/^type MockRows struct {$/;"	t
MockRows	pkg/sqlcache/store/db_mocks_test.go	/^type MockRows struct {$/;"	t
MockRowsMockRecorder	pkg/sqlcache/db/db_mocks_test.go	/^type MockRowsMockRecorder struct {$/;"	t
MockRowsMockRecorder	pkg/sqlcache/informer/db_mocks_test.go	/^type MockRowsMockRecorder struct {$/;"	t
MockRowsMockRecorder	pkg/sqlcache/store/db_mocks_test.go	/^type MockRowsMockRecorder struct {$/;"	t
MockSchemaColumnSetter	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockSchemaColumnSetter struct {$/;"	t
MockSchemaColumnSetterMockRecorder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockSchemaColumnSetterMockRecorder struct {$/;"	t
MockSharedIndexInformer	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^type MockSharedIndexInformer struct {$/;"	t
MockSharedIndexInformerMockRecorder	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^type MockSharedIndexInformerMockRecorder struct {$/;"	t
MockStmt	pkg/sqlcache/db/transaction_mocks_test.go	/^type MockStmt struct {$/;"	t
MockStmt	pkg/sqlcache/informer/transaction_mocks_test.go	/^type MockStmt struct {$/;"	t
MockStmt	pkg/sqlcache/store/transaction_mocks_test.go	/^type MockStmt struct {$/;"	t
MockStmtMockRecorder	pkg/sqlcache/db/transaction_mocks_test.go	/^type MockStmtMockRecorder struct {$/;"	t
MockStmtMockRecorder	pkg/sqlcache/informer/transaction_mocks_test.go	/^type MockStmtMockRecorder struct {$/;"	t
MockStmtMockRecorder	pkg/sqlcache/store/transaction_mocks_test.go	/^type MockStmtMockRecorder struct {$/;"	t
MockStore	pkg/sqlcache/informer/sql_mocks_test.go	/^type MockStore struct {$/;"	t
MockStoreMockRecorder	pkg/sqlcache/informer/sql_mocks_test.go	/^type MockStoreMockRecorder struct {$/;"	t
MockTXClient	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^type MockTXClient struct {$/;"	t
MockTXClient	pkg/sqlcache/informer/transaction_mocks_test.go	/^type MockTXClient struct {$/;"	t
MockTXClient	pkg/sqlcache/store/transaction_mocks_test.go	/^type MockTXClient struct {$/;"	t
MockTXClientMockRecorder	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^type MockTXClientMockRecorder struct {$/;"	t
MockTXClientMockRecorder	pkg/sqlcache/informer/transaction_mocks_test.go	/^type MockTXClientMockRecorder struct {$/;"	t
MockTXClientMockRecorder	pkg/sqlcache/store/transaction_mocks_test.go	/^type MockTXClientMockRecorder struct {$/;"	t
MockTransformBuilder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockTransformBuilder struct {$/;"	t
MockTransformBuilderMockRecorder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^type MockTransformBuilderMockRecorder struct {$/;"	t
MockUnstructuredStore	pkg/stores/sqlpartition/partition_mocks_test.go	/^type MockUnstructuredStore struct {$/;"	t
MockUnstructuredStoreMockRecorder	pkg/stores/sqlpartition/partition_mocks_test.go	/^type MockUnstructuredStoreMockRecorder struct {$/;"	t
ModifySchema	pkg/schema/table/mapper.go	/^func (t *ColumnMapper) ModifySchema(schema *types.Schema, schemas *types.Schemas) error {$/;"	f
MustServer	pkg/server/cli/clicontext.go	/^func (c *Config) MustServer(ctx context.Context) *server.Server {$/;"	f
MustSetupDebug	pkg/debug/cli.go	/^func (c *Config) MustSetupDebug() {$/;"	f
MustWebhookMiddleware	pkg/auth/cli/webhookcli.go	/^func (w *WebhookConfig) MustWebhookMiddleware() auth.Middleware {$/;"	f
Name	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) Name() string {$/;"	f
Name	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) Name() string {$/;"	f
Name	pkg/stores/partition/store_test.go	/^func (m mockPartition) Name() string {$/;"	f
Name	pkg/stores/proxy/rbac_store.go	/^func (p Partition) Name() string {$/;"	f
NamespaceScoped	pkg/ext/apiserver_test.go	/^func (t *partialStorage) NamespaceScoped() bool {$/;"	f
NamespaceScoped	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) NamespaceScoped() bool {$/;"	f
Namespaced	pkg/attributes/attributes.go	/^func Namespaced(s *types.APISchema) bool {$/;"	f
Namespaces	pkg/accesscontrol/access_set.go	/^func (a *AccessSet) Namespaces() (result []string) {$/;"	f
Network	pkg/aggregation/listener.go	/^func (a addr) Network() string {$/;"	f
New	pkg/ext/apiserver_test.go	/^func (t *partialStorage) New() runtime.Object {$/;"	f
New	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) New() runtime.Object {$/;"	f
New	pkg/podimpersonation/podimpersonation.go	/^func New(key string, cg proxy.ClientGetter, roleTimeout time.Duration, imageName func() string) *PodImpersonation {$/;"	f
New	pkg/server/handler/apiserver.go	/^func New(cfg *rest.Config, sf schema.Factory, authMiddleware auth.Middleware, next http.Handler,$/;"	f
New	pkg/server/server.go	/^func New(ctx context.Context, restConfig *rest.Config, opts *Options) (*Server, error) {$/;"	f
New	pkg/summarycache/summarycache.go	/^func New(schemas *schema.Collection, clusterCache clustercache.ClusterCache) *SummaryCache {$/;"	f
New	pkg/ui/routes.go	/^func New(path string) http.Handler {$/;"	f
NewAccessControl	pkg/accesscontrol/access_control.go	/^func NewAccessControl() *AccessControl {$/;"	f
NewAccessSetAuthorizer	pkg/ext/apiserver_authorization.go	/^func NewAccessSetAuthorizer(asl accesscontrol.AccessSetLookup) *AccessSetAuthorizer {$/;"	f
NewAccessStore	pkg/accesscontrol/access_store.go	/^func NewAccessStore(_ context.Context, cacheResults bool, rbac v1.Interface) *AccessStore {$/;"	f
NewCacheFactory	pkg/sqlcache/informer/factory/informer_factory.go	/^func NewCacheFactory() (*CacheFactory, error) {$/;"	f
NewClient	pkg/sqlcache/db/client.go	/^func NewClient(c Connection, encryptor Encryptor, decryptor Decryptor) (Client, error) {$/;"	f
NewClient	pkg/sqlcache/db/transaction/transaction.go	/^func NewClient(tx *sql.Tx) Client {$/;"	f
NewClientCert	pkg/ext/apiserver_suite_test.go	/^func (c *TinyCA) NewClientCert(name string) (CertPair, error) {$/;"	f
NewClusterCache	pkg/clustercache/controller.go	/^func NewClusterCache(ctx context.Context, dynamicClient dynamic.Interface) ClusterCache {$/;"	f
NewCollection	pkg/schema/collection.go	/^func NewCollection(ctx context.Context, baseSchema *types.APISchemas, access accesscontrol.AccessSetLookup) *Collection {$/;"	f
NewColumns	pkg/schema/table/mapper.go	/^func NewColumns(computed func(data.Object), columns ...Column) *ColumnMapper {$/;"	f
NewConnection	pkg/sqlcache/db/client.go	/^func (c *client) NewConnection() error {$/;"	f
NewConnection	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) NewConnection() error {$/;"	f
NewConnection	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) NewConnection() *gomock.Call {$/;"	f
NewConnection	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) NewConnection() error {$/;"	f
NewConnection	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) NewConnection() *gomock.Call {$/;"	f
NewConnection	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) NewConnection() error {$/;"	f
NewConnection	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) NewConnection() *gomock.Call {$/;"	f
NewConnection	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) NewConnection() error {$/;"	f
NewConnection	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) NewConnection() *gomock.Call {$/;"	f
NewController	pkg/server/config.go	/^func NewController(cfg *rest.Config, opts *generic.FactoryOptions) (*Controllers, error) {$/;"	f
NewDefaultAuthenticator	pkg/ext/apiserver_authentication.go	/^func NewDefaultAuthenticator(client kubernetes.Interface) (*DefaultAuthenticator, error) {$/;"	f
NewDynamicColumns	pkg/resources/common/dynamiccolumns.go	/^func NewDynamicColumns(config *rest.Config) (*DynamicColumns, error) {$/;"	f
NewErrorStore	pkg/stores/proxy/error_wrapper.go	/^func NewErrorStore(s types.Store) *ErrorStore {$/;"	f
NewExtensionAPIServer	pkg/ext/apiserver.go	/^func NewExtensionAPIServer(scheme *runtime.Scheme, codecs serializer.CodecFactory, opts ExtensionAPIServerOptions) (*ExtensionAPIServer, error) {$/;"	f
NewFactory	pkg/client/factory.go	/^func NewFactory(cfg *rest.Config, impersonate bool, opts ...FactoryOption) (*Factory, error) {$/;"	f
NewFakeClusterCache	pkg/resources/counts/counts_test.go	/^func NewFakeClusterCache() *fakeClusterCache {$/;"	f
NewIndexer	pkg/sqlcache/informer/indexer.go	/^func NewIndexer(ctx context.Context, indexers cache.Indexers, s Store) (*Indexer, error) {$/;"	f
NewInformer	pkg/sqlcache/informer/informer.go	/^func NewInformer(ctx context.Context, client dynamic.ResourceInterface, fields [][]string, transform cache.TransformFunc, gvk schema.GroupVersionKind, db db.Client, shouldEncrypt bool, namespaced bool, watchable bool) (*Informer, error) {$/;"	f
NewList	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) NewList() runtime.Object {$/;"	f
NewListOptionIndexer	pkg/sqlcache/informer/listoption_indexer.go	/^func NewListOptionIndexer(ctx context.Context, fields [][]string, s Store, namespaced bool) (*ListOptionIndexer, error) {$/;"	f
NewListener	pkg/aggregation/listener.go	/^func NewListener(address string) *Listener {$/;"	f
NewManager	pkg/sqlcache/encryption/encrypt.go	/^func NewManager() (*Manager, error) {$/;"	f
NewMetricsStore	pkg/stores/metrics/metrics_store.go	/^func NewMetricsStore(store types.Store) *Store {$/;"	f
NewMockAccessSetLookup	pkg/accesscontrol/fake/AccessSetLookup.go	/^func NewMockAccessSetLookup(ctrl *gomock.Controller) *MockAccessSetLookup {$/;"	f
NewMockByOptionsLister	pkg/sqlcache/informer/informer_mocks_test.go	/^func NewMockByOptionsLister(ctrl *gomock.Controller) *MockByOptionsLister {$/;"	f
NewMockByOptionsLister	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^func NewMockByOptionsLister(ctrl *gomock.Controller) *MockByOptionsLister {$/;"	f
NewMockCache	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^func NewMockCache(ctrl *gomock.Controller) *MockCache {$/;"	f
NewMockCache	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func NewMockCache(ctrl *gomock.Controller) *MockCache {$/;"	f
NewMockCacheFactory	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func NewMockCacheFactory(ctrl *gomock.Controller) *MockCacheFactory {$/;"	f
NewMockClient	pkg/sqlcache/db/transaction_mocks_test.go	/^func NewMockClient(ctrl *gomock.Controller) *MockClient {$/;"	f
NewMockClient	pkg/sqlcache/informer/db_mocks_test.go	/^func NewMockClient(ctrl *gomock.Controller) *MockClient {$/;"	f
NewMockClient	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func NewMockClient(ctrl *gomock.Controller) *MockClient {$/;"	f
NewMockClient	pkg/sqlcache/store/db_mocks_test.go	/^func NewMockClient(ctrl *gomock.Controller) *MockClient {$/;"	f
NewMockClientGetter	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func NewMockClientGetter(ctrl *gomock.Controller) *MockClientGetter {$/;"	f
NewMockConnection	pkg/sqlcache/db/db_mocks_test.go	/^func NewMockConnection(ctrl *gomock.Controller) *MockConnection {$/;"	f
NewMockDecryptor	pkg/sqlcache/db/db_mocks_test.go	/^func NewMockDecryptor(ctrl *gomock.Controller) *MockDecryptor {$/;"	f
NewMockEncryptor	pkg/sqlcache/db/db_mocks_test.go	/^func NewMockEncryptor(ctrl *gomock.Controller) *MockEncryptor {$/;"	f
NewMockFactory	pkg/schema/fake/factory.go	/^func NewMockFactory(ctrl *gomock.Controller) *MockFactory {$/;"	f
NewMockInterface	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^func NewMockInterface(ctrl *gomock.Controller) *MockInterface {$/;"	f
NewMockPartitioner	pkg/stores/sqlpartition/partition_mocks_test.go	/^func NewMockPartitioner(ctrl *gomock.Controller) *MockPartitioner {$/;"	f
NewMockRelationshipNotifier	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func NewMockRelationshipNotifier(ctrl *gomock.Controller) *MockRelationshipNotifier {$/;"	f
NewMockResourceInterface	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {$/;"	f
NewMockResourceInterface	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {$/;"	f
NewMockResourceInterface	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {$/;"	f
NewMockResourceInterface	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func NewMockResourceInterface(ctrl *gomock.Controller) *MockResourceInterface {$/;"	f
NewMockRows	pkg/sqlcache/db/db_mocks_test.go	/^func NewMockRows(ctrl *gomock.Controller) *MockRows {$/;"	f
NewMockRows	pkg/sqlcache/informer/db_mocks_test.go	/^func NewMockRows(ctrl *gomock.Controller) *MockRows {$/;"	f
NewMockRows	pkg/sqlcache/store/db_mocks_test.go	/^func NewMockRows(ctrl *gomock.Controller) *MockRows {$/;"	f
NewMockSchemaColumnSetter	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func NewMockSchemaColumnSetter(ctrl *gomock.Controller) *MockSchemaColumnSetter {$/;"	f
NewMockSharedIndexInformer	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func NewMockSharedIndexInformer(ctrl *gomock.Controller) *MockSharedIndexInformer {$/;"	f
NewMockStmt	pkg/sqlcache/db/transaction_mocks_test.go	/^func NewMockStmt(ctrl *gomock.Controller) *MockStmt {$/;"	f
NewMockStmt	pkg/sqlcache/informer/transaction_mocks_test.go	/^func NewMockStmt(ctrl *gomock.Controller) *MockStmt {$/;"	f
NewMockStmt	pkg/sqlcache/store/transaction_mocks_test.go	/^func NewMockStmt(ctrl *gomock.Controller) *MockStmt {$/;"	f
NewMockStore	pkg/sqlcache/informer/sql_mocks_test.go	/^func NewMockStore(ctrl *gomock.Controller) *MockStore {$/;"	f
NewMockTXClient	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^func NewMockTXClient(ctrl *gomock.Controller) *MockTXClient {$/;"	f
NewMockTXClient	pkg/sqlcache/informer/transaction_mocks_test.go	/^func NewMockTXClient(ctrl *gomock.Controller) *MockTXClient {$/;"	f
NewMockTXClient	pkg/sqlcache/store/transaction_mocks_test.go	/^func NewMockTXClient(ctrl *gomock.Controller) *MockTXClient {$/;"	f
NewMockTransformBuilder	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func NewMockTransformBuilder(ctrl *gomock.Controller) *MockTransformBuilder {$/;"	f
NewMockUnstructuredStore	pkg/stores/sqlpartition/partition_mocks_test.go	/^func NewMockUnstructuredStore(ctrl *gomock.Controller) *MockUnstructuredStore {$/;"	f
NewProxyStore	pkg/stores/proxy/proxy_store.go	/^func NewProxyStore(clientGetter ClientGetter, notifier RelationshipNotifier, lookup accesscontrol.AccessSetLookup, namespaceCache corecontrollers.NamespaceCache) types.Store {$/;"	f
NewProxyStore	pkg/stores/sqlproxy/proxy_store.go	/^func NewProxyStore(ctx context.Context, c SchemaColumnSetter, clientGetter ClientGetter, notifier RelationshipNotifier, scache virtualCommon.SummaryCache, factory CacheFactory) (*Store, error) {$/;"	f
NewRequirement	pkg/stores/sqlpartition/queryparser/selector.go	/^func NewRequirement(key string, op selection.Operator, vals []string, opts ...field.PathOption) (*Requirement, error) {$/;"	f
NewSchemaDefinitionHandler	pkg/schema/definitions/handler.go	/^func NewSchemaDefinitionHandler($/;"	f
NewSortList	pkg/sqlcache/sqltypes/types.go	/^func NewSortList() *SortList {$/;"	f
NewStore	pkg/resources/apigroups/apigroup.go	/^func NewStore(discovery discovery.DiscoveryInterface) types.Store {$/;"	f
NewStore	pkg/sqlcache/store/store.go	/^func NewStore(ctx context.Context, example any, keyFunc cache.KeyFunc, c db.Client, shouldEncrypt bool, name string) (*Store, error) {$/;"	f
NewStore	pkg/stores/partition/store.go	/^func NewStore(partitioner Partitioner, asl accesscontrol.AccessSetLookup, namespaceCache corecontrollers.NamespaceCache) *Store {$/;"	f
NewStore	pkg/stores/sqlpartition/store.go	/^func NewStore(store UnstructuredStore, asl accesscontrol.AccessSetLookup) *Store {$/;"	f
NewTinyCA	pkg/ext/apiserver_suite_test.go	/^func NewTinyCA() (*TinyCA, error) {$/;"	f
NewTransformBuilder	pkg/resources/virtual/virtual.go	/^func NewTransformBuilder(cache common.SummaryCache) *TransformBuilder {$/;"	f
NewUIHandler	pkg/ui/handler.go	/^func NewUIHandler(opts *Options) *Handler {$/;"	f
NewUnformatterStore	pkg/stores/proxy/unformatter.go	/^func NewUnformatterStore(s types.Store) types.Store {$/;"	f
NewUnionAuthenticator	pkg/ext/apiserver_authentication.go	/^func NewUnionAuthenticator(authenticators ...authenticator.Request) *UnionAuthenticator {$/;"	f
NewWatchRefresh	pkg/stores/proxy/watch_refresh.go	/^func NewWatchRefresh(s types.Store, asl accesscontrol.AccessSetLookup) *WatchRefresh {$/;"	f
NewWebhookAuthenticator	pkg/auth/filter.go	/^func NewWebhookAuthenticator(cacheTTL time.Duration, kubeConfig *rest.Config) (Authenticator, error) {$/;"	f
NewWebhookMiddleware	pkg/auth/filter.go	/^func NewWebhookMiddleware(cacheTTL time.Duration, kubeConfig *rest.Config) (Middleware, error) {$/;"	f
Next	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockRows) Next() bool {$/;"	f
Next	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Next() *gomock.Call {$/;"	f
Next	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockRows) Next() bool {$/;"	f
Next	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Next() *gomock.Call {$/;"	f
Next	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockRows) Next() bool {$/;"	f
Next	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Next() *gomock.Call {$/;"	f
NotEq	pkg/sqlcache/sqltypes/types.go	/^	NotEq     Op = "!="$/;"	c
NotEquals	pkg/stores/sqlpartition/selection/operator.go	/^	NotEquals        Operator = "!="$/;"	c
NotEqualsToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	NotEqualsToken$/;"	c
NotExists	pkg/sqlcache/sqltypes/types.go	/^	NotExists Op = "NotExists"$/;"	c
NotIn	pkg/sqlcache/sqltypes/types.go	/^	NotIn     Op = "NotIn"$/;"	c
NotIn	pkg/stores/sqlpartition/selection/operator.go	/^	NotIn            Operator = "notin"$/;"	c
NotInToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	NotInToken$/;"	c
NotPartialEquals	pkg/stores/sqlpartition/selection/operator.go	/^	NotPartialEquals Operator = "!~"$/;"	c
NotPartialEqualsToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	NotPartialEqualsToken$/;"	c
Number	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x Hook_DeletePolicy) Number() protoreflect.EnumNumber {$/;"	f
Number	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x Hook_Event) Number() protoreflect.EnumNumber {$/;"	f
Number	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x Metadata_Engine) Number() protoreflect.EnumNumber {$/;"	f
Number	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x Status_Code) Number() protoreflect.EnumNumber {$/;"	f
Number	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x TestRun_Status) Number() protoreflect.EnumNumber {$/;"	f
OnAdd	pkg/clustercache/controller.go	/^func (h *clusterCache) OnAdd(ctx context.Context, handler Handler) {$/;"	f
OnAdd	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) OnAdd(ctx context.Context, handler clustercache.Handler) {$/;"	f
OnAdd	pkg/sqlcache/informer/shared_informer_test.go	/^func (l *testListener) OnAdd(obj interface{}, isInInitialList bool) {$/;"	f
OnAdd	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) OnAdd(_ runtimeschema.GroupVersionKind, key string, obj runtime.Object) error {$/;"	f
OnChange	pkg/clustercache/controller.go	/^func (h *clusterCache) OnChange(ctx context.Context, handler ChangeHandler) {$/;"	f
OnChange	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) OnChange(ctx context.Context, handler clustercache.ChangeHandler) {$/;"	f
OnChange	pkg/schema/collection.go	/^func (c *Collection) OnChange(ctx context.Context, cb func()) {$/;"	f
OnChange	pkg/schema/fake/factory.go	/^func (m *MockFactory) OnChange(arg0 context.Context, arg1 func()) {$/;"	f
OnChange	pkg/schema/fake/factory.go	/^func (mr *MockFactoryMockRecorder) OnChange(arg0, arg1 any) *gomock.Call {$/;"	f
OnChange	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) OnChange(_ runtimeschema.GroupVersionKind, key string, obj, oldObj runtime.Object) error {$/;"	f
OnChangeAPIService	pkg/controllers/schema/schemas.go	/^func (h *handler) OnChangeAPIService(key string, api *apiv1.APIService) (*apiv1.APIService, error) {$/;"	f
OnChangeCRD	pkg/controllers/schema/schemas.go	/^func (h *handler) OnChangeCRD(key string, crd *apiextv1.CustomResourceDefinition) (*apiextv1.CustomResourceDefinition, error) {$/;"	f
OnDelete	pkg/sqlcache/informer/shared_informer_test.go	/^func (l *testListener) OnDelete(obj interface{}) {$/;"	f
OnInboundRelationshipChange	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockRelationshipNotifier) OnInboundRelationshipChange(arg0 context.Context, arg1 *types.APISchema, arg2 string) <-chan *summary.Relationship {$/;"	f
OnInboundRelationshipChange	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockRelationshipNotifierMockRecorder) OnInboundRelationshipChange(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
OnInboundRelationshipChange	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) OnInboundRelationshipChange(ctx context.Context, schema *types.APISchema, namespace string) <-chan *summary.Relationship {$/;"	f
OnRemove	pkg/clustercache/controller.go	/^func (h *clusterCache) OnRemove(ctx context.Context, handler Handler) {$/;"	f
OnRemove	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) OnRemove(ctx context.Context, handler clustercache.Handler) {$/;"	f
OnRemove	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) OnRemove(_ runtimeschema.GroupVersionKind, key string, obj runtime.Object) error {$/;"	f
OnSchemas	pkg/clustercache/controller.go	/^func (h *clusterCache) OnSchemas(schemas *schema.Collection) error {$/;"	f
OnSchemas	pkg/controllers/schema/schemas.go	/^func (s SchemasHandlerFunc) OnSchemas(schemas *schema2.Collection) error {$/;"	f
OnSchemas	pkg/resources/counts/counts_test.go	/^func (f *fakeClusterCache) OnSchemas(schemas *schema.Collection) error {$/;"	f
OnSecret	pkg/aggregation/watch.go	/^func (h *handler) OnSecret(key string, secret *corev1.Secret) (*corev1.Secret, error) {$/;"	f
OnUpdate	pkg/sqlcache/informer/shared_informer_test.go	/^func (l *testListener) OnUpdate(old, new interface{}) {$/;"	f
Op	pkg/sqlcache/sqltypes/types.go	/^type Op string$/;"	t
OpenAPISchema	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) OpenAPISchema() (*openapiv2.Document, error) {$/;"	f
OpenAPISchema	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) OpenAPISchema() (*openapi_v2.Document, error) {$/;"	f
OpenAPIV3	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) OpenAPIV3() openapi.Client                { return nil }$/;"	f
OpenAPIV3	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) OpenAPIV3() openapi.Client                { return nil }$/;"	f
OpenParToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	OpenParToken$/;"	c
Operator	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r *Requirement) Operator() selection.Operator {$/;"	f
Operator	pkg/stores/sqlpartition/queryparser/selector.go	/^type Operator string$/;"	t
Operator	pkg/stores/sqlpartition/selection/operator.go	/^type Operator string$/;"	t
Options	pkg/server/server.go	/^type Options struct {$/;"	t
Options	pkg/ui/handler.go	/^type Options struct {$/;"	t
OrFilter	pkg/sqlcache/sqltypes/types.go	/^type OrFilter struct {$/;"	t
OrFilter	pkg/stores/partition/listprocessor/processor.go	/^type OrFilter struct {$/;"	t
PageSize	pkg/stores/partition/listprocessor/processor.go	/^func (p Pagination) PageSize() int {$/;"	f
PaginateList	pkg/stores/partition/listprocessor/processor.go	/^func PaginateList(list []unstructured.Unstructured, p Pagination) ([]unstructured.Unstructured, int) {$/;"	f
Pagination	pkg/sqlcache/sqltypes/types.go	/^type Pagination struct {$/;"	t
Pagination	pkg/stores/partition/listprocessor/processor.go	/^type Pagination struct {$/;"	t
ParallelPartitionLister	pkg/stores/partition/parallel.go	/^type ParallelPartitionLister struct {$/;"	t
Parse	pkg/stores/sqlpartition/queryparser/selector.go	/^func Parse(selector string, opts ...field.PathOption) (Selector, error) {$/;"	f
ParseQuery	pkg/stores/partition/listprocessor/processor.go	/^func ParseQuery(apiOp *types.APIRequest) *ListOptions {$/;"	f
ParseQuery	pkg/stores/sqlpartition/listprocessor/processor.go	/^func ParseQuery(apiOp *types.APIRequest, namespaceCache Cache) (sqltypes.ListOptions, error) {$/;"	f
ParseToRequirements	pkg/stores/sqlpartition/queryparser/selector.go	/^func ParseToRequirements(selector string, opts ...field.PathOption) ([]Requirement, error) {$/;"	f
Parser	pkg/stores/sqlpartition/queryparser/selector.go	/^type Parser struct {$/;"	t
ParserContext	pkg/stores/sqlpartition/queryparser/selector.go	/^type ParserContext int$/;"	t
PartialEquals	pkg/stores/sqlpartition/selection/operator.go	/^	PartialEquals    Operator = "~"$/;"	c
PartialEqualsToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	PartialEqualsToken$/;"	c
Partition	pkg/sqlcache/partition/partition.go	/^type Partition struct {$/;"	t
Partition	pkg/stores/partition/parallel.go	/^type Partition interface {$/;"	t
Partition	pkg/stores/proxy/rbac_store.go	/^type Partition struct {$/;"	t
PartitionLister	pkg/stores/partition/parallel.go	/^type PartitionLister func(ctx context.Context, partition Partition, cont string, revision string, limit int) (*unstructured.UnstructuredList, []types.Warning, error)$/;"	t
Partitioner	pkg/stores/partition/store.go	/^type Partitioner interface {$/;"	t
Partitioner	pkg/stores/sqlpartition/store.go	/^type Partitioner interface {$/;"	t
Patch	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {$/;"	f
Patch	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {$/;"	f
Patch	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {$/;"	f
Patch	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {$/;"	f
Patch	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) Patch(apiOp *types.APIRequest, name string, pt k8stypes.PatchType, data []byte, options metav1.PatchOptions, subresources ...string) (*unstructured.Unstructured, error) {$/;"	f
Patch	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {$/;"	f
Patch	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {$/;"	f
Patch	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Patch(arg0 context.Context, arg1 string, arg2 types.PatchType, arg3 []byte, arg4 v1.PatchOptions, arg5 ...string) (*unstructured.Unstructured, error) {$/;"	f
Patch	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Patch(arg0, arg1, arg2, arg3, arg4 any, arg5 ...any) *gomock.Call {$/;"	f
Pod	pkg/resources/formatters/formatter.go	/^func Pod(_ *types.APIRequest, resource *types.RawResource) {$/;"	f
PodImpersonation	pkg/podimpersonation/podimpersonation.go	/^type PodImpersonation struct {$/;"	t
PodOptions	pkg/podimpersonation/podimpersonation.go	/^type PodOptions struct {$/;"	t
Preconditions	pkg/ext/utils_test.go	/^func (f *fakeUpdatedObjectInfo) Preconditions() *metav1.Preconditions {$/;"	f
PreferredGroup	pkg/attributes/attributes.go	/^func PreferredGroup(s *types.APISchema) string {$/;"	f
PreferredVersion	pkg/attributes/attributes.go	/^func PreferredVersion(s *types.APISchema) string {$/;"	f
Prepare	pkg/sqlcache/db/client.go	/^func (c *client) Prepare(stmt string) *sql.Stmt {$/;"	f
Prepare	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockConnection) Prepare(arg0 string) (*sql.Stmt, error) {$/;"	f
Prepare	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockConnectionMockRecorder) Prepare(arg0 any) *gomock.Call {$/;"	f
Prepare	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) Prepare(arg0 string) *sql.Stmt {$/;"	f
Prepare	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) Prepare(arg0 any) *gomock.Call {$/;"	f
Prepare	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) Prepare(arg0 string) *sql.Stmt {$/;"	f
Prepare	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) Prepare(arg0 any) *gomock.Call {$/;"	f
Prepare	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Prepare(arg0 string) *sql.Stmt {$/;"	f
Prepare	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Prepare(arg0 any) *gomock.Call {$/;"	f
Prepare	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) Prepare(arg0 string) *sql.Stmt {$/;"	f
Prepare	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) Prepare(arg0 any) *gomock.Call {$/;"	f
ProjectsOrNamespacesFilter	pkg/stores/partition/listprocessor/processor.go	/^type ProjectsOrNamespacesFilter struct {$/;"	t
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (*Chart) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (*Config) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (*Value) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (*Hook) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (*Info) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (*Maintainer) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (*Metadata) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (*Release) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (*Status) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (*Template) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (*TestRun) ProtoMessage() {}$/;"	f
ProtoMessage	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (*TestSuite) ProtoMessage() {}$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Config) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Value) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Maintainer) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (x *Template) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) ProtoReflect() protoreflect.Message {$/;"	f
ProtoReflect	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (x *TestSuite) ProtoReflect() protoreflect.Message {$/;"	f
ProxyStoreResponseTime	pkg/metrics/metrics.go	/^	ProxyStoreResponseTime = prometheus.NewHistogramVec($/;"	v
ProxyTotalResponses	pkg/metrics/metrics.go	/^	ProxyTotalResponses = prometheus.NewCounterVec($/;"	v
PurgeOldRoles	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) PurgeOldRoles(gvk schema.GroupVersionKind, key string, obj runtime.Object) error {$/;"	f
PurgeUserData	pkg/accesscontrol/access_store.go	/^func (l *AccessStore) PurgeUserData(id string) {$/;"	f
PurgeUserData	pkg/accesscontrol/fake/AccessSetLookup.go	/^func (m *MockAccessSetLookup) PurgeUserData(arg0 string) {$/;"	f
PurgeUserData	pkg/accesscontrol/fake/AccessSetLookup.go	/^func (mr *MockAccessSetLookupMockRecorder) PurgeUserData(arg0 any) *gomock.Call {$/;"	f
PurgeUserData	pkg/schema/mock_test.go	/^func (m *mockAccessSetLookup) PurgeUserData(id string) {$/;"	f
PurgeUserData	pkg/stores/partition/store_test.go	/^func (m *mockAccessSetLookup) PurgeUserData(_ string) {$/;"	f
PurgeUserData	pkg/stores/sqlpartition/store_test.go	/^func (m *mockAccessSetLookup) PurgeUserData(_ string) {$/;"	f
Query	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockStmt) Query(arg0 ...any) (*sql.Rows, error) {$/;"	f
Query	pkg/sqlcache/db/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) Query(arg0 ...any) *gomock.Call {$/;"	f
Query	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockStmt) Query(arg0 ...any) (*sql.Rows, error) {$/;"	f
Query	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) Query(arg0 ...any) *gomock.Call {$/;"	f
Query	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockStmt) Query(arg0 ...any) (*sql.Rows, error) {$/;"	f
Query	pkg/sqlcache/store/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) Query(arg0 ...any) *gomock.Call {$/;"	f
QueryContext	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockStmt) QueryContext(arg0 context.Context, arg1 ...any) (*sql.Rows, error) {$/;"	f
QueryContext	pkg/sqlcache/db/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) QueryContext(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
QueryContext	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockStmt) QueryContext(arg0 context.Context, arg1 ...any) (*sql.Rows, error) {$/;"	f
QueryContext	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) QueryContext(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
QueryContext	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockStmt) QueryContext(arg0 context.Context, arg1 ...any) (*sql.Rows, error) {$/;"	f
QueryContext	pkg/sqlcache/store/transaction_mocks_test.go	/^func (mr *MockStmtMockRecorder) QueryContext(arg0 any, arg1 ...any) *gomock.Call {$/;"	f
QueryError	pkg/sqlcache/db/client.go	/^type QueryError struct {$/;"	t
QueryForRows	pkg/sqlcache/db/client.go	/^func (c *client) QueryForRows(ctx context.Context, stmt transaction.Stmt, params ...any) (*sql.Rows, error) {$/;"	f
QueryForRows	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) QueryForRows(arg0 context.Context, arg1 transaction.Stmt, arg2 ...any) (*sql.Rows, error) {$/;"	f
QueryForRows	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) QueryForRows(arg0, arg1 any, arg2 ...any) *gomock.Call {$/;"	f
QueryForRows	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) QueryForRows(arg0 context.Context, arg1 transaction.Stmt, arg2 ...any) (*sql.Rows, error) {$/;"	f
QueryForRows	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) QueryForRows(arg0, arg1 any, arg2 ...any) *gomock.Call {$/;"	f
QueryForRows	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) QueryForRows(arg0 context.Context, arg1 transaction.Stmt, arg2 ...any) (*sql.Rows, error) {$/;"	f
QueryForRows	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) QueryForRows(arg0, arg1 any, arg2 ...any) *gomock.Call {$/;"	f
QueryForRows	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) QueryForRows(arg0 context.Context, arg1 transaction.Stmt, arg2 ...any) (*sql.Rows, error) {$/;"	f
QueryForRows	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) QueryForRows(arg0, arg1 any, arg2 ...any) *gomock.Call {$/;"	f
QueryInfo	pkg/sqlcache/informer/listoption_indexer.go	/^type QueryInfo struct {$/;"	t
QuotedStringToken	pkg/stores/sqlpartition/queryparser/selector.go	/^	QuotedStringToken$/;"	c
RESTClient	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) RESTClient() restclient.Interface            { return nil }$/;"	f
RESTClient	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) RESTClient() restclient.Interface { return nil }$/;"	f
ReadInt	pkg/sqlcache/db/client.go	/^func (c *client) ReadInt(rows Rows) (int, error) {$/;"	f
ReadInt	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) ReadInt(arg0 db.Rows) (int, error) {$/;"	f
ReadInt	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadInt(arg0 any) *gomock.Call {$/;"	f
ReadInt	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) ReadInt(arg0 db.Rows) (int, error) {$/;"	f
ReadInt	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadInt(arg0 any) *gomock.Call {$/;"	f
ReadInt	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) ReadInt(arg0 db.Rows) (int, error) {$/;"	f
ReadInt	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) ReadInt(arg0 any) *gomock.Call {$/;"	f
ReadInt	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) ReadInt(arg0 db.Rows) (int, error) {$/;"	f
ReadInt	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadInt(arg0 any) *gomock.Call {$/;"	f
ReadObjects	pkg/sqlcache/db/client.go	/^func (c *client) ReadObjects(rows Rows, typ reflect.Type, shouldDecrypt bool) ([]any, error) {$/;"	f
ReadObjects	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) ReadObjects(arg0 db.Rows, arg1 reflect.Type, arg2 bool) ([]any, error) {$/;"	f
ReadObjects	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadObjects(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
ReadObjects	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) ReadObjects(arg0 db.Rows, arg1 reflect.Type, arg2 bool) ([]any, error) {$/;"	f
ReadObjects	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadObjects(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
ReadObjects	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) ReadObjects(arg0 db.Rows, arg1 reflect.Type, arg2 bool) ([]any, error) {$/;"	f
ReadObjects	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) ReadObjects(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
ReadObjects	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) ReadObjects(arg0 db.Rows, arg1 reflect.Type, arg2 bool) ([]any, error) {$/;"	f
ReadObjects	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadObjects(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
ReadStrings	pkg/sqlcache/db/client.go	/^func (c *client) ReadStrings(rows Rows) ([]string, error) {$/;"	f
ReadStrings	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) ReadStrings(arg0 db.Rows) ([]string, error) {$/;"	f
ReadStrings	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadStrings(arg0 any) *gomock.Call {$/;"	f
ReadStrings	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) ReadStrings(arg0 db.Rows) ([]string, error) {$/;"	f
ReadStrings	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadStrings(arg0 any) *gomock.Call {$/;"	f
ReadStrings	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) ReadStrings(arg0 db.Rows) ([]string, error) {$/;"	f
ReadStrings	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) ReadStrings(arg0 any) *gomock.Call {$/;"	f
ReadStrings	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) ReadStrings(arg0 db.Rows) ([]string, error) {$/;"	f
ReadStrings	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) ReadStrings(arg0 any) *gomock.Call {$/;"	f
RecordK8sClientResponseTime	pkg/metrics/metrics.go	/^func (m MetricLogger) RecordK8sClientResponseTime(err error, val float64) {$/;"	f
RecordProxyStoreResponseTime	pkg/metrics/metrics.go	/^func (m MetricLogger) RecordProxyStoreResponseTime(err error, val float64) {$/;"	f
Reference	pkg/schema/definitions/converter.go	/^func (r *openAPIV2Reference) Reference() string {$/;"	f
Refresh	pkg/debounce/refresher_test.go	/^func (r *refreshable) Refresh() error {$/;"	f
Refresh	pkg/schema/definitions/handler.go	/^func (s *SchemaDefinitionHandler) Refresh() error {$/;"	f
Refresh	pkg/schema/definitions/refresh_test.go	/^func (r *refreshable) Refresh() error {$/;"	f
RefreshAfter	pkg/debounce/refresher.go	/^func (d *DebounceableRefresher) RefreshAfter(duration time.Duration) {$/;"	f
Refreshable	pkg/debounce/refresher.go	/^type Refreshable interface {$/;"	t
Register	pkg/controllers/schema/schemas.go	/^func Register(ctx context.Context,$/;"	f
Register	pkg/resources/cluster/cluster.go	/^func Register(ctx context.Context, apiSchemas *types.APISchemas, cg proxy.ClientGetter, schemaFactory steveschema.Factory) {$/;"	f
Register	pkg/resources/counts/counts.go	/^func Register(schemas *types.APISchemas, ccache clustercache.ClusterCache) {$/;"	f
Register	pkg/resources/userpreferences/userpreferences.go	/^func Register(schemas *types.APISchemas) {$/;"	f
Register	pkg/schema/definitions/schema.go	/^func Register(ctx context.Context,$/;"	f
RegisterAfterDelete	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) RegisterAfterDelete(arg0 func(string, transaction.Client) error) {$/;"	f
RegisterAfterDelete	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) RegisterAfterDelete(arg0 any) *gomock.Call {$/;"	f
RegisterAfterDelete	pkg/sqlcache/store/store.go	/^func (s *Store) RegisterAfterDelete(f func(key string, txC transaction.Client) error) {$/;"	f
RegisterAfterUpsert	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) RegisterAfterUpsert(arg0 func(string, any, transaction.Client) error) {$/;"	f
RegisterAfterUpsert	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) RegisterAfterUpsert(arg0 any) *gomock.Call {$/;"	f
RegisterAfterUpsert	pkg/sqlcache/store/store.go	/^func (s *Store) RegisterAfterUpsert(f func(key string, obj any, txC transaction.Client) error) {$/;"	f
Relationship	pkg/summarycache/summarycache.go	/^type Relationship struct {$/;"	t
RelationshipNotifier	pkg/stores/proxy/proxy_store.go	/^type RelationshipNotifier interface {$/;"	t
RelationshipNotifier	pkg/stores/sqlproxy/proxy_store.go	/^type RelationshipNotifier interface {$/;"	t
Release	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^type Release struct {$/;"	t
Remove	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) Remove(obj runtime.Object) {$/;"	f
RemoveEventHandler	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) RemoveEventHandler(arg0 cache.ResourceEventHandlerRegistration) error {$/;"	f
RemoveEventHandler	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) RemoveEventHandler(arg0 any) *gomock.Call {$/;"	f
RemoveEventHandler	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) RemoveEventHandler(handle cache.ResourceEventHandlerRegistration) error {$/;"	f
Replace	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Replace(arg0 []any, arg1 string) error {$/;"	f
Replace	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Replace(arg0, arg1 any) *gomock.Call {$/;"	f
Replace	pkg/sqlcache/store/store.go	/^func (s *Store) Replace(objects []any, _ string) error {$/;"	f
Requirement	pkg/stores/sqlpartition/queryparser/selector.go	/^type Requirement struct {$/;"	t
Requirements	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) Requirements() (requirements Requirements, selectable bool) {$/;"	f
Requirements	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) Requirements() (Requirements, bool) { return Requirements(s), true }$/;"	f
Requirements	pkg/stores/sqlpartition/queryparser/selector.go	/^type Requirements []Requirement$/;"	t
RequiresExactMatch	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) RequiresExactMatch(label string) (value string, found bool) {$/;"	f
RequiresExactMatch	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) RequiresExactMatch(label string) (value string, found bool) {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Config) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Value) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Maintainer) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (x *Template) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) Reset() {$/;"	f
Reset	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (x *TestSuite) Reset() {$/;"	f
Reset	pkg/schema/collection.go	/^func (c *Collection) Reset(schemas map[string]*types.APISchema) {$/;"	f
Reset	pkg/sqlcache/informer/factory/informer_factory.go	/^func (f *CacheFactory) Reset() error {$/;"	f
Reset	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockCacheFactory) Reset() error {$/;"	f
Reset	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockCacheFactoryMockRecorder) Reset() *gomock.Call {$/;"	f
Reset	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) Reset() error {$/;"	f
Resource	pkg/attributes/attributes.go	/^func Resource(s *types.APISchema) string {$/;"	f
ResourceClientWithMetrics	pkg/stores/metrics/metrics_client.go	/^type ResourceClientWithMetrics struct {$/;"	t
Resources	pkg/accesscontrol/access_set.go	/^type Resources struct {$/;"	t
RestConfigDefaults	pkg/server/config.go	/^func RestConfigDefaults(cfg *rest.Config) *rest.Config {$/;"	f
ResultChan	pkg/ext/fixtures_test.go	/^func (w *watcher) ResultChan() <-chan watch.Event {$/;"	f
ResultChan	pkg/sqlcache/informer/informer_test.go	/^func (dummyWatch) ResultChan() <-chan watch.Event {$/;"	f
ResultChan	pkg/sqlcache/informer/synthetic_watcher.go	/^func (rw *SyntheticWatcher) ResultChan() <-chan watch.Event {$/;"	f
ResultChan	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func (w *tableConvertWatch) ResultChan() <-chan k8sWatch.Event {$/;"	f
ResultChan	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^func (m *MockInterface) ResultChan() <-chan watch.Event {$/;"	f
ResultChan	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^func (mr *MockInterfaceMockRecorder) ResultChan() *gomock.Call {$/;"	f
Resync	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Resync() error {$/;"	f
Resync	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Resync() *gomock.Call {$/;"	f
Resync	pkg/sqlcache/store/store.go	/^func (s *Store) Resync() error {$/;"	f
Revision	pkg/stores/partition/parallel.go	/^func (p *ParallelPartitionLister) Revision() string {$/;"	f
RoundTrip	pkg/client/factory.go	/^func (a *addQuery) RoundTrip(req *http.Request) (*http.Response, error) {$/;"	f
RouterFunc	pkg/server/router/router.go	/^type RouterFunc func(h Handlers) http.Handler$/;"	t
Routes	pkg/server/router/router.go	/^func Routes(h Handlers) http.Handler {$/;"	f
Rows	pkg/sqlcache/db/client.go	/^type Rows interface {$/;"	t
Run	pkg/ext/apiserver.go	/^func (s *ExtensionAPIServer) Run(ctx context.Context) error {$/;"	f
Run	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) Run(ctx context.Context, workers int) {$/;"	f
Run	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) Run(ctx context.Context, workers int) {$/;"	f
Run	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) Run(arg0 <-chan struct{}) {$/;"	f
Run	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) Run(arg0 any) *gomock.Call {$/;"	f
Run	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) Run(stopCh <-chan struct{})                                 {}$/;"	f
RunOnce	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) RunOnce(ctx context.Context) error {$/;"	f
RunOnce	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) RunOnce(ctx context.Context) error {$/;"	f
SafeSplit	pkg/stores/queryhelper/safesplit.go	/^func SafeSplit(fieldPath string) []string {$/;"	f
Sanitize	pkg/sqlcache/db/utility.go	/^func Sanitize(s string) string {$/;"	f
Scan	pkg/sqlcache/db/db_mocks_test.go	/^func (m *MockRows) Scan(arg0 ...any) error {$/;"	f
Scan	pkg/sqlcache/db/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Scan(arg0 ...any) *gomock.Call {$/;"	f
Scan	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockRows) Scan(arg0 ...any) error {$/;"	f
Scan	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Scan(arg0 ...any) *gomock.Call {$/;"	f
Scan	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockRows) Scan(arg0 ...any) error {$/;"	f
Scan	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockRowsMockRecorder) Scan(arg0 ...any) *gomock.Call {$/;"	f
ScannedItem	pkg/stores/sqlpartition/queryparser/selector.go	/^type ScannedItem struct {$/;"	t
Schema	pkg/schema/collection.go	/^func (c *Collection) Schema(id string) *types.APISchema {$/;"	f
SchemaColumnSetter	pkg/stores/sqlpartition/store.go	/^type SchemaColumnSetter interface {$/;"	t
SchemaColumnSetter	pkg/stores/sqlproxy/proxy_store.go	/^type SchemaColumnSetter interface {$/;"	t
SchemaDefinitionHandler	pkg/schema/definitions/handler.go	/^type SchemaDefinitionHandler struct {$/;"	t
Schemas	pkg/schema/factory.go	/^func (c *Collection) Schemas(user user.Info) (*types.APISchemas, error) {$/;"	f
Schemas	pkg/schema/fake/factory.go	/^func (m *MockFactory) Schemas(arg0 user.Info) (*types.APISchemas, error) {$/;"	f
Schemas	pkg/schema/fake/factory.go	/^func (mr *MockFactoryMockRecorder) Schemas(arg0 any) *gomock.Call {$/;"	f
SchemasHandlerFunc	pkg/controllers/schema/schemas.go	/^type SchemasHandlerFunc func(schemas *schema2.Collection) error$/;"	t
Selector	pkg/stores/sqlpartition/queryparser/selector.go	/^type Selector interface {$/;"	t
SelectorFromSet	pkg/stores/sqlpartition/queryparser/selector.go	/^func SelectorFromSet(ls Set) Selector {$/;"	f
SelectorFromValidatedSet	pkg/stores/sqlpartition/queryparser/selector.go	/^func SelectorFromValidatedSet(ls Set) Selector {$/;"	f
ServeAsset	pkg/ui/handler.go	/^func (u *Handler) ServeAsset() http.Handler {$/;"	f
ServeFaviconDashboard	pkg/ui/handler.go	/^func (u *Handler) ServeFaviconDashboard() http.Handler {$/;"	f
ServeHTTP	pkg/ext/apiserver.go	/^func (s *ExtensionAPIServer) ServeHTTP(w http.ResponseWriter, req *http.Request) {$/;"	f
ServeHTTP	pkg/resources/cluster/apply.go	/^func (a *Apply) ServeHTTP(rw http.ResponseWriter, req *http.Request) {$/;"	f
Server	pkg/server/server.go	/^type Server struct {$/;"	t
ServerAddressByClientCIDRs	pkg/ext/apiserver.go	/^func (e emptyAddresses) ServerAddressByClientCIDRs(clientIP net.IP) []metav1.ServerAddressByClientCIDR {$/;"	f
ServerGroups	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) ServerGroups() (*metav1.APIGroupList, error) { return nil, nil }$/;"	f
ServerGroups	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) ServerGroups() (*metav1.APIGroupList, error) {$/;"	f
ServerGroupsAndResources	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) ServerGroupsAndResources() ([]*metav1.APIGroup, []*metav1.APIResourceList, error) {$/;"	f
ServerGroupsAndResources	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) ServerGroupsAndResources() ([]*metav1.APIGroup, []*metav1.APIResourceList, error) {$/;"	f
ServerPreferredNamespacedResources	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) ServerPreferredNamespacedResources() ([]*metav1.APIResourceList, error) {$/;"	f
ServerPreferredNamespacedResources	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) ServerPreferredNamespacedResources() ([]*metav1.APIResourceList, error) {$/;"	f
ServerPreferredResources	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) ServerPreferredResources() ([]*metav1.APIResourceList, error) {$/;"	f
ServerPreferredResources	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) ServerPreferredResources() ([]*metav1.APIResourceList, error) {$/;"	f
ServerResourcesForGroupVersion	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) ServerResourcesForGroupVersion(groupVersion string) (*metav1.APIResourceList, error) {$/;"	f
ServerResourcesForGroupVersion	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) ServerResourcesForGroupVersion(groupVersion string) (*metav1.APIResourceList, error) {$/;"	f
ServerVersion	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) ServerVersion() (*version.Info, error) { return nil, nil }$/;"	f
ServerVersion	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) ServerVersion() (*version.Info, error) { return nil, nil }$/;"	f
Set	pkg/ext/apiserver_test.go	/^func (s *customColumnsStore) Set(columns []metav1.TableColumnDefinition, convertFn func(obj *TestType) []string) {$/;"	f
Set	pkg/stores/sqlpartition/queryparser/labels.go	/^type Set map[string]string$/;"	t
SetAPIResource	pkg/attributes/attributes.go	/^func SetAPIResource(s *types.APISchema, resource v1.APIResource) {$/;"	f
SetAccess	pkg/attributes/attributes.go	/^func SetAccess(s *types.APISchema, access interface{}) {$/;"	f
SetColumns	pkg/attributes/attributes.go	/^func SetColumns(s *types.APISchema, columns interface{}) {$/;"	f
SetColumns	pkg/resources/common/dynamiccolumns.go	/^func (d *DynamicColumns) SetColumns(ctx context.Context, schema *types.APISchema) error {$/;"	f
SetColumns	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockSchemaColumnSetter) SetColumns(arg0 context.Context, arg1 *types.APISchema) error {$/;"	f
SetColumns	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockSchemaColumnSetterMockRecorder) SetColumns(arg0, arg1 any) *gomock.Call {$/;"	f
SetGR	pkg/attributes/attributes.go	/^func SetGR(s *types.APISchema, gr schema.GroupResource) {$/;"	f
SetGVK	pkg/attributes/attributes.go	/^func SetGVK(s *types.APISchema, gvk schema.GroupVersionKind) {$/;"	f
SetGVR	pkg/attributes/attributes.go	/^func SetGVR(s *types.APISchema, gvk schema.GroupVersionResource) {$/;"	f
SetGroup	pkg/attributes/attributes.go	/^func SetGroup(s *types.APISchema, value string) {$/;"	f
SetHost	pkg/proxy/proxy.go	/^func SetHost(host string, h http.Handler) http.Handler {$/;"	f
SetKind	pkg/attributes/attributes.go	/^func SetKind(s *types.APISchema, value string) {$/;"	f
SetNamespaced	pkg/attributes/attributes.go	/^func SetNamespaced(s *types.APISchema, value bool) {$/;"	f
SetPreferredGroup	pkg/attributes/attributes.go	/^func SetPreferredGroup(s *types.APISchema, ver string) {$/;"	f
SetPreferredVersion	pkg/attributes/attributes.go	/^func SetPreferredVersion(s *types.APISchema, ver string) {$/;"	f
SetResource	pkg/attributes/attributes.go	/^func SetResource(s *types.APISchema, value string) {$/;"	f
SetSyntheticWatchableInterval	pkg/sqlcache/informer/informer.go	/^func SetSyntheticWatchableInterval(interval time.Duration) {$/;"	f
SetTable	pkg/attributes/attributes.go	/^func SetTable(s *types.APISchema, value bool) {$/;"	f
SetTransform	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) SetTransform(arg0 cache.TransformFunc) error {$/;"	f
SetTransform	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) SetTransform(arg0 any) *gomock.Call {$/;"	f
SetTransform	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) SetTransform(handler cache.TransformFunc) error {$/;"	f
SetVerbs	pkg/attributes/attributes.go	/^func SetVerbs(s *types.APISchema, verbs []string) {$/;"	f
SetVersion	pkg/attributes/attributes.go	/^func SetVersion(s *types.APISchema, value string) {$/;"	f
SetWatchErrorHandler	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (m *MockSharedIndexInformer) SetWatchErrorHandler(arg0 cache.WatchErrorHandler) error {$/;"	f
SetWatchErrorHandler	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^func (mr *MockSharedIndexInformerMockRecorder) SetWatchErrorHandler(arg0 any) *gomock.Call {$/;"	f
SetWatchErrorHandler	pkg/sqlcache/informer/informer_test.go	/^func (m *mockInformer) SetWatchErrorHandler(handler cache.WatchErrorHandler) error { return nil }$/;"	f
SetupClient	pkg/sqlcache/db/client_test.go	/^func SetupClient(t *testing.T, connection Connection, encryptor Encryptor, decryptor Decryptor) Client {$/;"	f
SetupDebug	pkg/debug/cli.go	/^func (c *Config) SetupDebug() error {$/;"	f
SetupMockConnection	pkg/sqlcache/db/client_test.go	/^func SetupMockConnection(t *testing.T) *MockConnection {$/;"	f
SetupMockDB	pkg/sqlcache/store/store_test.go	/^func SetupMockDB(t *testing.T) (*MockClient, *MockTXClient) {$/;"	f
SetupMockDecryptor	pkg/sqlcache/db/client_test.go	/^func SetupMockDecryptor(t *testing.T) *MockDecryptor {$/;"	f
SetupMockEncryptor	pkg/sqlcache/db/client_test.go	/^func SetupMockEncryptor(t *testing.T) *MockEncryptor {$/;"	f
SetupMockRows	pkg/sqlcache/db/client_test.go	/^func SetupMockRows(t *testing.T) *MockRows {$/;"	f
SetupStore	pkg/sqlcache/store/store_test.go	/^func SetupStore(t *testing.T, client *MockClient, shouldEncrypt bool) *Store {$/;"	f
SetupSuite	pkg/ext/apiserver_suite_test.go	/^func (s *ExtensionAPIServerSuite) SetupSuite() {$/;"	f
SetupSuite	pkg/sqlcache/integration_test.go	/^func (i *IntegrationSuite) SetupSuite() {$/;"	f
SetupWatcher	pkg/resources/schemas/template.go	/^func SetupWatcher(ctx context.Context, schemas *types.APISchemas, asl accesscontrol.AccessSetLookup, factory schema.Factory) {$/;"	f
Sort	pkg/sqlcache/sqltypes/types.go	/^type Sort struct {$/;"	t
Sort	pkg/stores/partition/listprocessor/processor.go	/^type Sort struct {$/;"	t
SortList	pkg/sqlcache/sqltypes/types.go	/^type SortList struct {$/;"	t
SortList	pkg/stores/partition/listprocessor/processor.go	/^func SortList(list []unstructured.Unstructured, s Sort) []unstructured.Unstructured {$/;"	f
SortOrder	pkg/sqlcache/sqltypes/types.go	/^type SortOrder int$/;"	t
SortOrder	pkg/stores/partition/listprocessor/processor.go	/^type SortOrder int$/;"	t
Spec	pkg/resources/cluster/cluster_type.go	/^type Spec struct {$/;"	t
Start	pkg/server/config.go	/^func (c *Controllers) Start(ctx context.Context) error {$/;"	f
Start	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) Start(ctx context.Context) {$/;"	f
StartAggregation	pkg/server/server.go	/^func (c *Server) StartAggregation(ctx context.Context) {$/;"	f
StartHook	pkg/server/config.go	/^type StartHook func(context.Context, *Server) error$/;"	t
Status	pkg/resources/cluster/cluster_type.go	/^type Status struct {$/;"	t
Status	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^type Status struct {$/;"	t
Status_Code	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^type Status_Code int32$/;"	t
Status_Code_name	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_Code_name = map[int32]string{$/;"	v
Status_Code_value	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_Code_value = map[string]int32{$/;"	v
Status_DELETED	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_DELETED Status_Code = 2$/;"	c
Status_DELETING	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_DELETING Status_Code = 5$/;"	c
Status_DEPLOYED	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_DEPLOYED Status_Code = 1$/;"	c
Status_FAILED	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_FAILED Status_Code = 4$/;"	c
Status_PENDING_INSTALL	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_PENDING_INSTALL Status_Code = 6$/;"	c
Status_PENDING_ROLLBACK	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_PENDING_ROLLBACK Status_Code = 8$/;"	c
Status_PENDING_UPGRADE	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_PENDING_UPGRADE Status_Code = 7$/;"	c
Status_SUPERSEDED	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_SUPERSEDED Status_Code = 3$/;"	c
Status_UNKNOWN	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	Status_UNKNOWN Status_Code = 0$/;"	c
Stmt	pkg/sqlcache/db/transaction/transaction.go	/^func (c client) Stmt(stmt *sql.Stmt) Stmt {$/;"	f
Stmt	pkg/sqlcache/db/transaction/transaction.go	/^type Stmt interface {$/;"	t
Stmt	pkg/sqlcache/db/transaction_mocks_test.go	/^func (m *MockClient) Stmt(arg0 *sql.Stmt) transaction.Stmt {$/;"	f
Stmt	pkg/sqlcache/db/transaction_mocks_test.go	/^func (mr *MockClientMockRecorder) Stmt(arg0 any) *gomock.Call {$/;"	f
Stmt	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^func (m *MockTXClient) Stmt(arg0 *sql.Stmt) transaction.Stmt {$/;"	f
Stmt	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^func (mr *MockTXClientMockRecorder) Stmt(arg0 any) *gomock.Call {$/;"	f
Stmt	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (m *MockTXClient) Stmt(arg0 *sql.Stmt) transaction.Stmt {$/;"	f
Stmt	pkg/sqlcache/informer/transaction_mocks_test.go	/^func (mr *MockTXClientMockRecorder) Stmt(arg0 any) *gomock.Call {$/;"	f
Stmt	pkg/sqlcache/store/transaction_mocks_test.go	/^func (m *MockTXClient) Stmt(arg0 *sql.Stmt) transaction.Stmt {$/;"	f
Stmt	pkg/sqlcache/store/transaction_mocks_test.go	/^func (mr *MockTXClientMockRecorder) Stmt(arg0 any) *gomock.Call {$/;"	f
Stop	pkg/ext/fixtures_test.go	/^func (w *watcher) Stop() {$/;"	f
Stop	pkg/sqlcache/informer/informer_test.go	/^func (dummyWatch) Stop() {$/;"	f
Stop	pkg/sqlcache/informer/synthetic_watcher.go	/^func (rw *SyntheticWatcher) Stop() {$/;"	f
Stop	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func (w *tableConvertWatch) Stop() {$/;"	f
Stop	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^func (m *MockInterface) Stop() {$/;"	f
Stop	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^func (mr *MockInterfaceMockRecorder) Stop() *gomock.Call {$/;"	f
Store	pkg/resources/apigroups/apigroup.go	/^type Store struct {$/;"	t
Store	pkg/resources/cluster/cluster.go	/^type Store struct {$/;"	t
Store	pkg/resources/counts/counts.go	/^type Store struct {$/;"	t
Store	pkg/resources/schemas/template.go	/^type Store struct {$/;"	t
Store	pkg/sqlcache/informer/indexer.go	/^type Store interface {$/;"	t
Store	pkg/sqlcache/store/store.go	/^type Store struct {$/;"	t
Store	pkg/stores/metrics/metrics_store.go	/^type Store struct {$/;"	t
Store	pkg/stores/partition/store.go	/^type Store struct {$/;"	t
Store	pkg/stores/partition/store_test.go	/^func (m mockPartitioner) Store(apiOp *types.APIRequest, partition Partition) (UnstructuredStore, error) {$/;"	f
Store	pkg/stores/proxy/proxy_store.go	/^type Store struct {$/;"	t
Store	pkg/stores/proxy/rbac_store.go	/^func (p *rbacPartitioner) Store(apiOp *types.APIRequest, partition partition.Partition) (partition.UnstructuredStore, error) {$/;"	f
Store	pkg/stores/selector/selector.go	/^type Store struct {$/;"	t
Store	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockPartitioner) Store() UnstructuredStore {$/;"	f
Store	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockPartitionerMockRecorder) Store() *gomock.Call {$/;"	f
Store	pkg/stores/sqlpartition/partitioner.go	/^func (p *rbacPartitioner) Store() UnstructuredStore {$/;"	f
Store	pkg/stores/sqlpartition/store.go	/^type Store struct {$/;"	t
Store	pkg/stores/sqlpartition/store_test.go	/^func (m mockPartitioner) Store() sqlproxy.Store {$/;"	f
Store	pkg/stores/sqlproxy/proxy_store.go	/^type Store struct {$/;"	t
Store	pkg/stores/switchschema/store.go	/^type Store struct {$/;"	t
String	pkg/aggregation/listener.go	/^func (a addr) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func (x *Chart) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Config) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func (x *Value) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x *Hook) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x Hook_DeletePolicy) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (x Hook_Event) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func (x *Info) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Maintainer) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x *Metadata) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (x Metadata_Engine) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func (x *Release) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x *Status) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (x Status_Code) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func (x *Template) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x *TestRun) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (x TestRun_Status) String() string {$/;"	f
String	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func (x *TestSuite) String() string {$/;"	f
String	pkg/stores/partition/listprocessor/processor.go	/^func (f Filter) String() string {$/;"	f
String	pkg/stores/partition/listprocessor/processor.go	/^func (f OrFilter) String() string {$/;"	f
String	pkg/stores/partition/listprocessor/processor.go	/^func (s Sort) String() string {$/;"	f
String	pkg/stores/sqlpartition/queryparser/labels.go	/^func (ls Set) String() string {$/;"	f
String	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r *Requirement) String() string {$/;"	f
String	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r Requirements) String() string {$/;"	f
String	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) String() string {$/;"	f
String	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s internalSelector) String() string {$/;"	f
StringSetting	pkg/ui/handler.go	/^type StringSetting func() string$/;"	t
SubSchema	pkg/schema/definitions/converter.go	/^func (r *openAPIV2Reference) SubSchema() proto.Schema {$/;"	f
Summary	pkg/resources/counts/counts.go	/^type Summary struct {$/;"	t
SummaryAndRelationship	pkg/resources/virtual/common/testutil.go	/^func (f *FakeSummaryCache) SummaryAndRelationship(runtime.Object) (*summary.SummarizedObject, []summarycache.Relationship) {$/;"	f
SummaryAndRelationship	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) SummaryAndRelationship(obj runtime.Object) (*summary.SummarizedObject, []Relationship) {$/;"	f
SummaryCache	pkg/resources/virtual/common/common.go	/^type SummaryCache interface {$/;"	t
SummaryCache	pkg/summarycache/summarycache.go	/^type SummaryCache struct {$/;"	t
SyntheticWatcher	pkg/sqlcache/informer/synthetic_watcher.go	/^type SyntheticWatcher struct {$/;"	t
Table	pkg/attributes/attributes.go	/^func Table(s *types.APISchema) bool {$/;"	f
Table	pkg/schema/table/mapper.go	/^type Table struct {$/;"	t
TableAdminClient	pkg/client/factory.go	/^func (p *Factory) TableAdminClient(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableAdminClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) TableAdminClient(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableAdminClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) TableAdminClient(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
TableAdminClientForWatch	pkg/client/factory.go	/^func (p *Factory) TableAdminClientForWatch(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableAdminClientForWatch	pkg/stores/proxy/proxy_store_test.go	/^func (t *testFactory) TableAdminClientForWatch(ctx *types.APIRequest, schema *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableAdminClientForWatch	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) TableAdminClientForWatch(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableAdminClientForWatch	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) TableAdminClientForWatch(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
TableAdminClientForWatch	pkg/stores/sqlproxy/proxy_store_test.go	/^func (t *testFactory) TableAdminClientForWatch(ctx *types.APIRequest, schema *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClient	pkg/client/factory.go	/^func (p *Factory) TableClient(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClient	pkg/stores/proxy/proxy_store_test.go	/^func (t *testFactory) TableClient(ctx *types.APIRequest, schema *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) TableClient(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClient	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) TableClient(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
TableClient	pkg/stores/sqlproxy/proxy_store_test.go	/^func (t *testFactory) TableClient(ctx *types.APIRequest, schema *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClientForWatch	pkg/client/factory.go	/^func (p *Factory) TableClientForWatch(ctx *types.APIRequest, s *types.APISchema, namespace string, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClientForWatch	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (m *MockClientGetter) TableClientForWatch(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 string, arg3 rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
TableClientForWatch	pkg/stores/sqlproxy/proxy_mocks_test.go	/^func (mr *MockClientGetterMockRecorder) TableClientForWatch(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
TearDownSuite	pkg/ext/apiserver_suite_test.go	/^func (s *ExtensionAPIServerSuite) TearDownSuite() {$/;"	f
TearDownSuite	pkg/sqlcache/integration_test.go	/^func (i *IntegrationSuite) TearDownSuite() {$/;"	f
Template	pkg/resources/apigroups/apigroup.go	/^func Template(discovery discovery.DiscoveryInterface) schema.Template {$/;"	f
Template	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^type Template struct {$/;"	t
Template	pkg/schema/collection.go	/^type Template struct {$/;"	t
TestAccessSet_AddNonResourceURLs	pkg/accesscontrol/access_set_test.go	/^func TestAccessSet_AddNonResourceURLs(t *testing.T) {$/;"	f
TestAccessSet_GrantsNonResource	pkg/accesscontrol/access_set_test.go	/^func TestAccessSet_GrantsNonResource(t *testing.T) {$/;"	f
TestAccessSet_Merge	pkg/accesscontrol/access_set_test.go	/^func TestAccessSet_Merge(t *testing.T) {$/;"	f
TestAccessStore_AccessFor	pkg/accesscontrol/access_store_test.go	/^func TestAccessStore_AccessFor(t *testing.T) {$/;"	f
TestAccessStore_AccessFor_concurrent	pkg/accesscontrol/access_store_test.go	/^func TestAccessStore_AccessFor_concurrent(t *testing.T) {$/;"	f
TestAccessStore_userGrantsFor	pkg/accesscontrol/access_store_test.go	/^func TestAccessStore_userGrantsFor(t *testing.T) {$/;"	f
TestAdd	pkg/sqlcache/store/store_test.go	/^func TestAdd(t *testing.T) {$/;"	f
TestAddCustomResources	pkg/schema/converter/crd_test.go	/^func TestAddCustomResources(t *testing.T) {$/;"	f
TestAddDescription	pkg/schema/converter/description_test.go	/^func TestAddDescription(t *testing.T) {$/;"	f
TestAddDiscovery	pkg/schema/converter/discovery_test.go	/^func TestAddDiscovery(t *testing.T) {$/;"	f
TestAddIndexers	pkg/sqlcache/informer/indexer_test.go	/^func TestAddIndexers(t *testing.T) {$/;"	f
TestAfterUpsert	pkg/sqlcache/informer/indexer_test.go	/^func TestAfterUpsert(t *testing.T) {$/;"	f
TestAugmentPod	pkg/podimpersonation/podimpersonation_test.go	/^func TestAugmentPod(t *testing.T) {$/;"	f
TestAuthenticationCustom	pkg/ext/apiserver_authentication_test.go	/^func TestAuthenticationCustom(t *testing.T) {$/;"	f
TestAuthenticationDefault	pkg/ext/apiserver_authentication_test.go	/^func (s *ExtensionAPIServerSuite) TestAuthenticationDefault() {$/;"	f
TestAuthenticationUnion	pkg/ext/apiserver_authentication_test.go	/^func (s *ExtensionAPIServerSuite) TestAuthenticationUnion() {$/;"	f
TestAuthorization	pkg/ext/apiserver_authorization_test.go	/^func (s *ExtensionAPIServerSuite) TestAuthorization() {$/;"	f
TestAuthorization_NonResourceURLs	pkg/ext/apiserver_authorization_test.go	/^func TestAuthorization_NonResourceURLs(t *testing.T) {$/;"	f
TestBuildSortLabelsClause	pkg/sqlcache/informer/listoption_indexer_test.go	/^func TestBuildSortLabelsClause(t *testing.T) {$/;"	f
TestByIndex	pkg/sqlcache/informer/indexer_test.go	/^func TestByIndex(t *testing.T) {$/;"	f
TestByNames	pkg/stores/proxy/proxy_store_test.go	/^func TestByNames(t *testing.T) {$/;"	f
TestCRDToDefinition	pkg/schema/definitions/converter_test.go	/^func TestCRDToDefinition(t *testing.T) {$/;"	f
TestCacheFor	pkg/sqlcache/informer/factory/informer_factory_test.go	/^func TestCacheFor(t *testing.T) {$/;"	f
TestCommit	pkg/sqlcache/db/client_test.go	/^func TestCommit(t *testing.T) {$/;"	f
TestConstructQuery	pkg/sqlcache/informer/listoption_indexer_test.go	/^func TestConstructQuery(t *testing.T) {$/;"	f
TestConvertError	pkg/ext/utils_test.go	/^func TestConvertError(t *testing.T) {$/;"	f
TestConvertListOptions	pkg/ext/utils_test.go	/^func TestConvertListOptions(t *testing.T) {$/;"	f
TestCreate	pkg/stores/proxy/proxy_store_test.go	/^func TestCreate(t *testing.T) {$/;"	f
TestCreate	pkg/stores/sqlproxy/proxy_store_test.go	/^func TestCreate(t *testing.T) {$/;"	f
TestCreateOrUpdate	pkg/ext/utils_test.go	/^func TestCreateOrUpdate(t *testing.T) {$/;"	f
TestCustomColumns	pkg/ext/apiserver_test.go	/^func TestCustomColumns(t *testing.T) {$/;"	f
TestDecrypt	pkg/sqlcache/encryption/encrypt_test.go	/^func TestDecrypt(t *testing.T) {$/;"	f
TestDelete	pkg/sqlcache/store/store_test.go	/^func TestDelete(t *testing.T) {$/;"	f
TestDiscoveryAndOpenAPI	pkg/ext/apiserver_test.go	/^func TestDiscoveryAndOpenAPI(t *testing.T) {$/;"	f
TestEncrypt	pkg/sqlcache/encryption/encrypt_test.go	/^func TestEncrypt(t *testing.T) {$/;"	f
TestExtensionAPIServerSuite	pkg/ext/apiserver_suite_test.go	/^func TestExtensionAPIServerSuite(t *testing.T) {$/;"	f
TestFilterByProjectsAndNamespaces	pkg/stores/partition/listprocessor/processor_test.go	/^func TestFilterByProjectsAndNamespaces(t *testing.T) {$/;"	f
TestFilterList	pkg/stores/partition/listprocessor/processor_test.go	/^func TestFilterList(t *testing.T) {$/;"	f
TestFormatterAddsResourcePermissions	pkg/resources/common/formatter_test.go	/^func TestFormatterAddsResourcePermissions(t *testing.T) {$/;"	f
TestGVKToSchemaID	pkg/schema/converter/k8stonorman_test.go	/^func TestGVKToSchemaID(t *testing.T) {$/;"	f
TestGVKToVersionedSchemaID	pkg/schema/converter/k8stonorman_test.go	/^func TestGVKToVersionedSchemaID(t *testing.T) {$/;"	f
TestGVRToPluralName	pkg/schema/converter/k8stonorman_test.go	/^func TestGVRToPluralName(t *testing.T) {$/;"	f
TestGet	pkg/sqlcache/store/store_test.go	/^func TestGet(t *testing.T) {$/;"	f
TestGetByKey	pkg/sqlcache/store/store_test.go	/^func TestGetByKey(t *testing.T) {$/;"	f
TestGetField	pkg/sqlcache/informer/listoption_indexer_test.go	/^func TestGetField(t *testing.T) {$/;"	f
TestGetGVKForKind	pkg/schema/converter/k8stonorman_test.go	/^func TestGetGVKForKind(t *testing.T) {$/;"	f
TestGetIndexers	pkg/sqlcache/informer/indexer_test.go	/^func TestGetIndexers(t *testing.T) {$/;"	f
TestIndex	pkg/sqlcache/informer/indexer_test.go	/^func TestIndex(t *testing.T) {$/;"	f
TestInformerListByOptions	pkg/sqlcache/informer/informer_test.go	/^func TestInformerListByOptions(t *testing.T) {$/;"	f
TestIntegrationSuite	pkg/sqlcache/integration_test.go	/^func TestIntegrationSuite(t *testing.T) {$/;"	f
TestLexer	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func TestLexer(t *testing.T) {$/;"	f
TestLexerSequence	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func TestLexerSequence(t *testing.T) {$/;"	f
TestList	pkg/sqlcache/store/store_test.go	/^func TestList(t *testing.T) {$/;"	f
TestList	pkg/stores/partition/store_test.go	/^func TestList(t *testing.T) {$/;"	f
TestList	pkg/stores/sqlpartition/store_test.go	/^func TestList(t *testing.T) {$/;"	f
TestList	pkg/stores/sqlproxy/tablelistconvert/client_test.go	/^func TestList(t *testing.T) {$/;"	f
TestListByOptions	pkg/sqlcache/informer/listoption_indexer_test.go	/^func TestListByOptions(t *testing.T) {$/;"	f
TestListByPartitions	pkg/stores/sqlproxy/proxy_store_test.go	/^func TestListByPartitions(t *testing.T) {$/;"	f
TestListByRevision	pkg/stores/partition/store_test.go	/^func TestListByRevision(t *testing.T) {$/;"	f
TestListIndexFuncValues	pkg/sqlcache/informer/indexer_test.go	/^func TestListIndexFuncValues(t *testing.T) {$/;"	f
TestListKeys	pkg/sqlcache/store/store_test.go	/^func TestListKeys(t *testing.T) {$/;"	f
TestListenerResyncPeriods	pkg/sqlcache/informer/shared_informer_test.go	/^func TestListenerResyncPeriods(t *testing.T) {$/;"	f
TestNewCacheFactory	pkg/sqlcache/informer/factory/informer_factory_test.go	/^func TestNewCacheFactory(t *testing.T) {$/;"	f
TestNewClient	pkg/sqlcache/db/client_test.go	/^func TestNewClient(t *testing.T) {$/;"	f
TestNewConnection	pkg/sqlcache/db/client_test.go	/^func TestNewConnection(t *testing.T) {$/;"	f
TestNewFactoryWithOptions	pkg/client/factory_test.go	/^func TestNewFactoryWithOptions(t *testing.T) {$/;"	f
TestNewIndexer	pkg/sqlcache/informer/indexer_test.go	/^func TestNewIndexer(t *testing.T) {$/;"	f
TestNewInformer	pkg/sqlcache/informer/informer_test.go	/^func TestNewInformer(t *testing.T) {$/;"	f
TestNewListOptionIndexer	pkg/sqlcache/informer/listoption_indexer_test.go	/^func TestNewListOptionIndexer(t *testing.T) {$/;"	f
TestNewManager	pkg/sqlcache/encryption/encrypt_test.go	/^func TestNewManager(t *testing.T) {$/;"	f
TestNewProxyStore	pkg/stores/sqlproxy/proxy_store_test.go	/^func TestNewProxyStore(t *testing.T) {$/;"	f
TestNoStore	pkg/ext/apiserver_test.go	/^func TestNoStore(t *testing.T) {$/;"	f
TestPaginateList	pkg/stores/partition/listprocessor/processor_test.go	/^func TestPaginateList(t *testing.T) {$/;"	f
TestParseOperator	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func TestParseOperator(t *testing.T) {$/;"	f
TestParseQuery	pkg/stores/sqlpartition/listprocessor/processor_test.go	/^func TestParseQuery(t *testing.T) {$/;"	f
TestParserLookahead	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func TestParserLookahead(t *testing.T) {$/;"	f
TestPrepare	pkg/sqlcache/db/client_test.go	/^func TestPrepare(t *testing.T) {$/;"	f
TestQueryForRows	pkg/sqlcache/db/client_test.go	/^func TestQueryForRows(t *testing.T) {$/;"	f
TestQueryObjects	pkg/sqlcache/db/client_test.go	/^func TestQueryObjects(t *testing.T) {$/;"	f
TestQueryStrings	pkg/sqlcache/db/client_test.go	/^func TestQueryStrings(t *testing.T) {$/;"	f
TestReadInt	pkg/sqlcache/db/client_test.go	/^func TestReadInt(t *testing.T) {$/;"	f
TestRefresh	pkg/schema/definitions/handler_test.go	/^func TestRefresh(t *testing.T) {$/;"	f
TestRefreshAfter	pkg/debounce/refresher_test.go	/^func TestRefreshAfter(t *testing.T) {$/;"	f
TestRegister	pkg/schema/definitions/schema_test.go	/^func TestRegister(t *testing.T) {$/;"	f
TestReplace	pkg/sqlcache/store/store_test.go	/^func TestReplace(t *testing.T) {$/;"	f
TestRequirementConstructor	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func TestRequirementConstructor(t *testing.T) {$/;"	f
TestReset	pkg/stores/sqlproxy/proxy_store_test.go	/^func TestReset(t *testing.T) {$/;"	f
TestResync	pkg/sqlcache/store/store_test.go	/^func TestResync(t *testing.T) {$/;"	f
TestRollback	pkg/sqlcache/db/client_test.go	/^func TestRollback(t *testing.T) {$/;"	f
TestRun	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^type TestRun struct {$/;"	t
TestRun_FAILURE	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	TestRun_FAILURE TestRun_Status = 2$/;"	c
TestRun_RUNNING	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	TestRun_RUNNING TestRun_Status = 3$/;"	c
TestRun_SUCCESS	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	TestRun_SUCCESS TestRun_Status = 1$/;"	c
TestRun_Status	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^type TestRun_Status int32$/;"	t
TestRun_Status_name	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	TestRun_Status_name = map[int32]string{$/;"	v
TestRun_Status_value	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	TestRun_Status_value = map[string]int32{$/;"	v
TestRun_UNKNOWN	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	TestRun_UNKNOWN TestRun_Status = 0$/;"	c
TestSQLCacheFilters	pkg/sqlcache/integration_test.go	/^func (i *IntegrationSuite) TestSQLCacheFilters() {$/;"	f
TestSchemaCache	pkg/schema/factory_test.go	/^func TestSchemaCache(t *testing.T) {$/;"	f
TestSchemaDefinitionMerge	pkg/schema/definitions/schema_test.go	/^func TestSchemaDefinitionMerge(t *testing.T) {$/;"	f
TestSchemaFieldVisitor	pkg/schema/definitions/visitor_test.go	/^func TestSchemaFieldVisitor(t *testing.T) {$/;"	f
TestSchemas	pkg/schema/factory_test.go	/^func TestSchemas(t *testing.T) {$/;"	f
TestSelectorParse	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func TestSelectorParse(t *testing.T) {$/;"	f
TestSharedInformerErrorHandling	pkg/sqlcache/informer/shared_informer_test.go	/^func TestSharedInformerErrorHandling(t *testing.T) {$/;"	f
TestSharedInformerInitializationRace	pkg/sqlcache/informer/shared_informer_test.go	/^func TestSharedInformerInitializationRace(t *testing.T) {$/;"	f
TestSharedInformerTransformer	pkg/sqlcache/informer/shared_informer_test.go	/^func TestSharedInformerTransformer(t *testing.T) {$/;"	f
TestSharedInformerWatchDisruption	pkg/sqlcache/informer/shared_informer_test.go	/^func TestSharedInformerWatchDisruption(t *testing.T) {$/;"	f
TestSmartJoin	pkg/sqlcache/informer/listoption_indexer_test.go	/^func TestSmartJoin(t *testing.T) {$/;"	f
TestSortList	pkg/stores/partition/listprocessor/processor_test.go	/^func TestSortList(t *testing.T) {$/;"	f
TestSortString	pkg/stores/partition/listprocessor/processor_test.go	/^func TestSortString(t *testing.T) {$/;"	f
TestStore	pkg/ext/apiserver_test.go	/^func TestStore(t *testing.T) {$/;"	f
TestStore	pkg/stores/sqlpartition/partitioner_test.go	/^func TestStore(t *testing.T) {$/;"	f
TestSuite	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^type TestSuite struct {$/;"	t
TestSyntheticWatcher	pkg/sqlcache/informer/synthetic_watcher_test.go	/^func TestSyntheticWatcher(t *testing.T) {$/;"	f
TestToSchemas	pkg/schema/converter/k8stonorman_test.go	/^func TestToSchemas(t *testing.T) {$/;"	f
TestTouchFile	pkg/sqlcache/db/client_test.go	/^func TestTouchFile(t *testing.T) {$/;"	f
TestTransformChain	pkg/resources/virtual/virtual_test.go	/^func TestTransformChain(t *testing.T) {$/;"	f
TestTransformCommonObjects	pkg/resources/virtual/common/common_test.go	/^func TestTransformCommonObjects(t *testing.T) {$/;"	f
TestTransformEvents	pkg/resources/virtual/events/events_test.go	/^func TestTransformEvents(t *testing.T) {$/;"	f
TestTransformManagedCluster	pkg/resources/virtual/clusters/clusters_test.go	/^func TestTransformManagedCluster(t *testing.T) {$/;"	f
TestType	pkg/ext/fixtures_test.go	/^type TestType struct {$/;"	t
TestTypeList	pkg/ext/fixtures_test.go	/^type TestTypeList struct {$/;"	t
TestTypeOther	pkg/ext/fixtures_test.go	/^type TestTypeOther struct {$/;"	t
TestTypeOtherList	pkg/ext/fixtures_test.go	/^type TestTypeOtherList struct {$/;"	t
TestUnsafeSet	pkg/sqlcache/informer/informer_test.go	/^func TestUnsafeSet(t *testing.T) {$/;"	f
TestUpdate	pkg/sqlcache/store/store_test.go	/^func TestUpdate(t *testing.T) {$/;"	f
TestUpdate	pkg/stores/proxy/proxy_store_test.go	/^func TestUpdate(t *testing.T) {$/;"	f
TestUpdate	pkg/stores/sqlproxy/proxy_store_test.go	/^func TestUpdate(t *testing.T) {$/;"	f
TestUpsert	pkg/sqlcache/db/client_test.go	/^func TestUpsert(t *testing.T) {$/;"	f
TestVerbList	pkg/stores/proxy/rbac_store_test.go	/^func TestVerbList(t *testing.T) {$/;"	f
TestVerbList	pkg/stores/sqlpartition/partitioner_test.go	/^func TestVerbList(t *testing.T) {$/;"	f
TestVerbWatch	pkg/stores/proxy/rbac_store_test.go	/^func TestVerbWatch(t *testing.T) {$/;"	f
TestVerbWatch	pkg/stores/sqlpartition/partitioner_test.go	/^func TestVerbWatch(t *testing.T) {$/;"	f
TestWatch	pkg/resources/counts/counts_test.go	/^func TestWatch(t *testing.T) {$/;"	f
TestWatch	pkg/stores/sqlproxy/tablelistconvert/client_test.go	/^func TestWatch(t *testing.T) {$/;"	f
TestWatchNamesErrReceive	pkg/stores/proxy/proxy_store_test.go	/^func TestWatchNamesErrReceive(t *testing.T) {$/;"	f
TestWatchNamesErrReceive	pkg/stores/sqlproxy/proxy_store_test.go	/^func TestWatchNamesErrReceive(t *testing.T) {$/;"	f
TestWithQPSAndBurst	pkg/client/factory_test.go	/^func TestWithQPSAndBurst(t *testing.T) {$/;"	f
Test_AccessSetAndChangeSignal	pkg/resources/schemas/template_test.go	/^func Test_AccessSetAndChangeSignal(t *testing.T) {$/;"	f
Test_HandleHelmData	pkg/resources/formatters/formatter_test.go	/^func Test_HandleHelmData(t *testing.T) {$/;"	f
Test_HandleLegacyHelmV2Data	pkg/resources/formatters/formatter_test.go	/^func Test_HandleLegacyHelmV2Data(t *testing.T) {$/;"	f
Test_WatchChangeDetection	pkg/resources/schemas/template_test.go	/^func Test_WatchChangeDetection(t *testing.T) {$/;"	f
Test_addResourceAccess	pkg/accesscontrol/policy_rule_index_test.go	/^func Test_addResourceAccess(t *testing.T) {$/;"	f
Test_byID	pkg/schema/definitions/handler_test.go	/^func Test_byID(t *testing.T) {$/;"	f
Test_countsBuffer	pkg/resources/counts/buffer_test.go	/^func Test_countsBuffer(t *testing.T) {$/;"	f
Test_decodeHelm2	pkg/resources/formatters/formatter_test.go	/^func Test_decodeHelm2(t *testing.T) {$/;"	f
Test_excludeFields	pkg/resources/common/formatter_test.go	/^func Test_excludeFields(t *testing.T) {$/;"	f
Test_excludeValues	pkg/resources/common/formatter_test.go	/^func Test_excludeValues(t *testing.T) {$/;"	f
Test_formatterLinks	pkg/resources/common/formatter_test.go	/^func Test_formatterLinks(t *testing.T) {$/;"	f
Test_getDurationEnvVarOrDefault	pkg/schema/definitions/schema_test.go	/^func Test_getDurationEnvVarOrDefault(t *testing.T) {$/;"	f
Test_includeFields	pkg/resources/common/formatter_test.go	/^func Test_includeFields(t *testing.T) {$/;"	f
Test_onChangeAPIService	pkg/schema/definitions/refresh_test.go	/^func Test_onChangeAPIService(t *testing.T) {$/;"	f
Test_onChangeCRD	pkg/schema/definitions/refresh_test.go	/^func Test_onChangeCRD(t *testing.T) {$/;"	f
Test_policyRuleIndex_clusterRoleBindingBySubject	pkg/accesscontrol/policy_rule_index_test.go	/^func Test_policyRuleIndex_clusterRoleBindingBySubject(t *testing.T) {$/;"	f
Test_policyRuleIndex_roleBindingBySubject	pkg/accesscontrol/policy_rule_index_test.go	/^func Test_policyRuleIndex_roleBindingBySubject(t *testing.T) {$/;"	f
Test_selfLink	pkg/resources/common/formatter_test.go	/^func Test_selfLink(t *testing.T) {$/;"	f
Test_startBackgroundRefresh	pkg/schema/definitions/refresh_test.go	/^func Test_startBackgroundRefresh(t *testing.T) {$/;"	f
Test_unformat	pkg/stores/proxy/unformatter_test.go	/^func Test_unformat(t *testing.T) {$/;"	f
TinyCA	pkg/ext/apiserver_suite_test.go	/^type TinyCA struct {$/;"	t
ToAPI	pkg/stores/partition/store.go	/^func ToAPI(schema *types.APISchema, obj runtime.Object, warnings []types.Warning, reservedFields map[string]bool) types.APIObject {$/;"	f
ToAPIEvent	pkg/stores/partition/store.go	/^func ToAPIEvent(apiOp *types.APIRequest, schema *types.APISchema, event watch.Event) types.APIEvent {$/;"	f
ToMiddleware	pkg/auth/filter.go	/^func ToMiddleware(auth Authenticator) Middleware {$/;"	f
ToSchemas	pkg/schema/converter/k8stonorman.go	/^func ToSchemas(crd v1.CustomResourceDefinitionClient, client discovery.DiscoveryInterface) (map[string]*types.APISchema, error) {$/;"	f
ToServer	pkg/server/cli/clicontext.go	/^func (c *Config) ToServer(ctx context.Context, sqlCache bool) (*server.Server, error) {$/;"	f
Token	pkg/stores/sqlpartition/queryparser/selector.go	/^type Token int$/;"	t
TokenLabel	pkg/podimpersonation/podimpersonation.go	/^	TokenLabel = "pod-impersonation.cattle.io\/token"$/;"	c
TransformBuilder	pkg/resources/virtual/virtual.go	/^type TransformBuilder struct {$/;"	t
TransformBuilder	pkg/stores/sqlproxy/proxy_store.go	/^type TransformBuilder interface {$/;"	t
TransformCommon	pkg/resources/virtual/common/common.go	/^func (d *DefaultFields) TransformCommon(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {$/;"	f
TransformEventObject	pkg/resources/virtual/events/events.go	/^func TransformEventObject(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {$/;"	f
TransformManagedCluster	pkg/resources/virtual/clusters/clusters.go	/^func TransformManagedCluster(obj *unstructured.Unstructured) (*unstructured.Unstructured, error) {$/;"	f
Type	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (Hook_DeletePolicy) Type() protoreflect.EnumType {$/;"	f
Type	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func (Hook_Event) Type() protoreflect.EnumType {$/;"	f
Type	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func (Metadata_Engine) Type() protoreflect.EnumType {$/;"	f
Type	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func (Status_Code) Type() protoreflect.EnumType {$/;"	f
Type	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func (TestRun_Status) Type() protoreflect.EnumType {$/;"	f
UnionAuthenticator	pkg/ext/apiserver_authentication.go	/^type UnionAuthenticator struct {$/;"	t
UnsafeGet	pkg/sqlcache/informer/shared_informer_hack.go	/^func UnsafeGet(object any, field string) any {$/;"	f
UnsafeSet	pkg/sqlcache/informer/shared_informer_hack.go	/^func UnsafeSet(object any, field string, value any) {$/;"	f
UnstructuredStore	pkg/stores/partition/store.go	/^type UnstructuredStore interface {$/;"	t
UnstructuredStore	pkg/stores/sqlpartition/partitioner.go	/^type UnstructuredStore interface {$/;"	t
Unwrap	pkg/sqlcache/db/client.go	/^func (e *QueryError) Unwrap() error {$/;"	f
Update	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) Update(ctx context.Context, name string, objInfo rest.UpdatedObjectInfo, createValidation rest.ValidateObjectFunc, updateValidation rest.ValidateObjectUpdateFunc, forceAllowCreate bool, options *metav1.UpdateOptions) (runtime.Object, bool, error) {$/;"	f
Update	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) Update(ctx context.Context, name string, objInfo rest.UpdatedObjectInfo, createValidation rest.ValidateObjectFunc, updateValidation rest.ValidateObjectUpdateFunc, forceAllowCreate bool, options *metav1.UpdateOptions) (runtime.Object, bool, error) {$/;"	f
Update	pkg/resources/userpreferences/localpref.go	/^func (l *localStore) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
Update	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Update	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Update	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Update	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Update	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Update(arg0 any) error {$/;"	f
Update	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Update(arg0 any) *gomock.Call {$/;"	f
Update	pkg/sqlcache/store/store.go	/^func (s *Store) Update(obj any) error {$/;"	f
Update	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) Update(apiOp *types.APIRequest, obj *unstructured.Unstructured, options metav1.UpdateOptions, subresources ...string) (*unstructured.Unstructured, error) {$/;"	f
Update	pkg/stores/metrics/metrics_store.go	/^func (s *Store) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
Update	pkg/stores/partition/store.go	/^func (s *Store) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
Update	pkg/stores/partition/store_test.go	/^func (m *mockStore) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Update	pkg/stores/proxy/error_wrapper.go	/^func (e *ErrorStore) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
Update	pkg/stores/proxy/proxy_store.go	/^func (s *Store) Update(apiOp *types.APIRequest, schema *types.APISchema, params types.APIObject, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Update	pkg/stores/proxy/unformatter.go	/^func (u *unformatterStore) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
Update	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) Update(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 types.APIObject, arg3 string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Update	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockUnstructuredStoreMockRecorder) Update(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
Update	pkg/stores/sqlpartition/store.go	/^func (s *Store) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
Update	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) Update(apiOp *types.APIRequest, schema *types.APISchema, data types.APIObject, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Update	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Update	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Update	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) Update(apiOp *types.APIRequest, schema *types.APISchema, params types.APIObject, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
Update	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Update(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions, arg3 ...string) (*unstructured.Unstructured, error) {$/;"	f
Update	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Update(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {$/;"	f
Update	pkg/stores/switchschema/store.go	/^func (e *Store) Update(apiOp *types.APIRequest, oldSchema *types.APISchema, data types.APIObject, id string) (types.APIObject, error) {$/;"	f
UpdateStatus	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {$/;"	f
UpdateStatus	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
UpdateStatus	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {$/;"	f
UpdateStatus	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
UpdateStatus	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {$/;"	f
UpdateStatus	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
UpdateStatus	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) UpdateStatus(arg0 context.Context, arg1 *unstructured.Unstructured, arg2 v1.UpdateOptions) (*unstructured.Unstructured, error) {$/;"	f
UpdateStatus	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) UpdateStatus(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
UpdatedObject	pkg/ext/utils_test.go	/^func (f *fakeUpdatedObjectInfo) UpdatedObject(ctx context.Context, oldObj runtime.Object) (runtime.Object, error) {$/;"	f
Upsert	pkg/sqlcache/db/client.go	/^func (c *client) Upsert(tx transaction.Client, stmt *sql.Stmt, key string, obj any, shouldEncrypt bool) error {$/;"	f
Upsert	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) Upsert(arg0 transaction.Client, arg1 *sql.Stmt, arg2 string, arg3 any, arg4 bool) error {$/;"	f
Upsert	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) Upsert(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {$/;"	f
Upsert	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) Upsert(arg0 transaction.Client, arg1 *sql.Stmt, arg2 string, arg3 any, arg4 bool) error {$/;"	f
Upsert	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) Upsert(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {$/;"	f
Upsert	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) Upsert(arg0 transaction.Client, arg1 *sql.Stmt, arg2 string, arg3 any, arg4 bool) error {$/;"	f
Upsert	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) Upsert(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {$/;"	f
Upsert	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) Upsert(arg0 transaction.Client, arg1 *sql.Stmt, arg2 string, arg3 any, arg4 bool) error {$/;"	f
Upsert	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) Upsert(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {$/;"	f
UserPreference	pkg/resources/userpreferences/userpreferences.go	/^type UserPreference struct {$/;"	t
ValidatedSelectorFromSet	pkg/stores/sqlpartition/queryparser/selector.go	/^func ValidatedSelectorFromSet(ls Set) (Selector, error) {$/;"	f
ValidatedSetSelector	pkg/stores/sqlpartition/queryparser/selector.go	/^type ValidatedSetSelector Set$/;"	t
Value	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^type Value struct {$/;"	t
Values	pkg/stores/sqlpartition/queryparser/selector.go	/^	Values$/;"	c
Values	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r *Requirement) Values() []string {$/;"	f
Verbs	pkg/attributes/attributes.go	/^func Verbs(s *types.APISchema) []string {$/;"	f
VerifyOptions	pkg/ext/apiserver_authentication.go	/^func (b *DefaultAuthenticator) VerifyOptions() (x509.VerifyOptions, bool) {$/;"	f
VerifyOptions	pkg/ext/apiserver_authentication.go	/^func (u *UnionAuthenticator) VerifyOptions() (x509.VerifyOptions, bool) {$/;"	f
Version	pkg/attributes/attributes.go	/^func Version(s *types.APISchema) string {$/;"	f
Version	pkg/version/version.go	/^	Version   = "dev"$/;"	v
VisitArbitrary	pkg/schema/definitions/visitor.go	/^func (s *schemaFieldVisitor) VisitArbitrary(arb *proto.Arbitrary) {$/;"	f
VisitArray	pkg/schema/definitions/visitor.go	/^func (s *schemaFieldVisitor) VisitArray(array *proto.Array) {$/;"	f
VisitKind	pkg/schema/definitions/visitor.go	/^func (s *schemaFieldVisitor) VisitKind(kind *proto.Kind) {$/;"	f
VisitMap	pkg/schema/definitions/visitor.go	/^func (s *schemaFieldVisitor) VisitMap(protoMap *proto.Map) {$/;"	f
VisitPrimitive	pkg/schema/definitions/visitor.go	/^func (s *schemaFieldVisitor) VisitPrimitive(primitive *proto.Primitive) {$/;"	f
VisitReference	pkg/schema/definitions/visitor.go	/^func (s *schemaFieldVisitor) VisitReference(ref proto.Reference) {$/;"	f
WarningBuffer	pkg/stores/proxy/proxy_store.go	/^type WarningBuffer []types.Warning$/;"	t
WarningBuffer	pkg/stores/sqlproxy/proxy_store.go	/^type WarningBuffer []types.Warning$/;"	t
Watch	pkg/aggregation/watch.go	/^func Watch(ctx context.Context, controller v1.SecretController, secretNamespace, secretName string, httpHandler http.Handler) {$/;"	f
Watch	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) Watch(_ context.Context, _ *metainternalversion.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) Watch(ctx context.Context, internaloptions *metainternalversion.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/resources/cluster/cluster.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/resources/counts/counts.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/resources/schemas/template.go	/^func (s *Store) Watch(apiOp *types.APIRequest, _ *types.APISchema, _ types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/sqlcache/informer/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *gomock.Call {$/;"	f
Watch	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *gomock.Call {$/;"	f
Watch	pkg/stores/metrics/metrics_client.go	/^func (r ResourceClientWithMetrics) Watch(apiOp *types.APIRequest, opts metav1.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/stores/metrics/metrics_store.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/partition/store.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/partition/store_test.go	/^func (m *mockStore) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan watch.Event, error) {$/;"	f
Watch	pkg/stores/proxy/error_wrapper.go	/^func (e *ErrorStore) Watch(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/proxy/proxy_store.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan watch.Event, error) {$/;"	f
Watch	pkg/stores/proxy/rbac_store.go	/^func (b *byNameOrNamespaceStore) Watch(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan watch.Event, error) {$/;"	f
Watch	pkg/stores/proxy/unformatter.go	/^func (u *unformatterStore) Watch(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/proxy/watch_refresh.go	/^func (w *WatchRefresh) Watch(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/selector/selector.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/sqlpartition/store.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
Watch	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan watch.Event, error) {$/;"	f
Watch	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *gomock.Call {$/;"	f
Watch	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) Watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest) (chan watch.Event, error) {$/;"	f
Watch	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func (c *Client) Watch(ctx context.Context, opts metav1.ListOptions) (k8sWatch.Interface, error) {$/;"	f
Watch	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (m *MockResourceInterface) Watch(arg0 context.Context, arg1 v1.ListOptions) (watch.Interface, error) {$/;"	f
Watch	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^func (mr *MockResourceInterfaceMockRecorder) Watch(arg0, arg1 any) *gomock.Call {$/;"	f
Watch	pkg/stores/switchschema/store.go	/^func (e *Store) Watch(apiOp *types.APIRequest, oldSchema *types.APISchema, wr types.WatchRequest) (chan types.APIEvent, error) {$/;"	f
WatchByPartitions	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (m *MockUnstructuredStore) WatchByPartitions(arg0 *types.APIRequest, arg1 *types.APISchema, arg2 types.WatchRequest, arg3 []partition.Partition) (chan watch.Event, error) {$/;"	f
WatchByPartitions	pkg/stores/sqlpartition/partition_mocks_test.go	/^func (mr *MockUnstructuredStoreMockRecorder) WatchByPartitions(arg0, arg1, arg2, arg3 any) *gomock.Call {$/;"	f
WatchByPartitions	pkg/stores/sqlpartition/store_test.go	/^func (m *mockStore) WatchByPartitions(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest, partitions []partition.Partition) (chan watch.Event, error) {$/;"	f
WatchByPartitions	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) WatchByPartitions(apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest, partitions []partition.Partition) (chan watch.Event, error) {$/;"	f
WatchNames	pkg/stores/proxy/proxy_store.go	/^func (s *Store) WatchNames(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest, names sets.String) (chan watch.Event, error) {$/;"	f
WatchNames	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) WatchNames(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest, names sets.Set[string]) (chan watch.Event, error) {$/;"	f
WatchRefresh	pkg/stores/proxy/watch_refresh.go	/^type WatchRefresh struct {$/;"	t
WebhookBackoff	pkg/auth/filter.go	/^	WebhookBackoff = wait.Backoff{$/;"	v
WebhookConfig	pkg/auth/cli/webhookcli.go	/^type WebhookConfig struct {$/;"	t
WebhookConfigForURL	pkg/auth/filter.go	/^func WebhookConfigForURL(url string) (string, error) {$/;"	f
WebhookMiddleware	pkg/auth/cli/webhookcli.go	/^func (w *WebhookConfig) WebhookMiddleware() (auth.Middleware, error) {$/;"	f
WithLegacy	pkg/schema/converter/discovery_test.go	/^func (f *fakeDiscovery) WithLegacy() discovery.DiscoveryInterface { return f }$/;"	f
WithLegacy	pkg/schema/definitions/handler_test.go	/^func (f *fakeDiscovery) WithLegacy() discovery.DiscoveryInterface { return f }$/;"	f
WithQPSAndBurst	pkg/client/factory.go	/^func WithQPSAndBurst(qps float32, burst int) FactoryOption {$/;"	f
WithTransaction	pkg/sqlcache/db/client.go	/^func (c *client) WithTransaction(ctx context.Context, forWriting bool, f WithTransactionFunction) error {$/;"	f
WithTransaction	pkg/sqlcache/informer/db_mocks_test.go	/^func (m *MockClient) WithTransaction(arg0 context.Context, arg1 bool, arg2 db.WithTransactionFunction) error {$/;"	f
WithTransaction	pkg/sqlcache/informer/db_mocks_test.go	/^func (mr *MockClientMockRecorder) WithTransaction(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
WithTransaction	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (m *MockClient) WithTransaction(arg0 context.Context, arg1 bool, arg2 db.WithTransactionFunction) error {$/;"	f
WithTransaction	pkg/sqlcache/informer/factory/db_mocks_test.go	/^func (mr *MockClientMockRecorder) WithTransaction(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
WithTransaction	pkg/sqlcache/informer/sql_mocks_test.go	/^func (m *MockStore) WithTransaction(arg0 context.Context, arg1 bool, arg2 db.WithTransactionFunction) error {$/;"	f
WithTransaction	pkg/sqlcache/informer/sql_mocks_test.go	/^func (mr *MockStoreMockRecorder) WithTransaction(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
WithTransaction	pkg/sqlcache/store/db_mocks_test.go	/^func (m *MockClient) WithTransaction(arg0 context.Context, arg1 bool, arg2 db.WithTransactionFunction) error {$/;"	f
WithTransaction	pkg/sqlcache/store/db_mocks_test.go	/^func (mr *MockClientMockRecorder) WithTransaction(arg0, arg1, arg2 any) *gomock.Call {$/;"	f
WithTransactionFunction	pkg/sqlcache/db/client.go	/^type WithTransactionFunction func(tx transaction.Client) error$/;"	t
Wrap	pkg/stores/metrics/metrics_client.go	/^func Wrap(resourceInterface dynamic.ResourceInterface, err error) (ResourceClientWithMetrics, error) {$/;"	f
WrapServer	pkg/schema/collection.go	/^func WrapServer(factory Factory, server *apiserver.Server) http.Handler {$/;"	f
WrappedRoundTripper	pkg/client/factory.go	/^func (a *addQuery) WrappedRoundTripper() http.RoundTripper {$/;"	f
_	pkg/client/factory.go	/^var _ utilnet.RoundTripperWrapper = (*addQuery)(nil)$/;"	v
_	pkg/ext/apiserver_authentication.go	/^var _ dynamiccertificates.CAContentProvider = &DefaultAuthenticator{}$/;"	v
_	pkg/ext/apiserver_authentication.go	/^var _ dynamiccertificates.CAContentProvider = &UnionAuthenticator{}$/;"	v
_	pkg/ext/apiserver_authentication.go	/^var _ dynamiccertificates.ControllerRunner = &DefaultAuthenticator{}$/;"	v
_	pkg/ext/apiserver_authentication.go	/^var _ dynamiccertificates.ControllerRunner = &UnionAuthenticator{}$/;"	v
_	pkg/ext/apiserver_authentication_test.go	/^var _ rest.Lister = (*authnTestStore)(nil)$/;"	v
_	pkg/ext/apiserver_authentication_test.go	/^var _ rest.Storage = (*authnTestStore)(nil)$/;"	v
_	pkg/ext/apiserver_authorization.go	/^var _ authorizer.Authorizer = (*AccessSetAuthorizer)(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ rest.Creater = (*testStore[*TestType, *TestTypeList])(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ rest.Getter = (*testStore[*TestType, *TestTypeList])(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ rest.GracefulDeleter = (*testStore[*TestType, *TestTypeList])(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ rest.Lister = (*testStore[*TestType, *TestTypeList])(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ rest.Storage = (*testStore[*TestType, *TestTypeList])(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ rest.Updater = (*testStore[*TestType, *TestTypeList])(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ runtime.Object = (*TestType)(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ runtime.Object = (*TestTypeList)(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ runtime.Object = (*TestTypeOther)(nil)$/;"	v
_	pkg/ext/fixtures_test.go	/^var _ runtime.Object = (*TestTypeOtherList)(nil)$/;"	v
_	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)$/;"	c
_	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)$/;"	c
_	pkg/schema/definitions/converter.go	/^var _ proto.Reference = (*openAPIV2Reference)(nil)$/;"	v
_	pkg/schema/definitions/converter.go	/^var _ proto.Schema = (*openAPIV2Reference)(nil)$/;"	v
_	pkg/server/server.go	/^var _ ExtensionAPIServer = (*ext.ExtensionAPIServer)(nil)$/;"	v
_	pkg/sqlcache/informer/indexer.go	/^var _ cache.Indexer = (*Indexer)(nil)$/;"	v
_	pkg/sqlcache/store/store.go	/^var _ cache.Store = (*Store)(nil)$/;"	v
_	pkg/stores/sqlpartition/queryparser/selector.go	/^var _ Selector = ValidatedSetSelector{}$/;"	v
_	pkg/stores/sqlproxy/tablelistconvert/client.go	/^var _ dynamic.ResourceInterface = (*Client)(nil)$/;"	v
a	pkg/stores/sqlpartition/queryparser/selector.go	/^	a              = Equals$/;"	v
accessStoreCache	pkg/accesscontrol/access_store.go	/^type accessStoreCache interface {$/;"	t
accesscontrol	pkg/accesscontrol/access_control.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/access_set.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/access_set_test.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/access_store.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/access_store_test.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/policy_rule_index.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/policy_rule_index_test.go	/^package accesscontrol$/;"	p
accesscontrol	pkg/accesscontrol/user_grants.go	/^package accesscontrol$/;"	p
activeKey	pkg/sqlcache/encryption/encrypt.go	/^func (m *Manager) activeKey() ([]byte, uint32, error) {$/;"	f
addAccess	pkg/accesscontrol/policy_rule_index.go	/^func addAccess(accessSet *AccessSet, namespace string, roleRef roleRef) {$/;"	f
addCounts	pkg/resources/counts/counts.go	/^func addCounts(itemCount ItemCount, ns string, summary summary.Summary) ItemCount {$/;"	f
addCustomResources	pkg/schema/converter/crd.go	/^func addCustomResources(crd apiextv1.CustomResourceDefinitionClient, schemas map[string]*types.APISchema) error {$/;"	f
addDescription	pkg/schema/converter/description.go	/^func addDescription(client discovery.DiscoveryInterface, schemas map[string]*types.APISchema) error {$/;"	f
addDiscovery	pkg/schema/converter/discovery.go	/^func addDiscovery(client discovery.DiscoveryInterface, schemasMap map[string]*types.APISchema) error {$/;"	f
addEvent	pkg/ext/fixtures_test.go	/^func (w *watcher) addEvent(event watch.Event) bool {$/;"	f
addEventLocked	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) addEventLocked(event watch.Event) {$/;"	f
addGenericPermissionsToSchema	pkg/resources/counts/counts_test.go	/^func addGenericPermissionsToSchema(schema *types.APISchema, verb string) {$/;"	f
addIDField	pkg/resources/virtual/common/common.go	/^func addIDField(raw *unstructured.Unstructured) *unstructured.Unstructured {$/;"	f
addIndexFields	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) addIndexFields(key string, obj any, tx transaction.Client) error {$/;"	f
addIndexFmt	pkg/sqlcache/informer/indexer.go	/^	addIndexFmt      = `INSERT INTO "%s_indices" (name, value, key) VALUES (?, ?, ?) ON CONFLICT DO NOTHING`$/;"	c
addKnownTypes	pkg/ext/apiserver.go	/^func addKnownTypes(scheme *runtime.Scheme) error {$/;"	f
addKnownTypesTest	pkg/ext/fixtures_test.go	/^func addKnownTypesTest(scheme *runtime.Scheme) error {$/;"	f
addLabels	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) addLabels(key string, obj any, tx transaction.Client) error {$/;"	f
addObject	pkg/summarycache/summarycache.go	/^func addObject(rel Relationship, obj interface{}) Relationship {$/;"	f
addQuery	pkg/client/factory.go	/^type addQuery struct {$/;"	t
addResourceAccess	pkg/accesscontrol/policy_rule_index.go	/^func addResourceAccess(accessSet *AccessSet, namespace string, rule rbacv1.PolicyRule) {$/;"	f
addResourceEventHandler	pkg/clustercache/controller.go	/^func (h *clusterCache) addResourceEventHandler(gvk schema2.GroupVersionKind, informer cache.SharedIndexInformer) {$/;"	f
addSelector	pkg/stores/selector/selector.go	/^func (s *Store) addSelector(apiOp *types.APIRequest) *types.APIRequest {$/;"	f
addSummary	pkg/resources/counts/counts.go	/^func addSummary(counts Summary, summary summary.Summary) Summary {$/;"	f
addSummaryFields	pkg/resources/virtual/common/common.go	/^func addSummaryFields(raw *unstructured.Unstructured, cache SummaryCache) (*unstructured.Unstructured, error) {$/;"	f
addTemplateBased	pkg/schema/converter/k8stonorman.go	/^func addTemplateBased(schemas map[string]*types.APISchema) {$/;"	f
addToCache	pkg/schema/factory.go	/^func (c *Collection) addToCache(access *accesscontrol.AccessSet, user user.Info, schemas *types.APISchemas) {$/;"	f
addToSchemeTest	pkg/ext/fixtures_test.go	/^	addToSchemeTest   = schemeBuilderTest.AddToScheme$/;"	v
addr	pkg/aggregation/listener.go	/^type addr string$/;"	t
adminConfigName	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) adminConfigName() string {$/;"	f
adminKubeConfig	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) adminKubeConfig(user user.Info, role *rbacv1.ClusterRole, namespace string) (*v1.ConfigMap, error) {$/;"	f
aggregation	pkg/aggregation/listener.go	/^package aggregation$/;"	p
aggregation	pkg/aggregation/server.go	/^package aggregation$/;"	p
aggregation	pkg/aggregation/watch.go	/^package aggregation$/;"	p
allowAll	pkg/aggregation/server.go	/^func allowAll(_, _ string) bool {$/;"	f
allowed	pkg/controllers/schema/schemas.go	/^func (h *handler) allowed(ctx context.Context, schema *types.APISchema) (bool, error) {$/;"	f
apiHandler	pkg/server/handler/apiserver.go	/^func (a *apiServer) apiHandler(apiFunc APIFunc) http.Handler {$/;"	f
apiRoot	pkg/server/handler/handlers.go	/^func apiRoot(sf schema.Factory, apiOp *types.APIRequest) {$/;"	f
apiServer	pkg/server/handler/apiserver.go	/^type apiServer struct {$/;"	t
apigroups	pkg/resources/apigroups/apigroup.go	/^package apigroups$/;"	p
apple	pkg/stores/partition/store_test.go	/^type apple struct {$/;"	t
apple	pkg/stores/sqlpartition/store_test.go	/^type apple struct {$/;"	t
applyTemplates	pkg/schema/factory.go	/^func (c *Collection) applyTemplates(schema *types.APISchema) {$/;"	f
assertFileHasPermissions	pkg/sqlcache/db/client_test.go	/^func assertFileHasPermissions(t *testing.T, fname string, wantPerms fs.FileMode) bool {$/;"	f
attributes	pkg/attributes/attributes.go	/^package attributes$/;"	p
augmentPod	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) augmentPod(pod *v1.Pod, sa *v1.ServiceAccount, secret *v1.Secret, imageOverride string) *v1.Pod {$/;"	f
auth	pkg/auth/filter.go	/^package auth$/;"	p
authAsAdmin	pkg/ext/apiserver_test.go	/^func authAsAdmin(req *http.Request) (*authenticator.Response, bool, error) {$/;"	f
authenticationConfigMapName	pkg/ext/apiserver_authentication.go	/^	authenticationConfigMapName      = "extension-apiserver-authentication"$/;"	c
authenticationConfigMapNamespace	pkg/ext/apiserver_authentication.go	/^	authenticationConfigMapNamespace = metav1.NamespaceSystem$/;"	c
authnTestStore	pkg/ext/apiserver_authentication_test.go	/^type authnTestStore struct {$/;"	t
authzAllowAll	pkg/ext/apiserver_test.go	/^func authzAllowAll(ctx context.Context, a authorizer.Attributes) (authorizer.Decision, string, error) {$/;"	f
authzTestStore	pkg/ext/apiserver_authorization_test.go	/^type authzTestStore struct {$/;"	t
baseNSSchema	pkg/stores/sqlproxy/proxy_store.go	/^	baseNSSchema = types.APISchema{$/;"	v
baseSchemaToDefinition	pkg/schema/definitions/converter.go	/^func baseSchemaToDefinition(schema types.APISchema) map[string]definition {$/;"	f
benchDecrypt	pkg/sqlcache/encryption/encrypt_test.go	/^func benchDecrypt(b *testing.B, size int) {$/;"	f
benchEncrypt	pkg/sqlcache/encryption/encrypt_test.go	/^func benchEncrypt(b *testing.B, size int) {$/;"	f
bigOne	pkg/ext/apiserver_suite_test.go	/^	bigOne        = big.NewInt(1)$/;"	v
binaryOperators	pkg/stores/sqlpartition/queryparser/selector.go	/^	binaryOperators = []string{$/;"	v
buf	pkg/sqlcache/encryption/encrypt_test.go	/^var buf = make([]byte, 8192)$/;"	v
buildBasePath	pkg/resources/common/formatter.go	/^func buildBasePath(gvr schema2.GroupVersionResource, namespace string, includeName string) string {$/;"	f
buildDefaultDiscovery	pkg/schema/definitions/handler_test.go	/^func buildDefaultDiscovery() (*fakeDiscovery, error) {$/;"	f
buildORClauseFromFilters	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) buildORClauseFromFilters(orFilters sqltypes.OrFilter, dbName string, joinTableIndexByLabelName map[string]int) (string, []any, error) {$/;"	f
buildSchemaDefinitionForModel	pkg/schema/definitions/handler.go	/^func buildSchemaDefinitionForModel(models proto.Models, gvk gvkModel) (schemaDefinition, error) {$/;"	f
buildSortLabelsClause	pkg/sqlcache/informer/listoption_indexer.go	/^func buildSortLabelsClause(labelName string, joinTableIndexByLabelName map[string]int, isAsc bool) (string, string, error) {$/;"	f
byID	pkg/stores/proxy/proxy_store.go	/^func (s *Store) byID(apiOp *types.APIRequest, schema *types.APISchema, namespace, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
byID	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) byID(apiOp *types.APIRequest, schema *types.APISchema, namespace, id string) (*unstructured.Unstructured, []types.Warning, error) {$/;"	f
byIDHandler	pkg/schema/definitions/handler.go	/^func (s *SchemaDefinitionHandler) byIDHandler(request *types.APIRequest) (types.APIObject, error) {$/;"	f
byNameOrNamespaceStore	pkg/stores/proxy/rbac_store.go	/^type byNameOrNamespaceStore struct {$/;"	t
c	pkg/stores/proxy/proxy_store_test.go	/^var c *watch.FakeWatcher$/;"	v
c	pkg/stores/sqlproxy/proxy_store_test.go	/^var c *watch.FakeWatcher$/;"	v
cacheDisableEnv	pkg/stores/partition/store.go	/^	cacheDisableEnv = "CATTLE_REQUEST_CACHE_DISABLED"$/;"	c
cacheKey	pkg/stores/partition/store.go	/^type cacheKey struct {$/;"	t
cacheSizeEnv	pkg/stores/partition/store.go	/^	cacheSizeEnv     = "CATTLE_REQUEST_CACHE_SIZE_INT"$/;"	c
calculateAccessSetID	pkg/schema/mock_test.go	/^func calculateAccessSetID(digest hash.Hash, verb string, gr schema.GroupResource, namespace string, name string) {$/;"	f
callAll	pkg/clustercache/controller.go	/^func callAll(handlers []interface{}, gvr schema2.GroupVersionKind, key string, obj, oldObj runtime.Object) (runtime.Object, error) {$/;"	f
canDownload	pkg/ui/handler.go	/^func (u *Handler) canDownload(url string) bool {$/;"	f
cancelCollection	pkg/clustercache/cancel_collection.go	/^type cancelCollection struct {$/;"	t
cbID	pkg/summarycache/summarycache.go	/^	cbID = 0$/;"	v
cellStringToCellAny	pkg/ext/utils.go	/^func cellStringToCellAny(cells []string) []any {$/;"	f
cli	pkg/auth/cli/webhookcli.go	/^package cli$/;"	p
cli	pkg/server/cli/clicontext.go	/^package cli$/;"	p
client	pkg/client/factory.go	/^package client$/;"	p
client	pkg/client/factory_test.go	/^package client$/;"	p
client	pkg/sqlcache/db/client.go	/^type client struct {$/;"	t
client	pkg/sqlcache/db/transaction/transaction.go	/^type client struct {$/;"	t
closeRowsOnError	pkg/sqlcache/db/client.go	/^func closeRowsOnError(rows Rows, err error) error {$/;"	f
cluster	pkg/resources/cluster/apply.go	/^package cluster$/;"	p
cluster	pkg/resources/cluster/cluster.go	/^package cluster$/;"	p
cluster	pkg/resources/cluster/cluster_type.go	/^package cluster$/;"	p
cluster	pkg/resources/cluster/rest.go	/^package cluster$/;"	p
clusterCache	pkg/clustercache/controller.go	/^type clusterCache struct {$/;"	t
clusterRoleBindingBySubjectIndexer	pkg/accesscontrol/policy_rule_index.go	/^func clusterRoleBindingBySubjectIndexer(kind string) func(crb *rbacv1.ClusterRoleBinding) ([]string, error) {$/;"	f
clusterRoleKind	pkg/accesscontrol/policy_rule_index.go	/^	clusterRoleKind = "ClusterRole"$/;"	c
clustercache	pkg/clustercache/cancel_collection.go	/^package clustercache$/;"	p
clustercache	pkg/clustercache/controller.go	/^package clustercache$/;"	p
clusters	pkg/resources/virtual/clusters/clusters.go	/^package clusters$/;"	p
clusters	pkg/resources/virtual/clusters/clusters_test.go	/^package clusters$/;"	p
codeLabel	pkg/metrics/metrics.go	/^	codeLabel     = "code"$/;"	c
colorMap	pkg/stores/partition/store_test.go	/^var colorMap = map[string]string{$/;"	v
colorMap	pkg/stores/sqlpartition/store_test.go	/^var colorMap = map[string]string{$/;"	v
common	pkg/resources/common/dynamiccolumns.go	/^package common$/;"	p
common	pkg/resources/common/formatter.go	/^package common$/;"	p
common	pkg/resources/common/formatter_test.go	/^package common$/;"	p
common	pkg/resources/virtual/common/common.go	/^package common$/;"	p
common	pkg/resources/virtual/common/testutil.go	/^package common$/;"	p
common	pkg/resources/virtual/common/util.go	/^package common$/;"	p
common	pkg/server/handler/apiserver.go	/^func (a *apiServer) common(rw http.ResponseWriter, req *http.Request) (*types.APIRequest, bool) {$/;"	f
commonIndexFields	pkg/stores/sqlproxy/proxy_store.go	/^	commonIndexFields = [][]string{$/;"	v
common_test	pkg/resources/virtual/common/common_test.go	/^package common_test$/;"	p
confDir	pkg/resources/userpreferences/localpref.go	/^func confDir() string {$/;"	f
confFile	pkg/resources/userpreferences/localpref.go	/^func confFile() string {$/;"	f
config	main.go	/^	config      stevecli.Config$/;"	v
constructQuery	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) constructQuery(lo *sqltypes.ListOptions, partitions []partition.Partition, namespace string, dbName string) (*QueryInfo, error) {$/;"	f
consume	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) consume(context ParserContext) (Token, string) {$/;"	f
continueParam	pkg/stores/partition/listprocessor/processor.go	/^	continueParam           = "continue"$/;"	c
continueParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	continueParam           = "continue"$/;"	c
convertError	pkg/ext/utils.go	/^func convertError(err error) error {$/;"	f
convertJSONSchemaProps	pkg/schema/definitions/converter.go	/^func convertJSONSchemaProps(props *apiextv1.JSONSchemaProps, path proto.Path, definitions map[string]definition) (definitionField, error) {$/;"	f
convertJSONSchemaPropsArray	pkg/schema/definitions/converter.go	/^func convertJSONSchemaPropsArray(props *apiextv1.JSONSchemaProps, path proto.Path, definitions map[string]definition) (definitionField, error) {$/;"	f
convertJSONSchemaPropsMap	pkg/schema/definitions/converter.go	/^func convertJSONSchemaPropsMap(props *apiextv1.JSONSchemaProps, path proto.Path, definitions map[string]definition) (definitionField, error) {$/;"	f
convertJSONSchemaPropsObject	pkg/schema/definitions/converter.go	/^func convertJSONSchemaPropsObject(props *apiextv1.JSONSchemaProps, path proto.Path, definitions map[string]definition) (definitionField, error) {$/;"	f
convertJSONSchemaPropsPrimitive	pkg/schema/definitions/converter.go	/^func convertJSONSchemaPropsPrimitive(props *apiextv1.JSONSchemaProps) definitionField {$/;"	f
convertJSONSchemaPropsToDefinition	pkg/schema/definitions/converter.go	/^func convertJSONSchemaPropsToDefinition(props apiextv1.JSONSchemaProps, path proto.Path) (map[string]definition, error) {$/;"	f
convertMetadataFields	pkg/resources/common/formatter.go	/^func convertMetadataFields(request *types.APIRequest, unstr *unstructured.Unstructured) {$/;"	f
convertToTable	pkg/ext/utils.go	/^func convertToTable[T runtime.Object](ctx context.Context, object runtime.Object, tableOptions runtime.Object, groupResource schema.GroupResource, columnDefs []metav1.TableColumnDefinition, convertFn ConvertFunc[T]) (*metav1.Table, error) {$/;"	f
converter	pkg/schema/converter/crd.go	/^package converter$/;"	p
converter	pkg/schema/converter/crd_test.go	/^package converter$/;"	p
converter	pkg/schema/converter/description.go	/^package converter$/;"	p
converter	pkg/schema/converter/description_test.go	/^package converter$/;"	p
converter	pkg/schema/converter/discovery.go	/^package converter$/;"	p
converter	pkg/schema/converter/discovery_test.go	/^package converter$/;"	p
converter	pkg/schema/converter/k8stonorman.go	/^package converter$/;"	p
converter	pkg/schema/converter/k8stonorman_test.go	/^package converter$/;"	p
counts	pkg/resources/counts/buffer.go	/^package counts$/;"	p
counts	pkg/resources/counts/buffer_test.go	/^package counts$/;"	p
counts	pkg/resources/counts/counts.go	/^package counts$/;"	p
countsBuffer	pkg/resources/counts/buffer.go	/^func countsBuffer(c chan Count) chan types.APIEvent {$/;"	f
counts_test	pkg/resources/counts/counts_test.go	/^package counts_test$/;"	p
crdToDefinition	pkg/schema/definitions/converter.go	/^func crdToDefinition(jsonSchemaProps *apiextv1.JSONSchemaProps, modelName string) (schemaDefinition, error) {$/;"	f
create	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) create(_ context.Context, _ *TestType, _ *metav1.CreateOptions) (*TestType, error) {$/;"	f
create	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) create(_ context.Context, obj *TestType, _ *metav1.CreateOptions) (*TestType, error) {$/;"	f
createApply	pkg/resources/cluster/apply.go	/^func (a *Apply) createApply(apiContext *types.APIRequest) (apply.Apply, error) {$/;"	f
createCacheAndFactory	pkg/sqlcache/integration_test.go	/^func (i *IntegrationSuite) createCacheAndFactory(fields [][]string, transformFunc cache.TransformFunc) (*factory.Cache, *factory.CacheFactory, error) {$/;"	f
createConfigMaps	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createConfigMaps(ctx context.Context, user user.Info, role *rbacv1.ClusterRole, pod *v1.Pod, podOptions *PodOptions, client kubernetes.Interface) error {$/;"	f
createFieldsIndexFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	createFieldsIndexFmt = `CREATE INDEX "%s_%s_index" ON "%s_fields"("%s")`$/;"	c
createFieldsTableFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	createFieldsTableFmt     = `CREATE TABLE "%s_fields" ($/;"	c
createGCMCypher	pkg/sqlcache/encryption/encrypt.go	/^func createGCMCypher(key []byte) (cipher.AEAD, error) {$/;"	f
createIndexFmt	pkg/sqlcache/informer/indexer.go	/^	createIndexFmt = `CREATE INDEX IF NOT EXISTS "%[1]s_indices_index" ON "%[1]s_indices"(name, value)`$/;"	c
createItemCount	pkg/resources/counts/buffer_test.go	/^func createItemCount(countTotal int) ItemCount {$/;"	f
createLabelsTableFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	createLabelsTableFmt = `CREATE TABLE IF NOT EXISTS "%s_labels" ($/;"	c
createLabelsTableIndexFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	createLabelsTableIndexFmt = `CREATE INDEX IF NOT EXISTS "%s_labels_index" ON "%s_labels"(label, value)`$/;"	c
createNamespace	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createNamespace(ctx context.Context, namespace string, client kubernetes.Interface) (*v1.Namespace, error) {$/;"	f
createPod	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createPod(ctx context.Context, user user.Info, role *rbacv1.ClusterRole, pod *v1.Pod, podOptions *PodOptions, client kubernetes.Interface) (*v1.Pod, error) {$/;"	f
createRecordingWatcher	pkg/ext/apiserver_test.go	/^func createRecordingWatcher(scheme *runtime.Scheme, gvr schema.GroupVersionResource, url string) (*recordingWatcher, error) {$/;"	f
createRequestHeaderConfig	pkg/ext/apiserver_authentication.go	/^func createRequestHeaderConfig(client kubernetes.Interface) (*authenticatorfactory.RequestHeaderConfig, error) {$/;"	f
createRole	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createRole(ctx context.Context, user user.Info, namespace string, client kubernetes.Interface) (*rbacv1.ClusterRole, error) {$/;"	f
createRoleBinding	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createRoleBinding(ctx context.Context, role *rbacv1.ClusterRole, serviceAccount *v1.ServiceAccount, client kubernetes.Interface) error {$/;"	f
createSecrets	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createSecrets(ctx context.Context, role *rbacv1.ClusterRole, pod *v1.Pod, podOptions *PodOptions, client kubernetes.Interface) error {$/;"	f
createServiceAccount	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) createServiceAccount(ctx context.Context, role *rbacv1.ClusterRole, client kubernetes.Interface, namespace string) (*v1.ServiceAccount, error) {$/;"	f
createTableFmt	pkg/sqlcache/informer/indexer.go	/^	createTableFmt = `CREATE TABLE IF NOT EXISTS "%[1]s_indices" ($/;"	c
createTableFmt	pkg/sqlcache/store/store.go	/^	createTableFmt  = `CREATE TABLE IF NOT EXISTS "%s" ($/;"	c
createWatchEvent	pkg/sqlcache/informer/synthetic_watcher.go	/^func createWatchEvent(event watch.EventType, u *unstructured.Unstructured) (watch.Event, error) {$/;"	f
customColumnsStore	pkg/ext/apiserver_test.go	/^type customColumnsStore struct {$/;"	t
db	pkg/sqlcache/db/client.go	/^package db$/;"	p
db	pkg/sqlcache/db/client_test.go	/^package db$/;"	p
db	pkg/sqlcache/db/db_mocks_test.go	/^package db$/;"	p
db	pkg/sqlcache/db/transaction_mocks_test.go	/^package db$/;"	p
db	pkg/sqlcache/db/utility.go	/^package db$/;"	p
debounce	pkg/debounce/refresher.go	/^package debounce$/;"	p
debounce	pkg/debounce/refresher_test.go	/^package debounce$/;"	p
debounceCounts	pkg/resources/counts/buffer.go	/^func debounceCounts(result chan types.APIEvent, input chan Count) {$/;"	f
debounceDuration	pkg/resources/counts/buffer.go	/^var debounceDuration = 5 * time.Second$/;"	v
debug	pkg/debug/cli.go	/^package debug$/;"	p
debugconfig	main.go	/^	debugconfig debug.Config$/;"	v
decodeHelm2	pkg/resources/formatters/formatter.go	/^func decodeHelm2(data string) (*rspb.Release, error) {$/;"	f
decodeHelm3	pkg/resources/formatters/formatter.go	/^func decodeHelm3(data string) (any, error) {$/;"	f
decodeParams	pkg/stores/proxy/proxy_store.go	/^func decodeParams(apiOp *types.APIRequest, target runtime.Object) error {$/;"	f
decodeParams	pkg/stores/sqlproxy/proxy_store.go	/^func decodeParams(apiOp *types.APIRequest, target runtime.Object) error {$/;"	f
decryptScan	pkg/sqlcache/db/client.go	/^func (c *client) decryptScan(rows Rows, shouldDecrypt bool) ([]byte, error) {$/;"	f
defaultBurst	pkg/client/factory.go	/^	defaultBurst int     = 100$/;"	c
defaultCacheSize	pkg/stores/partition/store.go	/^	defaultCacheSize = 1000$/;"	c
defaultDelay	pkg/schema/definitions/schema.go	/^	defaultDelay   = 2$/;"	c
defaultEncryptedResourceTypes	pkg/sqlcache/informer/factory/informer_factory.go	/^var defaultEncryptedResourceTypes = map[schema.GroupVersionKind]struct{}{$/;"	v
defaultFactoryOptions	pkg/client/factory.go	/^func defaultFactoryOptions() *factoryOptions {$/;"	f
defaultIndexNamespaced	pkg/sqlcache/informer/listoption_indexer.go	/^	defaultIndexNamespaced = "metadata.namespace"$/;"	v
defaultIndexedFields	pkg/sqlcache/informer/listoption_indexer.go	/^	defaultIndexedFields   = []string{"metadata.name", "metadata.creationTimestamp"}$/;"	v
defaultInitializeCacheFactory	pkg/stores/sqlproxy/proxy_store.go	/^func defaultInitializeCacheFactory() (CacheFactory, error) {$/;"	f
defaultLimit	pkg/stores/partition/listprocessor/processor.go	/^	defaultLimit            = 100000$/;"	c
defaultLimit	pkg/stores/sqlpartition/listprocessor/processor.go	/^	defaultLimit            = 100000$/;"	c
defaultPartition	pkg/sqlcache/integration_test.go	/^var defaultPartition = partition.Partition{$/;"	v
defaultPath	pkg/ui/handler.go	/^	defaultPath = ".\/ui"$/;"	c
defaultQPS	pkg/client/factory.go	/^	defaultQPS   float32 = 10000$/;"	c
defaultRefresh	pkg/schema/definitions/schema.go	/^	defaultRefresh = 10$/;"	c
defaultRefreshTime	pkg/sqlcache/informer/informer.go	/^var defaultRefreshTime = 5 * time.Second$/;"	v
defaultStore	pkg/schema/factory.go	/^func (c *Collection) defaultStore() types.Store {$/;"	f
definition	pkg/schema/definitions/schema.go	/^type definition struct {$/;"	t
definitionField	pkg/schema/definitions/schema.go	/^type definitionField struct {$/;"	t
definitions	pkg/schema/definitions/converter.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/converter_test.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/fixtures_test.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/handler.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/handler_test.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/refresh.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/refresh_test.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/schema.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/schema_test.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/visitor.go	/^package definitions$/;"	p
definitions	pkg/schema/definitions/visitor_test.go	/^package definitions$/;"	p
delayEnvVar	pkg/schema/definitions/schema.go	/^	delayEnvVar    = "CATTLE_CRD_REFRESH_DELAY_SECONDS"$/;"	c
delayUnit	pkg/schema/definitions/schema.go	/^	delayUnit      = time.Second$/;"	c
deleteByKey	pkg/sqlcache/store/store.go	/^func (s *Store) deleteByKey(key string) error {$/;"	f
deleteIndexFields	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) deleteIndexFields(key string, tx transaction.Client) error {$/;"	f
deleteIndicesFmt	pkg/sqlcache/informer/indexer.go	/^	deleteIndicesFmt = `DELETE FROM "%s_indices" WHERE key = ?`$/;"	c
deleteLabels	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) deleteLabels(key string, tx transaction.Client) error {$/;"	f
deleteLabelsStmtFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	deleteLabelsStmtFmt = `DELETE FROM "%s_labels" WHERE KEY = ?`$/;"	c
deleteStmtFmt	pkg/sqlcache/store/store.go	/^	deleteStmtFmt   = `DELETE FROM "%s" WHERE key = ?`$/;"	c
discoveryClient	pkg/resources/cluster/cluster.go	/^func discoveryClient(cg proxy.ClientGetter) discovery.DiscoveryInterface {$/;"	f
dummyWatch	pkg/sqlcache/informer/informer_test.go	/^type dummyWatch struct{}$/;"	t
ellipticCurve	pkg/ext/apiserver_suite_test.go	/^	ellipticCurve = elliptic.P256()$/;"	v
emptyAddresses	pkg/ext/apiserver.go	/^type emptyAddresses struct{}$/;"	t
encrypt	pkg/sqlcache/encryption/encrypt.go	/^func encrypt(aead cipher.AEAD, data []byte) ([]byte, []byte, error) {$/;"	f
encryption	pkg/sqlcache/encryption/encrypt.go	/^package encryption$/;"	p
encryption	pkg/sqlcache/encryption/encrypt_test.go	/^package encryption$/;"	p
endsWithBracket	pkg/stores/sqlpartition/listprocessor/processor.go	/^var endsWithBracket = regexp.MustCompile(`^(.+)\\[(.+)]$`)$/;"	v
ensureSortLabelsAreSelected	pkg/sqlcache/informer/listoption_indexer.go	/^func ensureSortLabelsAreSelected(lo *sqltypes.ListOptions) {$/;"	f
eq	pkg/stores/partition/listprocessor/processor.go	/^	eq    op = ""$/;"	c
er	pkg/proxy/error.go	/^	er = &errorResponder{}$/;"	v
errNamespaceRequired	pkg/stores/proxy/proxy_store.go	/^	errNamespaceRequired       = "metadata.namespace is required"$/;"	c
errNamespaceRequired	pkg/stores/sqlproxy/proxy_store.go	/^	errNamespaceRequired       = "metadata.namespace or apiOp.namespace are required"$/;"	c
errResourceVersionRequired	pkg/stores/proxy/proxy_store.go	/^	errResourceVersionRequired = "metadata.resourceVersion is required for update"$/;"	c
errResourceVersionRequired	pkg/stores/sqlproxy/proxy_store.go	/^	errResourceVersionRequired = "metadata.resourceVersion is required for update"$/;"	c
error	pkg/ext/utils.go	/^	fn := func(obj runtime.Object) error {$/;"	f
errorResponder	pkg/proxy/error.go	/^type errorResponder struct {$/;"	t
escapeBackslashDirective	pkg/sqlcache/informer/listoption_indexer.go	/^	escapeBackslashDirective = ` ESCAPE '\\'` \/\/ The leading space is crucial for unit tests only '$/;"	c
event	pkg/clustercache/controller.go	/^type event struct {$/;"	t
events	pkg/resources/virtual/events/events.go	/^package events$/;"	p
events_test	pkg/resources/virtual/events/events_test.go	/^package events_test$/;"	p
excludeFields	pkg/resources/common/formatter.go	/^func excludeFields(request *types.APIRequest, unstr *unstructured.Unstructured) {$/;"	f
excludeValues	pkg/resources/common/formatter.go	/^func excludeValues(request *types.APIRequest, unstr *unstructured.Unstructured) {$/;"	f
executeQuery	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) executeQuery(ctx context.Context, queryInfo *QueryInfo) (result *unstructured.UnstructuredList, total int, token string, err error) {$/;"	f
ext	pkg/ext/apiserver.go	/^package ext$/;"	p
ext	pkg/ext/apiserver_authentication.go	/^package ext$/;"	p
ext	pkg/ext/apiserver_authentication_test.go	/^package ext$/;"	p
ext	pkg/ext/apiserver_authorization.go	/^package ext$/;"	p
ext	pkg/ext/apiserver_authorization_test.go	/^package ext$/;"	p
ext	pkg/ext/apiserver_suite_test.go	/^package ext$/;"	p
ext	pkg/ext/apiserver_test.go	/^package ext$/;"	p
ext	pkg/ext/fixtures_test.go	/^package ext$/;"	p
ext	pkg/ext/utils.go	/^package ext$/;"	p
ext	pkg/ext/utils_test.go	/^package ext$/;"	p
extractSubFields	pkg/sqlcache/informer/listoption_indexer.go	/^func extractSubFields(fields string) []string {$/;"	f
factory	pkg/sqlcache/informer/factory/db_mocks_test.go	/^package factory$/;"	p
factory	pkg/sqlcache/informer/factory/dynamic_mocks_test.go	/^package factory$/;"	p
factory	pkg/sqlcache/informer/factory/informer_factory.go	/^package factory$/;"	p
factory	pkg/sqlcache/informer/factory/informer_factory_test.go	/^package factory$/;"	p
factory	pkg/sqlcache/informer/factory/k8s_cache_mocks_test.go	/^package factory$/;"	p
factory	pkg/sqlcache/informer/factory/transaction_mocks_tests.go	/^package factory$/;"	p
factoryOptions	pkg/client/factory.go	/^type factoryOptions struct {$/;"	t
failedToGetFromSliceFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	failedToGetFromSliceFmt = "[listoption indexer] failed to get subfield [%s] from slice items"$/;"	c
fake	pkg/accesscontrol/fake/AccessSetLookup.go	/^package fake$/;"	p
fake	pkg/schema/fake/factory.go	/^package fake$/;"	p
fakeClusterCache	pkg/resources/counts/counts_test.go	/^type fakeClusterCache struct {$/;"	t
fakeDiscovery	pkg/schema/converter/discovery_test.go	/^type fakeDiscovery struct {$/;"	t
fakeDiscovery	pkg/schema/definitions/handler_test.go	/^type fakeDiscovery struct {$/;"	t
fakeUpdatedObjectInfo	pkg/ext/utils_test.go	/^type fakeUpdatedObjectInfo struct {$/;"	t
feed	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func (w *tableConvertWatch) feed() {$/;"	f
feeder	pkg/stores/partition/parallel.go	/^func (p *ParallelPartitionLister) feeder(ctx context.Context, state listState, limit int, result chan []unstructured.Unstructured) {$/;"	f
fetchActiveDataKey	pkg/sqlcache/encryption/encrypt.go	/^func (m *Manager) fetchActiveDataKey() ([]byte, uint32, error) {$/;"	f
file_chart_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^var file_chart_proto_depIdxs = []int32{$/;"	v
file_chart_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^var file_chart_proto_goTypes = []any{$/;"	v
file_chart_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func file_chart_proto_init() {$/;"	f
file_chart_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^var file_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_chart_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^const file_chart_proto_rawDesc = "" +$/;"	c
file_chart_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^	file_chart_proto_rawDescData []byte$/;"	v
file_chart_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func file_chart_proto_rawDescGZIP() []byte {$/;"	f
file_chart_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^	file_chart_proto_rawDescOnce sync.Once$/;"	v
file_config_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^var file_config_proto_depIdxs = []int32{$/;"	v
file_config_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^var file_config_proto_goTypes = []any{$/;"	v
file_config_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func file_config_proto_init() {$/;"	f
file_config_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v
file_config_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^const file_config_proto_rawDesc = "" +$/;"	c
file_config_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^	file_config_proto_rawDescData []byte$/;"	v
file_config_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func file_config_proto_rawDescGZIP() []byte {$/;"	f
file_config_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^	file_config_proto_rawDescOnce sync.Once$/;"	v
file_hook_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^var file_hook_proto_depIdxs = []int32{$/;"	v
file_hook_proto_enumTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^var file_hook_proto_enumTypes = make([]protoimpl.EnumInfo, 2)$/;"	v
file_hook_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^var file_hook_proto_goTypes = []any{$/;"	v
file_hook_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func file_hook_proto_init() {$/;"	f
file_hook_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^var file_hook_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_hook_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^const file_hook_proto_rawDesc = "" +$/;"	c
file_hook_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	file_hook_proto_rawDescData []byte$/;"	v
file_hook_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func file_hook_proto_rawDescGZIP() []byte {$/;"	f
file_hook_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^	file_hook_proto_rawDescOnce sync.Once$/;"	v
file_info_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^var file_info_proto_depIdxs = []int32{$/;"	v
file_info_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^var file_info_proto_goTypes = []any{$/;"	v
file_info_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func file_info_proto_init() {$/;"	f
file_info_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^var file_info_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_info_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^const file_info_proto_rawDesc = "" +$/;"	c
file_info_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^	file_info_proto_rawDescData []byte$/;"	v
file_info_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func file_info_proto_rawDescGZIP() []byte {$/;"	f
file_info_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^	file_info_proto_rawDescOnce sync.Once$/;"	v
file_metadata_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^var file_metadata_proto_depIdxs = []int32{$/;"	v
file_metadata_proto_enumTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^var file_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v
file_metadata_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^var file_metadata_proto_goTypes = []any{$/;"	v
file_metadata_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func file_metadata_proto_init() {$/;"	f
file_metadata_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^var file_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 3)$/;"	v
file_metadata_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^const file_metadata_proto_rawDesc = "" +$/;"	c
file_metadata_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	file_metadata_proto_rawDescData []byte$/;"	v
file_metadata_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func file_metadata_proto_rawDescGZIP() []byte {$/;"	f
file_metadata_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^	file_metadata_proto_rawDescOnce sync.Once$/;"	v
file_release_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^var file_release_proto_depIdxs = []int32{$/;"	v
file_release_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^var file_release_proto_goTypes = []any{$/;"	v
file_release_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func file_release_proto_init() {$/;"	f
file_release_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^var file_release_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_release_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^const file_release_proto_rawDesc = "" +$/;"	c
file_release_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^	file_release_proto_rawDescData []byte$/;"	v
file_release_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func file_release_proto_rawDescGZIP() []byte {$/;"	f
file_release_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^	file_release_proto_rawDescOnce sync.Once$/;"	v
file_status_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^var file_status_proto_depIdxs = []int32{$/;"	v
file_status_proto_enumTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^var file_status_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v
file_status_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^var file_status_proto_goTypes = []any{$/;"	v
file_status_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func file_status_proto_init() {$/;"	f
file_status_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^var file_status_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_status_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^const file_status_proto_rawDesc = "" +$/;"	c
file_status_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	file_status_proto_rawDescData []byte$/;"	v
file_status_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func file_status_proto_rawDescGZIP() []byte {$/;"	f
file_status_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^	file_status_proto_rawDescOnce sync.Once$/;"	v
file_template_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^var file_template_proto_depIdxs = []int32{$/;"	v
file_template_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^var file_template_proto_goTypes = []any{$/;"	v
file_template_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func file_template_proto_init() {$/;"	f
file_template_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^var file_template_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_template_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^const file_template_proto_rawDesc = "" +$/;"	c
file_template_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^	file_template_proto_rawDescData []byte$/;"	v
file_template_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func file_template_proto_rawDescGZIP() []byte {$/;"	f
file_template_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^	file_template_proto_rawDescOnce sync.Once$/;"	v
file_test_run_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^var file_test_run_proto_depIdxs = []int32{$/;"	v
file_test_run_proto_enumTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^var file_test_run_proto_enumTypes = make([]protoimpl.EnumInfo, 1)$/;"	v
file_test_run_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^var file_test_run_proto_goTypes = []any{$/;"	v
file_test_run_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func file_test_run_proto_init() {$/;"	f
file_test_run_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^var file_test_run_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_test_run_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^const file_test_run_proto_rawDesc = "" +$/;"	c
file_test_run_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	file_test_run_proto_rawDescData []byte$/;"	v
file_test_run_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func file_test_run_proto_rawDescGZIP() []byte {$/;"	f
file_test_run_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^	file_test_run_proto_rawDescOnce sync.Once$/;"	v
file_test_suite_proto_depIdxs	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^var file_test_suite_proto_depIdxs = []int32{$/;"	v
file_test_suite_proto_goTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^var file_test_suite_proto_goTypes = []any{$/;"	v
file_test_suite_proto_init	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func file_test_suite_proto_init() {$/;"	f
file_test_suite_proto_msgTypes	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^var file_test_suite_proto_msgTypes = make([]protoimpl.MessageInfo, 1)$/;"	v
file_test_suite_proto_rawDesc	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^const file_test_suite_proto_rawDesc = "" +$/;"	c
file_test_suite_proto_rawDescData	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^	file_test_suite_proto_rawDescData []byte$/;"	v
file_test_suite_proto_rawDescGZIP	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func file_test_suite_proto_rawDescGZIP() []byte {$/;"	f
file_test_suite_proto_rawDescOnce	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^	file_test_suite_proto_rawDescOnce sync.Once$/;"	v
filterParam	pkg/stores/partition/listprocessor/processor.go	/^	filterParam             = "filter"$/;"	c
filterParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	filterParam             = "filter"$/;"	c
forVersion	pkg/schema/converter/crd.go	/^func forVersion(group, kind string, version v1.CustomResourceDefinitionVersion, schemasMap map[string]*types.APISchema) {$/;"	f
formatMatchTarget	pkg/sqlcache/informer/listoption_indexer.go	/^func formatMatchTarget(filter sqltypes.Filter) string {$/;"	f
formatMatchTargetWithFormatter	pkg/sqlcache/informer/listoption_indexer.go	/^func formatMatchTargetWithFormatter(match string, format string) string {$/;"	f
formatter	pkg/resources/common/formatter.go	/^func formatter(summarycache common.SummaryCache, asl accesscontrol.AccessSetLookup) types.Formatter {$/;"	f
formatters	pkg/resources/formatters/formatter.go	/^package formatters$/;"	p
formatters	pkg/resources/formatters/formatter_test.go	/^package formatters$/;"	p
fromBytes	pkg/sqlcache/db/client.go	/^func fromBytes(buf sql.RawBytes, typ reflect.Type) (reflect.Value, error) {$/;"	f
generateAggregatePartitions	pkg/stores/proxy/rbac_store.go	/^func generateAggregatePartitions(apiOp *types.APIRequest, schema *types.APISchema, verb string) ([]partition.Partition, bool) {$/;"	f
generateAggregatePartitions	pkg/stores/sqlpartition/partitioner.go	/^func generateAggregatePartitions(apiOp *types.APIRequest, schema *types.APISchema, verb string) ([]partition.Partition, bool) {$/;"	f
generatePartitionsByID	pkg/stores/proxy/rbac_store.go	/^func generatePartitionsByID(apiOp *types.APIRequest, schema *types.APISchema, verb string, id string) []partition.Partition {$/;"	f
generatePartitionsByID	pkg/stores/sqlpartition/partitioner.go	/^func generatePartitionsByID(apiOp *types.APIRequest, schema *types.APISchema, verb string, id string) []partition.Partition {$/;"	f
get	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) get(_ context.Context, name string, _ *metav1.GetOptions) (*TestType, error) {$/;"	f
get	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) get(_ context.Context, name string, _ *metav1.GetOptions) (*TestType, error) {$/;"	f
get	pkg/resources/userpreferences/localpref.go	/^func get() (map[string]string, error) {$/;"	f
getAPIErrorCode	pkg/metrics/metrics.go	/^func (m MetricLogger) getAPIErrorCode(err error) string {$/;"	f
getAccessID	pkg/stores/partition/store_test.go	/^func getAccessID(user, role string) string {$/;"	f
getAccessID	pkg/stores/sqlpartition/store_test.go	/^func getAccessID(user, role string) string {$/;"	f
getCRDs	pkg/schema/definitions/fixtures_test.go	/^func getCRDs() ([]*apiextv1.CustomResourceDefinition, error) {$/;"	f
getCacheKey	pkg/stores/partition/store.go	/^func (s *Store) getCacheKey(apiOp *types.APIRequest, opts *listprocessor.ListOptions) (cacheKey, error) {$/;"	f
getClusterRoleBindings	pkg/accesscontrol/policy_rule_index.go	/^func (p *policyRuleIndex) getClusterRoleBindings(subjectName string) []*rbacv1.ClusterRoleBinding {$/;"	f
getColumns	pkg/controllers/schema/schemas.go	/^func (h *handler) getColumns(ctx context.Context, schemas map[string]*types.APISchema) error {$/;"	f
getCount	pkg/resources/counts/counts.go	/^func (s *Store) getCount(apiOp *types.APIRequest) Count {$/;"	f
getDefinitionName	pkg/ext/apiserver.go	/^func getDefinitionName(scheme *runtime.Scheme, replacements map[string]string) func(string) (string, spec.Extensions) {$/;"	f
getDurationEnvVarOrDefault	pkg/schema/definitions/schema.go	/^func getDurationEnvVarOrDefault(envVar string, defaultVal int, unit time.Duration) time.Duration {$/;"	f
getEvents	pkg/ext/apiserver_test.go	/^func (w *recordingWatcher) getEvents() []watch.Event {$/;"	f
getField	pkg/sqlcache/informer/listoption_indexer.go	/^func getField(a any, field string) (any, error) {$/;"	f
getFieldFilter	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) getFieldFilter(filter sqltypes.Filter) (string, []any, error) {$/;"	f
getFieldForGVK	pkg/stores/sqlproxy/proxy_store.go	/^func getFieldForGVK(gvk schema.GroupVersionKind) [][]string {$/;"	f
getFieldsFromSchema	pkg/stores/sqlproxy/proxy_store.go	/^func getFieldsFromSchema(schema *types.APISchema) [][]string {$/;"	f
getInfo	pkg/resources/counts/counts.go	/^func getInfo(obj interface{}) (name string, namespace string, revision int, summaryResult summary.Summary, ok bool) {$/;"	f
getItemsSchema	pkg/schema/definitions/converter.go	/^func getItemsSchema(props *apiextv1.JSONSchemaProps) *apiextv1.JSONSchemaProps {$/;"	f
getJSONSchema	pkg/schema/definitions/handler_test.go	/^func getJSONSchema(crds []*apiextv1.CustomResourceDefinition, name, version string) *apiextv1.JSONSchemaProps {$/;"	f
getLabelFilter	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) getLabelFilter(index int, filter sqltypes.Filter, dbName string) (string, []any, error) {$/;"	f
getLimit	pkg/stores/partition/listprocessor/processor.go	/^func getLimit(apiOp *types.APIRequest) int {$/;"	f
getLimit	pkg/stores/sqlpartition/listprocessor/processor.go	/^func getLimit(apiOp *types.APIRequest) int {$/;"	f
getLocal	pkg/resources/cluster/cluster.go	/^func (s *Store) getLocal() types.APIObject {$/;"	f
getNamespaceFromResource	pkg/resources/common/formatter.go	/^func getNamespaceFromResource(obj types.APIObject) string {$/;"	f
getOpenAPIDefinitions	pkg/ext/fixtures_test.go	/^func getOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {$/;"	f
getPrimitiveType	pkg/schema/definitions/converter.go	/^func getPrimitiveType(typ string) string {$/;"	f
getRoleBindings	pkg/accesscontrol/policy_rule_index.go	/^func (p *policyRuleIndex) getRoleBindings(subjectName string) []*rbacv1.RoleBinding {$/;"	f
getRoleRefs	pkg/accesscontrol/access_store_test.go	/^func (p policyRulesMock) getRoleRefs(s string) subjectGrants {$/;"	f
getRoleRefs	pkg/accesscontrol/policy_rule_index.go	/^func (p *policyRuleIndex) getRoleRefs(subjectName string) subjectGrants {$/;"	f
getRules	pkg/accesscontrol/policy_rule_index.go	/^func (p *policyRuleIndex) getRules(namespace string, roleRef rbacv1.RoleRef) ([]rbacv1.PolicyRule, string) {$/;"	f
getStmtFmt	pkg/sqlcache/store/store.go	/^	getStmtFmt      = `SELECT object, objectnonce, dekid FROM "%s" WHERE key = ?`$/;"	c
getStore	pkg/stores/partition/store.go	/^func (s *Store) getStore(apiOp *types.APIRequest, schema *types.APISchema, verb, id string) (UnstructuredStore, error) {$/;"	f
getUser	pkg/ext/apiserver_authentication_test.go	/^func (t *authnTestStore) getUser() (user.Info, bool) {$/;"	f
getUserName	pkg/resources/userpreferences/localpref.go	/^func getUserName(apiOp *types.APIRequest) string {$/;"	f
groupKind	pkg/accesscontrol/policy_rule_index.go	/^	groupKind      = rbacv1.GroupKind$/;"	c
guardedInformer	pkg/sqlcache/informer/factory/informer_factory.go	/^type guardedInformer struct {$/;"	t
gvkExtensionGroup	pkg/schema/converter/k8stonorman.go	/^	gvkExtensionGroup   = "group"$/;"	c
gvkExtensionKind	pkg/schema/converter/k8stonorman.go	/^	gvkExtensionKind    = "kind"$/;"	c
gvkExtensionName	pkg/schema/converter/k8stonorman.go	/^	gvkExtensionName    = "x-kubernetes-group-version-kind"$/;"	c
gvkExtensionVersion	pkg/schema/converter/k8stonorman.go	/^	gvkExtensionVersion = "version"$/;"	c
gvkKey	pkg/stores/sqlproxy/proxy_store.go	/^func gvkKey(group, version, kind string) string {$/;"	f
gvkModel	pkg/schema/definitions/handler.go	/^type gvkModel struct {$/;"	t
gvrToPluralName	pkg/schema/converter/k8stonorman.go	/^func gvrToPluralName(gvr schema.GroupVersionResource) string {$/;"	f
handle	pkg/sqlcache/informer/shared_informer_test.go	/^func (l *testListener) handle(obj interface{}) {$/;"	f
handleAnyWatch	pkg/sqlcache/informer/synthetic_watcher_test.go	/^func handleAnyWatch(w watch.Interface,$/;"	f
handler	pkg/aggregation/watch.go	/^type handler struct {$/;"	t
handler	pkg/controllers/schema/schemas.go	/^type handler struct {$/;"	t
handler	pkg/server/handler/apiserver.go	/^package handler$/;"	p
handler	pkg/server/handler/handlers.go	/^package handler$/;"	p
handlerKey	pkg/schema/definitions/schema.go	/^	handlerKey     = "schema-definitions"$/;"	c
hasExpectedResults	pkg/resources/schemas/template_test.go	/^func hasExpectedResults(t *testing.T, expectedEvents []types.APIEvent, resultChan chan types.APIEvent, timeout time.Duration) {$/;"	f
hasLabelFilter	pkg/sqlcache/informer/listoption_indexer.go	/^func hasLabelFilter(filters []sqltypes.OrFilter) bool {$/;"	f
hasValue	pkg/stores/sqlpartition/queryparser/selector.go	/^func (r *Requirement) hasValue(value string) bool {$/;"	f
hash	pkg/accesscontrol/user_grants.go	/^func (u userGrants) hash() string {$/;"	f
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^package helmv2api$/;"	p
helmv2api	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^package helmv2api$/;"	p
ignore	pkg/resources/counts/counts.go	/^	ignore = map[string]bool{$/;"	v
ignoreDetail	pkg/stores/sqlpartition/queryparser/selector_test.go	/^	ignoreDetail = cmpopts.IgnoreFields(field.Error{}, "Detail")$/;"	v
impersonate	pkg/proxy/proxy.go	/^func impersonate(rw http.ResponseWriter, req *http.Request, prefix string, cfg *rest.Config) {$/;"	f
includeFields	pkg/resources/common/formatter.go	/^func includeFields(request *types.APIRequest, unstr *unstructured.Unstructured) {$/;"	f
indexOrZero	pkg/stores/partition/parallel.go	/^func indexOrZero(partitions []Partition, name string) int {$/;"	f
indexSubjects	pkg/accesscontrol/policy_rule_index.go	/^func indexSubjects(kind string, subjects []rbacv1.Subject) []string {$/;"	f
indexVersions	pkg/schema/converter/discovery.go	/^func indexVersions(groups []*metav1.APIGroup) map[string]string {$/;"	f
informer	pkg/sqlcache/informer/db_mocks_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/dynamic_mocks_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/indexer.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/indexer_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/informer.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/informer_mocks_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/informer_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/listoption_indexer.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/listoption_indexer_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/shared_informer_hack.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/shared_informer_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/sql_mocks_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/synthetic_watcher.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/synthetic_watcher_test.go	/^package informer$/;"	p
informer	pkg/sqlcache/informer/transaction_mocks_test.go	/^package informer$/;"	p
informerNameFromGVK	pkg/sqlcache/informer/informer.go	/^func informerNameFromGVK(gvk schema.GroupVersionKind) string {$/;"	f
informerObjectCachePerms	pkg/sqlcache/db/client.go	/^	informerObjectCachePerms fs.FileMode = 0o600$/;"	c
init	pkg/metrics/register.go	/^func init() {$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/chart.pb.go	/^func init() { file_chart_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/config.pb.go	/^func init() { file_config_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/hook.pb.go	/^func init() { file_hook_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/info.pb.go	/^func init() { file_info_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/metadata.pb.go	/^func init() { file_metadata_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/release.pb.go	/^func init() { file_release_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/status.pb.go	/^func init() { file_status_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/template.pb.go	/^func init() { file_template_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/test_run.pb.go	/^func init() { file_test_run_proto_init() }$/;"	f
init	pkg/resources/formatters/internal/legacytypes/helmv2api/test_suite.pb.go	/^func init() { file_test_suite_proto_init() }$/;"	f
init	pkg/stores/proxy/proxy_store.go	/^func init() {$/;"	f
init	pkg/stores/sqlproxy/proxy_store.go	/^func init() {$/;"	f
initializeNamespaceCache	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) initializeNamespaceCache() error {$/;"	f
insideSeparator	pkg/schema/mock_test.go	/^	insideSeparator  = "&"$/;"	c
internalSelector	pkg/stores/sqlpartition/queryparser/selector.go	/^type internalSelector []Requirement$/;"	t
internalServerErrorCode	pkg/schema/definitions/handler.go	/^	internalServerErrorCode = validation.ErrorCode{$/;"	v
isDone	pkg/stores/partition/parallel.go	/^func isDone(ctx context.Context) bool {$/;"	f
isIdentifierStartChar	pkg/stores/sqlpartition/queryparser/selector.go	/^func isIdentifierStartChar(ch byte) bool {$/;"	f
isLabelFilter	pkg/sqlcache/informer/listoption_indexer.go	/^func isLabelFilter(f *sqltypes.Filter) bool {$/;"	f
isLabelsFieldList	pkg/sqlcache/informer/listoption_indexer.go	/^func isLabelsFieldList(fields []string) bool {$/;"	f
isListOrGetable	pkg/controllers/schema/schemas.go	/^func isListOrGetable(schema *types.APISchema) bool {$/;"	f
isSpecialSymbol	pkg/stores/sqlpartition/queryparser/selector.go	/^func isSpecialSymbol(ch byte) bool {$/;"	f
isWhitespace	pkg/stores/sqlpartition/queryparser/selector.go	/^func isWhitespace(ch byte) bool {$/;"	f
k8sAPI	pkg/server/handler/handlers.go	/^func k8sAPI(sf schema.Factory, apiOp *types.APIRequest) {$/;"	f
k8sOpToRancherOp	pkg/stores/sqlpartition/listprocessor/processor.go	/^func k8sOpToRancherOp(k8sOp selection.Operator) (sqltypes.Op, bool, error) {$/;"	f
k8sRequirementToOrFilter	pkg/stores/sqlpartition/listprocessor/processor.go	/^func k8sRequirementToOrFilter(requirement queryparser.Requirement) (sqltypes.Filter, error) {$/;"	f
key	pkg/accesscontrol/access_set.go	/^type key struct {$/;"	t
key	pkg/sqlcache/encryption/encrypt.go	/^func (m *Manager) key(keyID uint32) ([]byte, error) {$/;"	f
keyLabel	pkg/podimpersonation/podimpersonation.go	/^	keyLabel   = "pod-impersonation.cattle.io\/key"$/;"	c
keySize	pkg/sqlcache/encryption/encrypt.go	/^	keySize = 32 \/\/ 32 for AES-256$/;"	c
labelSelectorRegex	pkg/stores/sqlpartition/queryparser/selector.go	/^	labelSelectorRegex        = regexp.MustCompile(`^metadata.labels(?:\\.\\w[-a-zA-Z0-9_.\/]*|\\[.*])$`)$/;"	v
limitParam	pkg/stores/partition/listprocessor/processor.go	/^	limitParam              = "limit"$/;"	c
limitParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	limitParam              = "limit"$/;"	c
list	pkg/stores/proxy/proxy_store.go	/^func (s *Store) list(apiOp *types.APIRequest, schema *types.APISchema, client dynamic.ResourceInterface) (*unstructured.UnstructuredList, error) {$/;"	f
listAndWatch	pkg/stores/proxy/proxy_store.go	/^func (s *Store) listAndWatch(apiOp *types.APIRequest, client dynamic.ResourceInterface, schema *types.APISchema, w types.WatchRequest, result chan watch.Event) {$/;"	f
listAndWatch	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) listAndWatch(apiOp *types.APIRequest, client dynamic.ResourceInterface, schema *types.APISchema, w types.WatchRequest, result chan watch.Event) {$/;"	f
listByIndexFmt	pkg/sqlcache/informer/indexer.go	/^	listByIndexFmt   = `SELECT object, objectnonce, dekid FROM "%[1]s"$/;"	c
listGVKModels	pkg/schema/definitions/handler.go	/^func listGVKModels(models proto.Models, groups *metav1.APIGroupList, crdCache wapiextv1.CustomResourceDefinitionCache) (map[string]gvkModel, error) {$/;"	f
listIndexValuesFmt	pkg/sqlcache/informer/indexer.go	/^	listIndexValuesFmt = `SELECT DISTINCT value FROM "%s_indices" WHERE name = ?`$/;"	c
listKeyByIndexFmt	pkg/sqlcache/informer/indexer.go	/^	listKeyByIndexFmt  = `SELECT DISTINCT key FROM "%s_indices" WHERE name = ? AND value = ?`$/;"	c
listKeysStmtFmt	pkg/sqlcache/store/store.go	/^	listKeysStmtFmt = `SELECT key FROM "%s"`$/;"	c
listPartition	pkg/stores/partition/store.go	/^func (s *Store) listPartition(ctx context.Context, apiOp *types.APIRequest, schema *types.APISchema, partition Partition,$/;"	f
listPool	pkg/controllers/schema/schemas.go	/^	listPool        = semaphore.NewWeighted(10)$/;"	v
listState	pkg/stores/partition/parallel.go	/^type listState struct {$/;"	t
listStmtFmt	pkg/sqlcache/store/store.go	/^	listStmtFmt     = `SELECT object, objectnonce, dekid FROM "%s"`$/;"	c
listprocessor	pkg/stores/partition/listprocessor/processor.go	/^package listprocessor$/;"	p
listprocessor	pkg/stores/partition/listprocessor/processor_test.go	/^package listprocessor$/;"	p
listprocessor	pkg/stores/sqlpartition/listprocessor/processor.go	/^package listprocessor$/;"	p
listprocessor	pkg/stores/sqlpartition/listprocessor/processor_test.go	/^package listprocessor$/;"	p
listprocessor	pkg/stores/sqlpartition/listprocessor/proxy_mocks_test.go	/^package listprocessor$/;"	p
loadTestYamlFile	pkg/resources/formatters/formatter_test.go	/^func loadTestYamlFile(t *testing.T, path string, into any) {$/;"	f
localStore	pkg/resources/userpreferences/localpref.go	/^type localStore struct {$/;"	t
lookahead	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) lookahead(context ParserContext) (Token, string) {$/;"	f
magicGzip	pkg/resources/formatters/formatter.go	/^	magicGzip         = []byte{0x1f, 0x8b, 0x08}       \/\/ gzip magic header$/;"	v
main	main.go	/^func main() {$/;"	f
main	main.go	/^package main$/;"	p
makeCRB	pkg/accesscontrol/policy_rule_index_test.go	/^func makeCRB(name string, roleRef rbacv1.RoleRef, subjects []rbacv1.Subject) *rbacv1.ClusterRoleBinding {$/;"	f
makeCSList	pkg/sqlcache/informer/synthetic_watcher_test.go	/^func makeCSList(objs ...v1.ComponentStatus) (*unstructured.UnstructuredList, error) {$/;"	f
makeCert	pkg/ext/apiserver_suite_test.go	/^func (c *TinyCA) makeCert(cfg certutil.Config) (CertPair, error) {$/;"	f
makeProcessedObject	pkg/sqlcache/informer/synthetic_watcher_test.go	/^func makeProcessedObject(eventName string, payload interface{}) processedObjectInfo {$/;"	f
makeRB	pkg/accesscontrol/policy_rule_index_test.go	/^func makeRB(namespace, name string, roleRef rbacv1.RoleRef, subjects []rbacv1.Subject) *rbacv1.RoleBinding {$/;"	f
makeSchema	pkg/resources/counts/counts_test.go	/^func makeSchema(resourceType string) *types.APISchema {$/;"	f
makeSchema	pkg/schema/factory_test.go	/^func makeSchema(resourceType string) *types.APISchema {$/;"	f
makeSummarizedObject	pkg/resources/counts/counts_test.go	/^func makeSummarizedObject(gvk schema2.GroupVersionKind, name string, namespace string, version string) *summary.SummarizedObject {$/;"	f
makeUpgradeTransport	pkg/proxy/proxy.go	/^func makeUpgradeTransport(config *rest.Config, rt http.RoundTripper) (proxy.UpgradeRequestRoundTripper, error) {$/;"	f
mapEquals	pkg/summarycache/summarycache.go	/^func mapEquals(left, right map[string]string) bool {$/;"	f
mapK8sOpToRancherOp	pkg/stores/sqlpartition/listprocessor/processor.go	/^var mapK8sOpToRancherOp = map[selection.Operator]sqltypes.Op{$/;"	v
mapToKind	pkg/schema/definitions/converter.go	/^func mapToKind(protoMap *proto.Map, models proto.Models) (*proto.Kind, error) {$/;"	f
matchFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	matchFmt                 = `%%%s%%`$/;"	c
matchesAll	pkg/stores/partition/listprocessor/processor.go	/^func matchesAll(obj map[string]interface{}, filters []OrFilter) bool {$/;"	f
matchesAny	pkg/stores/partition/listprocessor/processor.go	/^func matchesAny(obj map[string]interface{}, filter OrFilter) bool {$/;"	f
matchesOne	pkg/stores/partition/listprocessor/processor.go	/^func matchesOne(obj map[string]interface{}, filter Filter) bool {$/;"	f
matchesOneInList	pkg/stores/partition/listprocessor/processor.go	/^func matchesOneInList(obj []interface{}, filter Filter) bool {$/;"	f
maxWriteCount	pkg/sqlcache/encryption/encrypt.go	/^	maxWriteCount int64 = 1 << 32$/;"	v
methodLabel	pkg/metrics/metrics.go	/^	methodLabel   = "method"$/;"	c
metrics	pkg/metrics/metrics.go	/^package metrics$/;"	p
metrics	pkg/metrics/register.go	/^package metrics$/;"	p
metrics	pkg/stores/metrics/metrics_client.go	/^package metrics$/;"	p
metrics	pkg/stores/metrics/metrics_store.go	/^package metrics$/;"	p
metricsEnv	pkg/metrics/register.go	/^const metricsEnv = "CATTLE_PROMETHEUS_METRICS"$/;"	c
min	pkg/stores/sqlpartition/queryparser/selector_test.go	/^func min(l, r int) (m int) {$/;"	f
mockAccessSetLookup	pkg/schema/mock_test.go	/^type mockAccessSetLookup struct {$/;"	t
mockAccessSetLookup	pkg/stores/partition/store_test.go	/^type mockAccessSetLookup struct {$/;"	t
mockAccessSetLookup	pkg/stores/sqlpartition/store_test.go	/^type mockAccessSetLookup struct {$/;"	t
mockCache	pkg/stores/partition/store_test.go	/^type mockCache struct {$/;"	t
mockInformer	pkg/sqlcache/informer/informer_test.go	/^type mockInformer struct {$/;"	t
mockNamespaceCache	pkg/stores/partition/listprocessor/processor_test.go	/^type mockNamespaceCache struct{}$/;"	t
mockNamespaceCache	pkg/stores/partition/store_test.go	/^type mockNamespaceCache struct{}$/;"	t
mockNamespaceCache	pkg/stores/sqlpartition/store_test.go	/^type mockNamespaceCache struct{}$/;"	t
mockPartition	pkg/stores/partition/store_test.go	/^type mockPartition struct {$/;"	t
mockPartitioner	pkg/stores/partition/store_test.go	/^type mockPartitioner struct {$/;"	t
mockPartitioner	pkg/stores/sqlpartition/store_test.go	/^type mockPartitioner struct {$/;"	t
mockStore	pkg/stores/partition/store_test.go	/^type mockStore struct {$/;"	t
mockStore	pkg/stores/sqlpartition/store_test.go	/^type mockStore struct {$/;"	t
mockVersionedStore	pkg/stores/partition/store_test.go	/^type mockVersionedStore struct {$/;"	t
moveFromUnderscore	pkg/stores/proxy/proxy_store.go	/^func moveFromUnderscore(obj map[string]interface{}) map[string]interface{} {$/;"	f
moveFromUnderscore	pkg/stores/sqlproxy/proxy_store.go	/^func moveFromUnderscore(obj map[string]interface{}) map[string]interface{} {$/;"	f
moveToUnderscore	pkg/stores/partition/store.go	/^func moveToUnderscore(obj *unstructured.Unstructured, reservedFields map[string]bool) *unstructured.Unstructured {$/;"	f
nameOK	pkg/accesscontrol/access_set.go	/^func (a Access) nameOK(name string) bool {$/;"	f
namespaces	pkg/stores/partition/listprocessor/processor_test.go	/^var namespaces = map[string]*corev1.Namespace{$/;"	v
namespaces	pkg/stores/partition/store_test.go	/^var namespaces = map[string]*corev1.Namespace{$/;"	v
namespaces	pkg/stores/sqlpartition/store_test.go	/^var namespaces = map[string]*corev1.Namespace{$/;"	v
needToSync	pkg/controllers/schema/schemas.go	/^func (h *handler) needToSync() bool {$/;"	f
newAccessSet	pkg/accesscontrol/access_store.go	/^func (l *AccessStore) newAccessSet(info userGrants) *AccessSet {$/;"	f
newApple	pkg/stores/partition/store_test.go	/^func newApple(name string) apple {$/;"	f
newApple	pkg/stores/sqlpartition/store_test.go	/^func newApple(name string) apple {$/;"	f
newClient	pkg/client/factory.go	/^func newClient(ctx *types.APIRequest, cfg *rest.Config, s *types.APISchema, namespace string, impersonate bool, warningHandler rest.WarningHandler) (dynamic.ResourceInterface, error) {$/;"	f
newClient	pkg/resources/common/dynamiccolumns.go	/^func newClient(config *rest.Config) (*rest.RESTClient, error) {$/;"	f
newConfigMap	pkg/resources/formatters/formatter_test.go	/^func newConfigMap(owner string, data map[string]interface{}) *types.RawResource {$/;"	f
newDataEncryptionKey	pkg/sqlcache/encryption/encrypt.go	/^func (m *Manager) newDataEncryptionKey() ([]byte, uint32, error) {$/;"	f
newDefaultTestStore	pkg/ext/fixtures_test.go	/^func newDefaultTestStore() *testStore[*TestType, *TestTypeList] {$/;"	f
newDynamicClient	pkg/client/factory.go	/^func newDynamicClient(ctx *types.APIRequest, cfg *rest.Config, impersonate bool, warningHandler rest.WarningHandler) (dynamic.Interface, error) {$/;"	f
newDynamicRequestHeaderController	pkg/ext/apiserver_authentication.go	/^func newDynamicRequestHeaderController(client kubernetes.Interface) (*options.DynamicRequestHeaderController, error) {$/;"	f
newInformer	pkg/sqlcache/informer/factory/informer_factory.go	/^type newInformer func(ctx context.Context, client dynamic.ResourceInterface, fields [][]string, transform cache.TransformFunc, gvk schema.GroupVersionKind, db db.Client, shouldEncrypt bool, namespace bool, watchable bool) (*informer.Informer, error)$/;"	t
newInformer	pkg/sqlcache/informer/informer.go	/^var newInformer = cache.NewSharedIndexInformer$/;"	v
newMockAccessSetLookup	pkg/schema/mock_test.go	/^func newMockAccessSetLookup() *mockAccessSetLookup {$/;"	f
newPod	pkg/podimpersonation/podimpersonation_test.go	/^func newPod(env []v1.EnvVar) *v1.Pod {$/;"	f
newPolicyRuleIndex	pkg/accesscontrol/policy_rule_index.go	/^func newPolicyRuleIndex(user bool, rbac rbacv1controllers.Interface) *policyRuleIndex {$/;"	f
newPrivateKey	pkg/ext/apiserver_suite_test.go	/^func newPrivateKey() (crypto.Signer, error) {$/;"	f
newRequest	pkg/resources/formatters/formatter_test.go	/^func newRequest(value string) *types.APIRequest {$/;"	f
newRequest	pkg/stores/partition/store_test.go	/^func newRequest(query, username string) *types.APIRequest {$/;"	f
newRequest	pkg/stores/sqlpartition/store_test.go	/^func newRequest(query, username string) *types.APIRequest {$/;"	f
newSchemas	pkg/schema/factory.go	/^func newSchemas() (*types.APISchemas, error) {$/;"	f
newSecret	pkg/resources/formatters/formatter_test.go	/^func newSecret(owner string, data map[string]any) *types.RawResource {$/;"	f
newSyntheticWatcher	pkg/sqlcache/informer/synthetic_watcher.go	/^func newSyntheticWatcher(context context.Context, cancel context.CancelFunc) *SyntheticWatcher {$/;"	f
newTestListener	pkg/sqlcache/informer/shared_informer_test.go	/^func newTestListener(name string, resyncPeriod time.Duration, expected ...string) *testListener {$/;"	f
newV2Release	pkg/resources/formatters/formatter_test.go	/^func newV2Release() string {$/;"	f
newV2ReleaseWithoutGzip	pkg/resources/formatters/formatter_test.go	/^func newV2ReleaseWithoutGzip() string {$/;"	f
nonResourceKey	pkg/accesscontrol/access_set.go	/^type nonResourceKey struct {$/;"	t
normalizeConditions	pkg/resources/virtual/common/common.go	/^func normalizeConditions(raw *unstructured.Unstructured) {$/;"	f
notEq	pkg/stores/partition/listprocessor/processor.go	/^	notEq op = "!="$/;"	c
notOp	pkg/stores/partition/listprocessor/processor.go	/^	notOp = "!"$/;"	c
notOp	pkg/stores/sqlpartition/listprocessor/processor.go	/^	notOp = "!"$/;"	c
notRefreshedErrorCode	pkg/schema/definitions/handler.go	/^	notRefreshedErrorCode = validation.ErrorCode{$/;"	v
notify	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) notify(rel *summary.Relationship) {$/;"	f
nsOK	pkg/accesscontrol/access_set.go	/^func (a Access) nsOK(namespace string) bool {$/;"	f
objectHolder	pkg/sqlcache/informer/synthetic_watcher.go	/^type objectHolder struct {$/;"	t
observeAdd	pkg/accesscontrol/access_store_test.go	/^func (c *spyCache) observeAdd(k interface{}) {$/;"	f
ok	pkg/sqlcache/informer/shared_informer_test.go	/^func (l *testListener) ok() bool {$/;"	f
onCancel	pkg/debounce/refresher_test.go	/^func (r *refreshable) onCancel() {$/;"	f
onChangeAPIService	pkg/schema/definitions/refresh.go	/^func (r *refreshHandler) onChangeAPIService(key string, api *apiregv1.APIService) (*apiregv1.APIService, error) {$/;"	f
onChangeCRD	pkg/schema/definitions/refresh.go	/^func (r *refreshHandler) onChangeCRD(key string, crd *apiextv1.CustomResourceDefinition) (*apiextv1.CustomResourceDefinition, error) {$/;"	f
op	pkg/stores/partition/listprocessor/processor.go	/^type op string$/;"	t
opReg	pkg/stores/partition/listprocessor/processor.go	/^var opReg = regexp.MustCompile(`[!]?=`)$/;"	v
openAPIV2Reference	pkg/schema/definitions/converter.go	/^type openAPIV2Reference struct {$/;"	t
openAPIV2ToDefinition	pkg/schema/definitions/converter.go	/^func openAPIV2ToDefinition(protoSchema proto.Schema, models proto.Models, modelName string) (schemaDefinition, error) {$/;"	f
openapi_raw	pkg/schema/definitions/fixtures_test.go	/^const openapi_raw = `$/;"	c
orOp	pkg/stores/partition/listprocessor/processor.go	/^	orOp  = ","$/;"	c
orOp	pkg/stores/sqlpartition/listprocessor/processor.go	/^	orOp  = ","$/;"	c
outsideSeparator	pkg/schema/mock_test.go	/^	outsideSeparator = "%"$/;"	c
pageParam	pkg/stores/partition/listprocessor/processor.go	/^	pageParam               = "page"$/;"	c
pageParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	pageParam               = "page"$/;"	c
pageSizeParam	pkg/stores/partition/listprocessor/processor.go	/^	pageSizeParam           = "pagesize"$/;"	c
pageSizeParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	pageSizeParam           = "pagesize"$/;"	c
paramCodec	pkg/stores/proxy/proxy_store.go	/^	paramCodec  = runtime.NewParameterCodec(paramScheme)$/;"	v
paramCodec	pkg/stores/sqlproxy/proxy_store.go	/^	paramCodec  = runtime.NewParameterCodec(paramScheme)$/;"	v
paramScheme	pkg/stores/proxy/proxy_store.go	/^	paramScheme = runtime.NewScheme()$/;"	v
paramScheme	pkg/stores/sqlproxy/proxy_store.go	/^	paramScheme = runtime.NewScheme()$/;"	v
parse	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parse() (internalSelector, error) {$/;"	f
parse	pkg/stores/sqlpartition/queryparser/selector.go	/^func parse(selector string, path *field.Path) (internalSelector, error) {$/;"	f
parseFieldType	pkg/schema/definitions/converter.go	/^func parseFieldType(fieldType string) (string, string) {$/;"	f
parseIdentifiersList	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parseIdentifiersList() (sets.String, error) {$/;"	f
parseKeyAndInferOperator	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parseKeyAndInferOperator() (string, selection.Operator, error) {$/;"	f
parseNamespaceOrProjectFilters	pkg/stores/sqlpartition/listprocessor/processor.go	/^func parseNamespaceOrProjectFilters(ctx context.Context, projOrNS string, op sqltypes.Op, namespaceInformer Cache) ([]sqltypes.Filter, error) {$/;"	f
parseOperator	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parseOperator() (op selection.Operator, err error) {$/;"	f
parseRequirement	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parseRequirement() (*Requirement, error) {$/;"	f
parseSingleValue	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parseSingleValue() (sets.String, error) {$/;"	f
parseValues	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) parseValues() (sets.String, error) {$/;"	f
partialStorage	pkg/ext/apiserver_test.go	/^type partialStorage struct {$/;"	t
partition	pkg/sqlcache/partition/partition.go	/^package partition$/;"	p
partition	pkg/stores/partition/parallel.go	/^package partition$/;"	p
partition	pkg/stores/partition/store.go	/^package partition$/;"	p
partition	pkg/stores/partition/store_test.go	/^package partition$/;"	p
passthroughPartitions	pkg/stores/proxy/rbac_store.go	/^	passthroughPartitions = []partition.Partition{$/;"	v
passthroughPartitions	pkg/stores/sqlpartition/partitioner.go	/^	passthroughPartitions = []partition.Partition{$/;"	v
path	pkg/ui/handler.go	/^func (u *Handler) path() (path string, isURL bool) {$/;"	f
podimpersonation	pkg/podimpersonation/podimpersonation.go	/^package podimpersonation$/;"	p
podimpersonation	pkg/podimpersonation/podimpersonation_test.go	/^package podimpersonation$/;"	p
policyRuleIndex	pkg/accesscontrol/policy_rule_index.go	/^type policyRuleIndex struct {$/;"	t
policyRules	pkg/accesscontrol/access_store.go	/^type policyRules interface {$/;"	t
policyRulesMock	pkg/accesscontrol/access_store_test.go	/^type policyRulesMock struct {$/;"	t
preferredGroups	pkg/schema/converter/discovery.go	/^	preferredGroups = map[string]string{$/;"	v
preferredTypeExists	pkg/controllers/schema/schemas.go	/^func preferredTypeExists(schema *types.APISchema, schemas map[string]*types.APISchema) bool {$/;"	f
preferredVersionOverride	pkg/schema/converter/discovery.go	/^	preferredVersionOverride = map[string]string{$/;"	v
prepareComparisonParameters	pkg/sqlcache/informer/listoption_indexer.go	/^func prepareComparisonParameters(op sqltypes.Op, target string) (string, float64, error) {$/;"	f
prependPath	pkg/proxy/proxy.go	/^func prependPath(prefix string, h http.Handler) http.Handler {$/;"	f
process	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) process(obj runtime.Object) (*summary.SummarizedObject, []*summary.Relationship) {$/;"	f
processedObjectInfo	pkg/sqlcache/informer/synthetic_watcher_test.go	/^type processedObjectInfo struct {$/;"	t
projectIDFieldLabel	pkg/stores/partition/listprocessor/processor.go	/^	projectIDFieldLabel     = "field.cattle.io\/projectId"$/;"	c
projectIDFieldLabel	pkg/stores/sqlpartition/listprocessor/processor.go	/^	projectIDFieldLabel     = "field.cattle.io\/projectId"$/;"	c
projectsOrNamespacesVar	pkg/stores/partition/listprocessor/processor.go	/^	projectsOrNamespacesVar = "projectsornamespaces"$/;"	c
projectsOrNamespacesVar	pkg/stores/sqlpartition/listprocessor/processor.go	/^	projectsOrNamespacesVar = "projectsornamespaces"$/;"	c
prometheusMetrics	pkg/metrics/metrics.go	/^var prometheusMetrics = false$/;"	v
protoArbitrary	pkg/schema/definitions/visitor_test.go	/^	protoArbitrary = proto.Arbitrary{$/;"	v
protoArray	pkg/schema/definitions/visitor_test.go	/^	protoArray = proto.Array{$/;"	v
protoKind	pkg/schema/definitions/visitor_test.go	/^	protoKind = proto.Kind{$/;"	v
protoMap	pkg/schema/definitions/visitor_test.go	/^	protoMap = proto.Map{$/;"	v
protoPrimitive	pkg/schema/definitions/visitor_test.go	/^	protoPrimitive = proto.Primitive{$/;"	v
protoPrimitiveInt	pkg/schema/definitions/visitor_test.go	/^	protoPrimitiveInt = proto.Primitive{$/;"	v
protoPrimitiveNumber	pkg/schema/definitions/visitor_test.go	/^	protoPrimitiveNumber = proto.Primitive{$/;"	v
protoRef	pkg/schema/definitions/visitor_test.go	/^	protoRef = openAPIV2Reference{$/;"	v
protoRefNoSubSchema	pkg/schema/definitions/visitor_test.go	/^	protoRefNoSubSchema = openAPIV2Reference{$/;"	v
provider	pkg/resources/cluster/cluster.go	/^func provider(ctx context.Context, cg proxy.ClientGetter) string {$/;"	f
proxy	pkg/proxy/error.go	/^package proxy$/;"	p
proxy	pkg/proxy/proxy.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/error_wrapper.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/proxy_store.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/proxy_store_test.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/rbac_store.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/rbac_store_test.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/unformatter.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/unformatter_test.go	/^package proxy$/;"	p
proxy	pkg/stores/proxy/watch_refresh.go	/^package proxy$/;"	p
proxyHeaders	pkg/proxy/proxy.go	/^func proxyHeaders(handler http.Handler) http.Handler {$/;"	f
pruneNullValues	pkg/resources/formatters/formatter_test.go	/^func pruneNullValues(m map[string]any) {$/;"	f
purgeUserRecords	pkg/schema/factory.go	/^func (c *Collection) purgeUserRecords(id string) {$/;"	f
queryhelper	pkg/stores/queryhelper/safesplit.go	/^package queryhelper$/;"	p
queryparser	pkg/stores/sqlpartition/queryparser/labels.go	/^package queryparser$/;"	p
queryparser	pkg/stores/sqlpartition/queryparser/selector.go	/^package queryparser$/;"	p
queryparser	pkg/stores/sqlpartition/queryparser/selector_test.go	/^package queryparser$/;"	p
queryparser	pkg/stores/sqlpartition/queryparser/zz_generated.deepcopy.go	/^package queryparser$/;"	p
queueRefresh	pkg/controllers/schema/schemas.go	/^func (h *handler) queueRefresh() {$/;"	f
rancherSchema	pkg/resources/userpreferences/localpref.go	/^	rancherSchema = "management.cattle.io.preference"$/;"	v
rawCRDs	pkg/schema/definitions/fixtures_test.go	/^	rawCRDs = `apiVersion: apiextensions.k8s.io\/v1$/;"	v
rbacGroup	pkg/accesscontrol/policy_rule_index.go	/^	rbacGroup = rbacv1.GroupName$/;"	c
rbacPartitioner	pkg/stores/proxy/rbac_store.go	/^type rbacPartitioner struct {$/;"	t
rbacPartitioner	pkg/stores/sqlpartition/partitioner.go	/^type rbacPartitioner struct {$/;"	t
read	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) read() (b byte) {$/;"	f
receive	pkg/sqlcache/informer/synthetic_watcher.go	/^func (rw *SyntheticWatcher) receive(client dynamic.ResourceInterface, options metav1.ListOptions, interval time.Duration) {$/;"	f
receiveUntil	pkg/stores/proxy/proxy_store_test.go	/^func receiveUntil(wc chan watch.Event, d time.Duration) error {$/;"	f
receiveUntil	pkg/stores/sqlproxy/proxy_store_test.go	/^func receiveUntil(wc chan watch.Event, d time.Duration) error {$/;"	f
receiveWithTimeout	pkg/debounce/refresher_test.go	/^func receiveWithTimeout(channel chan struct{}, timeout time.Duration) error {$/;"	f
receiveWithTimeout	pkg/resources/counts/buffer_test.go	/^func receiveWithTimeout(input chan types.APIEvent, duration time.Duration) (*types.APIEvent, error) {$/;"	f
receiveWithTimeout	pkg/resources/counts/counts_test.go	/^func receiveWithTimeout(input chan types.APIEvent, duration time.Duration) (*types.APIEvent, error) {$/;"	f
receiveWithTimeout	pkg/schema/definitions/refresh_test.go	/^func receiveWithTimeout(channel chan struct{}, timeout time.Duration) error {$/;"	f
recordingWatcher	pkg/ext/apiserver_test.go	/^type recordingWatcher struct {$/;"	t
ref	pkg/podimpersonation/podimpersonation.go	/^func ref(role *rbacv1.ClusterRole) []metav1.OwnerReference {$/;"	f
refersTo	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) refersTo(summarized *summary.SummarizedObject, rel *summary.Relationship) bool {$/;"	f
refresh	pkg/schema/converter/discovery.go	/^func refresh(gv schema.GroupVersion, groupToPreferredVersion map[string]string, resources *metav1.APIResourceList, schemasMap map[string]*types.APISchema) error {$/;"	f
refreshAll	pkg/controllers/schema/schemas.go	/^func (h *handler) refreshAll(ctx context.Context) error {$/;"	f
refreshEnvVar	pkg/schema/definitions/schema.go	/^	refreshEnvVar  = "CATTLE_BACKGROUND_REFRESH_MINUTES"$/;"	c
refreshHandler	pkg/schema/definitions/refresh.go	/^type refreshHandler struct {$/;"	t
refreshUnit	pkg/schema/definitions/schema.go	/^	refreshUnit    = time.Minute$/;"	c
refreshable	pkg/debounce/refresher_test.go	/^type refreshable struct {$/;"	t
refreshable	pkg/schema/definitions/refresh_test.go	/^type refreshable struct {$/;"	t
relEquals	pkg/summarycache/summarycache.go	/^func relEquals(left, right *summary.Relationship) bool {$/;"	f
relationshipIndex	pkg/summarycache/summarycache.go	/^	relationshipIndex = "relationshipIndex"$/;"	c
relationshipIndexer	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) relationshipIndexer(obj interface{}) (result []string, err error) {$/;"	f
removeCounts	pkg/resources/counts/counts.go	/^func removeCounts(itemCount ItemCount, ns string, summary summary.Summary) ItemCount {$/;"	f
removeOldRecords	pkg/schema/factory.go	/^func (c *Collection) removeOldRecords(access *accesscontrol.AccessSet, user user.Info) {$/;"	f
removeSummary	pkg/resources/counts/counts.go	/^func removeSummary(counts Summary, summary summary.Summary) Summary {$/;"	f
replaceByKey	pkg/sqlcache/store/store.go	/^func (s *Store) replaceByKey(objects map[string]any) error {$/;"	f
reqEquals	pkg/summarycache/summarycache.go	/^func reqEquals(left, right []metav1.LabelSelectorRequirement) bool {$/;"	f
resolveNamespace	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) resolveNamespace(sourceNamespace, toNamespace string, gvk runtimeschema.GroupVersionKind) string {$/;"	f
resourceAccessSet	pkg/accesscontrol/access_set.go	/^type resourceAccessSet map[Access]bool$/;"	t
resourceLabel	pkg/metrics/metrics.go	/^	resourceLabel = "resource"$/;"	c
resourceType	pkg/resources/schemas/template_test.go	/^const resourceType = "schemas"$/;"	c
resources	pkg/resources/schema.go	/^package resources$/;"	p
returnErr	pkg/stores/proxy/proxy_store.go	/^func returnErr(err error, c chan watch.Event) {$/;"	f
returnErr	pkg/stores/sqlproxy/proxy_store.go	/^func returnErr(err error, c chan watch.Event) {$/;"	f
reverseRel	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) reverseRel(summarized *summary.SummarizedObject, rel summary.Relationship) Relationship {$/;"	f
revisionParam	pkg/stores/partition/listprocessor/processor.go	/^	revisionParam           = "revision"$/;"	c
revisionParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	revisionParam           = "revision"$/;"	c
roleBindingBySubjectIndexer	pkg/accesscontrol/policy_rule_index.go	/^func roleBindingBySubjectIndexer(key string) func(rb *rbacv1.RoleBinding) ([]string, error) {$/;"	f
roleKind	pkg/accesscontrol/policy_rule_index.go	/^	roleKind        = "Role"$/;"	c
roleLabel	pkg/podimpersonation/podimpersonation.go	/^	roleLabel  = "pod-impersonation.cattle.io\/cluster-role"$/;"	c
roleRef	pkg/accesscontrol/user_grants.go	/^type roleRef struct {$/;"	t
router	pkg/server/router/router.go	/^package router$/;"	p
rowToObject	pkg/stores/proxy/proxy_store.go	/^func rowToObject(obj *unstructured.Unstructured) {$/;"	f
rowToObject	pkg/stores/sqlproxy/proxy_store.go	/^func rowToObject(obj *unstructured.Unstructured) {$/;"	f
rowToObject	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func rowToObject(obj *unstructured.Unstructured) {$/;"	f
run	main.go	/^func run(_ *cli.Context) error {$/;"	f
runAfterDelete	pkg/sqlcache/store/store.go	/^func (s *Store) runAfterDelete(key string, txC transaction.Client) error {$/;"	f
runAfterUpsert	pkg/sqlcache/store/store.go	/^func (s *Store) runAfterUpsert(key string, obj any, txC transaction.Client) error {$/;"	f
runSchemaTest	pkg/schema/factory_test.go	/^func runSchemaTest(t *testing.T, config schemaTestConfig, lookup *mockAccessSetLookup, collection *Collection, testUser user.Info) {$/;"	f
rv2	pkg/resources/formatters/formatter_test.go	/^var rv2 = rspb.Release{$/;"	v
safeListIndexFuncValues	pkg/sqlcache/informer/indexer.go	/^func (i *Indexer) safeListIndexFuncValues(indexName string) ([]string, error) {$/;"	f
safeSort	pkg/stores/sqlpartition/queryparser/selector.go	/^func safeSort(in []string) []string {$/;"	f
satisfiedExpectations	pkg/sqlcache/informer/shared_informer_test.go	/^func (l *testListener) satisfiedExpectations() bool {$/;"	f
scan	pkg/stores/sqlpartition/queryparser/selector.go	/^func (p *Parser) scan() {$/;"	f
scanIDOrKeyword	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) scanIDOrKeyword() (tok Token, lit string) {$/;"	f
scanQuotedString	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) scanQuotedString(delim byte) (tok Token, lit string) {$/;"	f
scanSpecialSymbol	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) scanSpecialSymbol() (Token, string) {$/;"	f
schema	pkg/controllers/schema/schemas.go	/^package schema$/;"	p
schema	pkg/schema/collection.go	/^package schema$/;"	p
schema	pkg/schema/factory.go	/^package schema$/;"	p
schema	pkg/schema/factory_test.go	/^package schema$/;"	p
schema	pkg/schema/mock_test.go	/^package schema$/;"	p
schemaChangeNotifier	pkg/resources/schemas/template.go	/^func schemaChangeNotifier(ctx context.Context, factory schema.Factory) func(ctx context.Context) (chan interface{}, error) {$/;"	f
schemaDefinition	pkg/schema/definitions/schema.go	/^type schemaDefinition struct {$/;"	t
schemaFieldVisitor	pkg/schema/definitions/visitor.go	/^type schemaFieldVisitor struct {$/;"	t
schemaTestConfig	pkg/schema/factory_test.go	/^type schemaTestConfig struct {$/;"	t
schema_ext_apis_extcattleio_v1_TestType	pkg/ext/fixtures_test.go	/^func schema_ext_apis_extcattleio_v1_TestType(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_ext_apis_extcattleio_v1_TestTypeList	pkg/ext/fixtures_test.go	/^func schema_ext_apis_extcattleio_v1_TestTypeList(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_ext_apis_extcattleio_v1_TestTypeOther	pkg/ext/fixtures_test.go	/^func schema_ext_apis_extcattleio_v1_TestTypeOther(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_ext_apis_extcattleio_v1_TestTypeOtherList	pkg/ext/fixtures_test.go	/^func schema_ext_apis_extcattleio_v1_TestTypeOtherList(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_k8sio_apimachinery_pkg_runtime_RawExtension	pkg/ext/fixtures_test.go	/^func schema_k8sio_apimachinery_pkg_runtime_RawExtension(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_k8sio_apimachinery_pkg_runtime_TypeMeta	pkg/ext/fixtures_test.go	/^func schema_k8sio_apimachinery_pkg_runtime_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_k8sio_apimachinery_pkg_runtime_Unknown	pkg/ext/fixtures_test.go	/^func schema_k8sio_apimachinery_pkg_runtime_Unknown(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_k8sio_apimachinery_pkg_version_Info	pkg/ext/fixtures_test.go	/^func schema_k8sio_apimachinery_pkg_version_Info(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_APIGroup	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_APIGroup(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_APIGroupList	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_APIGroupList(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_APIResource	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_APIResource(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_APIResourceList	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_APIResourceList(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_APIVersions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_APIVersions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_ApplyOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_ApplyOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Condition	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Condition(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_CreateOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_CreateOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_DeleteOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_DeleteOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Duration	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Duration(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_FieldsV1	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_FieldsV1(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GetOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GetOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GroupKind	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GroupKind(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GroupResource	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GroupResource(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GroupVersion	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GroupVersion(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GroupVersionForDiscovery	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GroupVersionForDiscovery(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GroupVersionKind	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GroupVersionKind(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_GroupVersionResource	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_GroupVersionResource(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_InternalEvent	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_InternalEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_LabelSelector	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_LabelSelector(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_LabelSelectorRequirement	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_LabelSelectorRequirement(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_List	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_List(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_ListMeta	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_ListMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_ListOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_ListOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_ManagedFieldsEntry	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_ManagedFieldsEntry(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_MicroTime	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_MicroTime(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_ObjectMeta	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_ObjectMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_OwnerReference	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_OwnerReference(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_PartialObjectMetadata	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_PartialObjectMetadata(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_PartialObjectMetadataList	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_PartialObjectMetadataList(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Patch	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Patch(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_PatchOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_PatchOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Preconditions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Preconditions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_RootPaths	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_RootPaths(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_ServerAddressByClientCIDR	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_ServerAddressByClientCIDR(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Status	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Status(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_StatusCause	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_StatusCause(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_StatusDetails	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_StatusDetails(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Table	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Table(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_TableColumnDefinition	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_TableColumnDefinition(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_TableOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_TableOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_TableRow	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_TableRow(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_TableRowCondition	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_TableRowCondition(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Time	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Time(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_Timestamp	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_Timestamp(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_TypeMeta	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_TypeMeta(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_UpdateOptions	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_UpdateOptions(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schema_pkg_apis_meta_v1_WatchEvent	pkg/ext/fixtures_test.go	/^func schema_pkg_apis_meta_v1_WatchEvent(ref common.ReferenceCallback) common.OpenAPIDefinition {$/;"	f
schemas	pkg/resources/schemas/template.go	/^package schemas$/;"	p
schemasForSubject	pkg/schema/factory.go	/^func (c *Collection) schemasForSubject(access *accesscontrol.AccessSet) (*types.APISchemas, error) {$/;"	f
schemasToWatch	pkg/resources/counts/counts.go	/^func (s *Store) schemasToWatch(apiOp *types.APIRequest) (result []*types.APISchema) {$/;"	f
schemas_test	pkg/resources/schemas/template_test.go	/^package schemas_test$/;"	p
schemeBuilder	pkg/ext/apiserver.go	/^	schemeBuilder = runtime.NewSchemeBuilder(addKnownTypes, metainternalversion.AddToScheme)$/;"	v
schemeBuilderTest	pkg/ext/fixtures_test.go	/^	schemeBuilderTest = runtime.NewSchemeBuilder(addKnownTypesTest)$/;"	v
selEquals	pkg/summarycache/summarycache.go	/^func selEquals(left, right *metav1.LabelSelector) bool {$/;"	f
selectQueryFmt	pkg/sqlcache/informer/indexer.go	/^	selectQueryFmt = `$/;"	c
selection	pkg/stores/sqlpartition/selection/operator.go	/^package selection$/;"	p
selector	pkg/stores/selector/selector.go	/^package selector$/;"	p
selfLink	pkg/resources/common/formatter.go	/^func selfLink(gvr schema2.GroupVersionResource, meta metav1.Object) (prefix string) {$/;"	f
sendSchemas	pkg/resources/schemas/template.go	/^func (s *Store) sendSchemas(result chan types.APIEvent, apiOp *types.APIRequest, user user.Info, oldSchemas *types.APISchemas) *types.APISchemas {$/;"	f
serve	pkg/aggregation/server.go	/^func serve(ctx context.Context, dialer websocket.Dialer, url string, headers http.Header, handler http.Handler) error {$/;"	f
serveIndex	pkg/ui/handler.go	/^func serveIndex(resp io.Writer, url string) error {$/;"	f
server	pkg/server/config.go	/^package server$/;"	p
server	pkg/server/server.go	/^package server$/;"	p
set	pkg/resources/userpreferences/localpref.go	/^func set(data map[string]interface{}) error {$/;"	f
setDefaults	pkg/server/server.go	/^func setDefaults(server *Server) error {$/;"	f
setVal	pkg/attributes/attributes.go	/^func setVal(s *types.APISchema, key string, value interface{}) {$/;"	f
setup	pkg/server/server.go	/^func setup(ctx context.Context, server *Server) error {$/;"	f
setupConfig	pkg/client/factory.go	/^func setupConfig(ctx *types.APIRequest, cfg *rest.Config, impersonate bool) (*rest.Config, error) {$/;"	f
setupExtensionAPIServer	pkg/ext/apiserver_test.go	/^func setupExtensionAPIServer($/;"	f
setupExtensionAPIServerNoStore	pkg/ext/apiserver_test.go	/^func setupExtensionAPIServerNoStore($/;"	f
setupTimeout	pkg/resources/schemas/template_test.go	/^var setupTimeout = time.Millisecond * 50$/;"	v
setupUserAuth	pkg/proxy/proxy.go	/^func setupUserAuth(req *http.Request, user user.Info, cfg *rest.Config) (*rest.Config, bool) {$/;"	f
shouldRestart	pkg/aggregation/watch.go	/^func (h *handler) shouldRestart(secret *corev1.Secret) (string, []byte, string, bool, error) {$/;"	f
simpleState	pkg/resources/counts/counts.go	/^func simpleState(summary summary.Summary) string {$/;"	f
skipWhiteSpaces	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) skipWhiteSpaces(ch byte) byte {$/;"	f
smartJoin	pkg/sqlcache/informer/listoption_indexer.go	/^func smartJoin(s []string) string {$/;"	f
sortAPIGroupList	pkg/ext/apiserver_test.go	/^func sortAPIGroupList(list *metav1.APIGroupList) {$/;"	f
sortParam	pkg/stores/partition/listprocessor/processor.go	/^	sortParam               = "sort"$/;"	c
sortParam	pkg/stores/sqlpartition/listprocessor/processor.go	/^	sortParam               = "sort"$/;"	c
splitQuery	pkg/stores/sqlpartition/listprocessor/processor.go	/^func splitQuery(query string) []string {$/;"	f
spyCache	pkg/accesscontrol/access_store_test.go	/^type spyCache struct {$/;"	t
sql	pkg/sqlcache/integration_test.go	/^package sql$/;"	p
sqlpartition	pkg/stores/sqlpartition/partition_mocks_test.go	/^package sqlpartition$/;"	p
sqlpartition	pkg/stores/sqlpartition/partitioner.go	/^package sqlpartition$/;"	p
sqlpartition	pkg/stores/sqlpartition/partitioner_test.go	/^package sqlpartition$/;"	p
sqlpartition	pkg/stores/sqlpartition/store.go	/^package sqlpartition$/;"	p
sqlpartition	pkg/stores/sqlpartition/store_test.go	/^package sqlpartition$/;"	p
sqlproxy	pkg/stores/sqlproxy/dynamic_mocks_test.go	/^package sqlproxy$/;"	p
sqlproxy	pkg/stores/sqlproxy/proxy_mocks_test.go	/^package sqlproxy$/;"	p
sqlproxy	pkg/stores/sqlproxy/proxy_store.go	/^package sqlproxy$/;"	p
sqlproxy	pkg/stores/sqlproxy/proxy_store_test.go	/^package sqlproxy$/;"	p
sqlproxy	pkg/stores/sqlproxy/sql_informer_mocks_test.go	/^package sqlproxy$/;"	p
sqltypes	pkg/sqlcache/sqltypes/types.go	/^package sqltypes$/;"	p
start	pkg/clustercache/controller.go	/^func (h *clusterCache) start() {$/;"	f
start	pkg/schema/collection.go	/^func start(ctx context.Context, templates []*Template) error {$/;"	f
start	pkg/server/server.go	/^func (c *Server) start(ctx context.Context) error {$/;"	f
startBackgroundRefresh	pkg/schema/definitions/refresh.go	/^func (r *refreshHandler) startBackgroundRefresh(ctx context.Context, duration time.Duration) {$/;"	f
startStopTemplate	pkg/schema/collection.go	/^func (c *Collection) startStopTemplate(schemas map[string]*types.APISchema) {$/;"	f
staticFields	pkg/schema/converter/crd.go	/^	staticFields = map[string]schemas.Field{$/;"	v
store	pkg/sqlcache/store/db_mocks_test.go	/^package store$/;"	p
store	pkg/sqlcache/store/store.go	/^package store$/;"	p
store	pkg/sqlcache/store/store_test.go	/^package store$/;"	p
store	pkg/sqlcache/store/transaction_mocks_test.go	/^package store$/;"	p
str	pkg/attributes/attributes.go	/^func str(s *types.APISchema, key string) string {$/;"	f
strictMatchFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	strictMatchFmt           = `%s`$/;"	c
string2token	pkg/stores/sqlpartition/queryparser/selector.go	/^var string2token = map[string]Token{$/;"	v
stripLeaveSlash	pkg/proxy/proxy.go	/^func stripLeaveSlash(prefix string, h http.Handler) http.Handler {$/;"	f
subfieldRegex	pkg/sqlcache/informer/listoption_indexer.go	/^	subfieldRegex          = regexp.MustCompile(`([a-zA-Z]+)|(\\[[-a-zA-Z.\/]+])|(\\[[0-9]+])`)$/;"	v
subjectGrants	pkg/accesscontrol/user_grants.go	/^type subjectGrants struct {$/;"	t
subjectIs	pkg/accesscontrol/policy_rule_index.go	/^func subjectIs(kind string, subject rbacv1.Subject) bool {$/;"	f
subjectIsServiceAccount	pkg/accesscontrol/policy_rule_index.go	/^func subjectIsServiceAccount(subject rbacv1.Subject) bool {$/;"	f
summarycache	pkg/summarycache/summarycache.go	/^package summarycache$/;"	p
svcAccountKind	pkg/accesscontrol/policy_rule_index.go	/^	svcAccountKind = rbacv1.ServiceAccountKind$/;"	c
switchschema	pkg/stores/switchschema/store.go	/^package switchschema$/;"	p
table	pkg/schema/table/mapper.go	/^package table$/;"	p
tableConvertWatch	pkg/stores/sqlproxy/tablelistconvert/client.go	/^type tableConvertWatch struct {$/;"	t
tableToList	pkg/stores/proxy/proxy_store.go	/^func tableToList(obj *unstructured.UnstructuredList) {$/;"	f
tableToList	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func tableToList(obj *unstructured.UnstructuredList) {$/;"	f
tableToObjects	pkg/stores/proxy/proxy_store.go	/^func tableToObjects(obj map[string]interface{}) []unstructured.Unstructured {$/;"	f
tableToObjects	pkg/stores/sqlproxy/proxy_store.go	/^func tableToObjects(obj map[string]interface{}) []unstructured.Unstructured {$/;"	f
tableToObjects	pkg/stores/sqlproxy/tablelistconvert/client.go	/^func tableToObjects(obj map[string]interface{}) []unstructured.Unstructured {$/;"	f
tablelistconvert	pkg/stores/sqlproxy/tablelistconvert/client.go	/^package tablelistconvert$/;"	p
tablelistconvert	pkg/stores/sqlproxy/tablelistconvert/client_test.go	/^package tablelistconvert$/;"	p
tablelistconvert	pkg/stores/sqlproxy/tablelistconvert/dynamic_mocks_test.go	/^package tablelistconvert$/;"	p
tablelistconvert	pkg/stores/sqlproxy/tablelistconvert/watch_mocks_test.go	/^package tablelistconvert$/;"	p
testFactory	pkg/stores/proxy/proxy_store_test.go	/^type testFactory struct {$/;"	t
testFactory	pkg/stores/sqlproxy/proxy_store_test.go	/^type testFactory struct {$/;"	t
testGroup	pkg/resources/counts/counts_test.go	/^	testGroup           = "test.k8s.io"$/;"	c
testGroup	pkg/schema/factory_test.go	/^	testGroup   = "test.k8s.io"$/;"	c
testListener	pkg/sqlcache/informer/shared_informer_test.go	/^type testListener struct {$/;"	t
testNamespace	pkg/sqlcache/integration_test.go	/^const testNamespace = "sql-test"$/;"	c
testNewResource	pkg/resources/counts/counts_test.go	/^	testNewResource     = "testNewCRD"$/;"	c
testNotUsedResource	pkg/resources/counts/counts_test.go	/^	testNotUsedResource = "testNotUsedCRD"$/;"	c
testResource	pkg/resources/counts/counts_test.go	/^	testResource        = "testCRD"$/;"	c
testStore	pkg/ext/fixtures_test.go	/^type testStore[T runtime.Object, TList runtime.Object] struct {$/;"	t
testStoreKeyFunc	pkg/sqlcache/store/store_test.go	/^func testStoreKeyFunc(obj interface{}) (string, error) {$/;"	f
testStoreObject	pkg/sqlcache/db/client_test.go	/^type testStoreObject struct {$/;"	t
testStoreObject	pkg/sqlcache/informer/indexer_test.go	/^type testStoreObject struct {$/;"	t
testStoreObject	pkg/sqlcache/store/store_test.go	/^type testStoreObject struct {$/;"	t
testTypeFixture	pkg/ext/fixtures_test.go	/^	testTypeFixture = TestType{$/;"	v
testTypeGV	pkg/ext/fixtures_test.go	/^	testTypeGV = schema.GroupVersion{$/;"	v
testTypeGVR	pkg/ext/fixtures_test.go	/^	testTypeGVR = schema.GroupVersionResource{$/;"	v
testTypeListFixture	pkg/ext/fixtures_test.go	/^	testTypeListFixture = TestTypeList{$/;"	v
testTypeOtherFixture	pkg/ext/fixtures_test.go	/^	testTypeOtherFixture = TestTypeOther{$/;"	v
testTypeOtherListFixture	pkg/ext/fixtures_test.go	/^	testTypeOtherListFixture = TestTypeOtherList{$/;"	v
testTypeResource	pkg/ext/fixtures_test.go	/^	testTypeResource = "testtypes"$/;"	v
testVersion	pkg/resources/counts/counts_test.go	/^	testVersion         = "v1"$/;"	c
testVersion	pkg/schema/factory_test.go	/^	testVersion = "v1"$/;"	c
toAPIEvent	pkg/resources/counts/buffer.go	/^func toAPIEvent(count Count) types.APIEvent {$/;"	f
toAPIObject	pkg/resources/apigroups/apigroup.go	/^func toAPIObject(schema *types.APISchema, group v1.APIGroup) types.APIObject {$/;"	f
toAPIObject	pkg/resources/cluster/apply.go	/^func (a *Apply) toAPIObject(apiContext *types.APIRequest, obj runtime.Object, defaultNamespace string) types.APIObject {$/;"	f
toAPIObject	pkg/resources/counts/counts.go	/^func toAPIObject(c Count) types.APIObject {$/;"	f
toAccessSet	pkg/accesscontrol/user_grants.go	/^func (b subjectGrants) toAccessSet() *AccessSet {$/;"	f
toBytes	pkg/sqlcache/db/client.go	/^func toBytes(obj any) []byte {$/;"	f
toColumnName	pkg/sqlcache/informer/listoption_indexer.go	/^func toColumnName(s []string) string {$/;"	f
toFullSelector	pkg/stores/sqlpartition/queryparser/selector.go	/^func (s ValidatedSetSelector) toFullSelector() Selector {$/;"	f
toGzippedBase64	pkg/resources/formatters/formatter_test.go	/^func toGzippedBase64(t *testing.T, v string) string {$/;"	f
toKey	pkg/clustercache/controller.go	/^func toKey(obj runtime.Object) string {$/;"	f
toKey	pkg/summarycache/summarycache.go	/^func toKey(obj runtime.Object) string {$/;"	f
toKeyFrom	pkg/summarycache/summarycache.go	/^func toKeyFrom(namespace, name string, gvk runtimeschema.GroupVersionKind, other ...string) string {$/;"	f
toMap	pkg/resources/virtual/common/util.go	/^func toMap(obj any) (map[string]any, error) {$/;"	f
toObj	pkg/stores/partition/store_test.go	/^func (a apple) toObj() types.APIObject {$/;"	f
toObj	pkg/stores/sqlpartition/store_test.go	/^func (a apple) toObj() types.APIObject {$/;"	f
toPlainMap	pkg/resources/formatters/formatter_test.go	/^func toPlainMap(t *testing.T, v interface{}) map[string]any {$/;"	f
toRel	pkg/summarycache/summarycache.go	/^func (s *SummaryCache) toRel(ns string, rel *summary.Relationship) Relationship {$/;"	f
toSelector	pkg/summarycache/summarycache.go	/^func toSelector(sel *metav1.LabelSelector) string {$/;"	f
toUnstructuredList	pkg/sqlcache/informer/listoption_indexer.go	/^func toUnstructuredList(items []any) *unstructured.UnstructuredList {$/;"	f
touchFile	pkg/sqlcache/db/client.go	/^func touchFile(filename string, perms fs.FileMode) error {$/;"	f
transaction	pkg/sqlcache/db/transaction/transaction.go	/^package transaction$/;"	p
translateError	pkg/stores/proxy/error_wrapper.go	/^func translateError(err error) error {$/;"	f
typeNameChanges	pkg/controllers/schema/schemas.go	/^	typeNameChanges = map[string]string{$/;"	v
typeSpecificIndexedFields	pkg/stores/sqlproxy/proxy_store.go	/^	typeSpecificIndexedFields = map[string][][]string{$/;"	v
ui	pkg/ui/handler.go	/^package ui$/;"	p
ui	pkg/ui/routes.go	/^package ui$/;"	p
unaryOperators	pkg/stores/sqlpartition/queryparser/selector.go	/^	unaryOperators = []string{$/;"	v
unformat	pkg/stores/proxy/unformatter.go	/^func unformat(obj types.APIObject) types.APIObject {$/;"	f
unformatterStore	pkg/stores/proxy/unformatter.go	/^type unformatterStore struct {$/;"	t
unread	pkg/stores/sqlpartition/queryparser/selector.go	/^func (l *Lexer) unread() {$/;"	f
update	pkg/ext/apiserver_authorization_test.go	/^func (t *authzTestStore) update(_ context.Context, _ *TestType, _ *metav1.UpdateOptions) (*TestType, error) {$/;"	f
update	pkg/ext/fixtures_test.go	/^func (t *testStore[T, TList]) update(_ context.Context, obj *TestType, _ *metav1.UpdateOptions) (*TestType, error) {$/;"	f
updateServiceAccount	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) updateServiceAccount(ctx context.Context, pod *v1.Pod, serviceAccount *v1.ServiceAccount, client kubernetes.Interface) error {$/;"	f
upsert	pkg/sqlcache/store/store.go	/^func (s *Store) upsert(key string, obj any) error {$/;"	f
upsertLabelsStmtFmt	pkg/sqlcache/informer/listoption_indexer.go	/^	upsertLabelsStmtFmt = `REPLACE INTO "%s_labels"(key, label, value) VALUES (?, ?, ?)`$/;"	c
upsertStmtFmt	pkg/sqlcache/store/store.go	/^	upsertStmtFmt   = `REPLACE INTO "%s"(key, object, objectnonce, dekid) VALUES (?, ?, ?, ?)`$/;"	c
userAndClient	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) userAndClient(ctx context.Context) (user.Info, kubernetes.Interface, error) {$/;"	f
userChangeNotify	pkg/resources/schemas/template.go	/^func (s *Store) userChangeNotify(ctx context.Context, user user.Info) chan interface{} {$/;"	f
userConfigName	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) userConfigName() string {$/;"	f
userGrants	pkg/accesscontrol/user_grants.go	/^type userGrants struct {$/;"	t
userGrantsFor	pkg/accesscontrol/access_store.go	/^func (l *AccessStore) userGrantsFor(user user.Info) userGrants {$/;"	f
userKind	pkg/accesscontrol/policy_rule_index.go	/^	userKind       = rbacv1.UserKind$/;"	c
userKubeConfig	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) userKubeConfig(role *rbacv1.ClusterRole, namespace string) (*v1.ConfigMap, error) {$/;"	f
userpreferences	pkg/resources/userpreferences/localpref.go	/^package userpreferences$/;"	p
userpreferences	pkg/resources/userpreferences/userpreferences.go	/^package userpreferences$/;"	p
validRequirementOperators	pkg/stores/sqlpartition/queryparser/selector.go	/^	validRequirementOperators = append(binaryOperators, unaryOperators...)$/;"	v
validSchema	pkg/clustercache/controller.go	/^func validSchema(schema *types.APISchema) bool {$/;"	f
validateColumn	pkg/sqlcache/informer/listoption_indexer.go	/^func (l *ListOptionIndexer) validateColumn(column string) error {$/;"	f
version	pkg/version/version.go	/^package version$/;"	p
virtual	pkg/resources/virtual/virtual.go	/^package virtual$/;"	p
virtual_test	pkg/resources/virtual/virtual_test.go	/^package virtual_test$/;"	p
waitForCacheReady	pkg/sqlcache/integration_test.go	/^func (i *IntegrationSuite) waitForCacheReady(readyResourceNames []string, namespace string, cache *factory.Cache) error {$/;"	f
waitForServiceAccount	pkg/podimpersonation/podimpersonation.go	/^func (s *PodImpersonation) waitForServiceAccount(ctx context.Context, client kubernetes.Interface, sa *v1.ServiceAccount) (*v1.ServiceAccount, error) {$/;"	f
waitForTurn	pkg/stores/partition/parallel.go	/^func waitForTurn(ctx context.Context, turn chan struct{}) {$/;"	f
watch	pkg/sqlcache/informer/synthetic_watcher.go	/^func (rw *SyntheticWatcher) watch(client dynamic.ResourceInterface, options metav1.ListOptions, interval time.Duration) (*SyntheticWatcher, error) {$/;"	f
watch	pkg/stores/proxy/proxy_store.go	/^func (s *Store) watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest, client dynamic.ResourceInterface) (chan watch.Event, error) {$/;"	f
watch	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) watch(apiOp *types.APIRequest, schema *types.APISchema, w types.WatchRequest, client dynamic.ResourceInterface) (chan watch.Event, error) {$/;"	f
watchByPartition	pkg/stores/sqlproxy/proxy_store.go	/^func (s *Store) watchByPartition(partition partition.Partition, apiOp *types.APIRequest, schema *types.APISchema, wr types.WatchRequest) (chan watch.Event, error) {$/;"	f
watchTimeoutEnv	pkg/stores/proxy/proxy_store.go	/^	watchTimeoutEnv            = "CATTLE_WATCH_TIMEOUT_SECONDS"$/;"	c
watchTimeoutEnv	pkg/stores/sqlproxy/proxy_store.go	/^	watchTimeoutEnv            = "CATTLE_WATCH_TIMEOUT_SECONDS"$/;"	c
watcher	pkg/clustercache/controller.go	/^type watcher struct {$/;"	t
watcher	pkg/ext/fixtures_test.go	/^type watcher struct {$/;"	t
webhookAuth	pkg/auth/filter.go	/^type webhookAuth struct {$/;"	t
with	pkg/stores/partition/store_test.go	/^func (a apple) with(data map[string]string) apple {$/;"	f
with	pkg/stores/sqlpartition/store_test.go	/^func (a apple) with(data map[string]string) apple {$/;"	f
withNamespace	pkg/stores/partition/store_test.go	/^func (a apple) withNamespace(namespace string) apple {$/;"	f
withNamespace	pkg/stores/sqlpartition/store_test.go	/^func (a apple) withNamespace(namespace string) apple {$/;"	f
writeTo	pkg/accesscontrol/user_grants.go	/^func (b subjectGrants) writeTo(digest hash.Hash) {$/;"	f
writeTo	pkg/accesscontrol/user_grants.go	/^func (r roleRef) writeTo(digest hash.Hash) {$/;"	f
zeroT	pkg/ext/utils.go	/^			var zeroT T$/;"	v
zeroT	pkg/ext/utils.go	/^		var zeroT T$/;"	v
