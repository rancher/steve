// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/steve/pkg/accesscontrol (interfaces: AccessSetLookup)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -package fake -destination fake/AccessSetLookup.go github.com/rancher/steve/pkg/accesscontrol AccessSetLookup
//

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	accesscontrol "github.com/rancher/steve/pkg/accesscontrol"
	gomock "go.uber.org/mock/gomock"
	user "k8s.io/apiserver/pkg/authentication/user"
)

// MockAccessSetLookup is a mock of AccessSetLookup interface.
type MockAccessSetLookup struct {
	ctrl     *gomock.Controller
	recorder *MockAccessSetLookupMockRecorder
}

// MockAccessSetLookupMockRecorder is the mock recorder for MockAccessSetLookup.
type MockAccessSetLookupMockRecorder struct {
	mock *MockAccessSetLookup
}

// NewMockAccessSetLookup creates a new mock instance.
func NewMockAccessSetLookup(ctrl *gomock.Controller) *MockAccessSetLookup {
	mock := &MockAccessSetLookup{ctrl: ctrl}
	mock.recorder = &MockAccessSetLookupMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessSetLookup) EXPECT() *MockAccessSetLookupMockRecorder {
	return m.recorder
}

// AccessFor mocks base method.
func (m *MockAccessSetLookup) AccessFor(arg0 user.Info) *accesscontrol.AccessSet {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccessFor", arg0)
	ret0, _ := ret[0].(*accesscontrol.AccessSet)
	return ret0
}

// AccessFor indicates an expected call of AccessFor.
func (mr *MockAccessSetLookupMockRecorder) AccessFor(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccessFor", reflect.TypeOf((*MockAccessSetLookup)(nil).AccessFor), arg0)
}

// PurgeUserData mocks base method.
func (m *MockAccessSetLookup) PurgeUserData(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PurgeUserData", arg0)
}

// PurgeUserData indicates an expected call of PurgeUserData.
func (mr *MockAccessSetLookupMockRecorder) PurgeUserData(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeUserData", reflect.TypeOf((*MockAccessSetLookup)(nil).PurgeUserData), arg0)
}
